name: '🛠 Normalize Arguments'
description: 'Normalizes multi-line or single-line arguments into a clean, single-line string by joining lines with a separator'
author: 'Francois Raminosona'

inputs:
  arguments:
    description: 'Arguments to normalize (supports single-line, multi-line with |, or folded with >) - can be empty'
    required: false
    default: ''
  separator:
    description: 'Separator to use between lines (default: space)'
    required: false
    default: ' '
  show-summary:
    description: 'Whether to show the action summary'
    required: false
    default: 'false'

outputs:
  normalized-arguments:
    description: 'The normalized arguments as a single line'
    value: ${{ steps.normalize.outputs.normalized-arguments }}
  is-empty:
    description: 'Whether the normalized result is empty'
    value: ${{ steps.normalize.outputs.is-empty }}

runs:
  using: "composite"
  steps:
    - name: "✅ Validate inputs"
      shell: bash
      run: |
        echo "::group::🔍 Input Validation"
        echo "::debug::Validating inputs for argument normalization"

        # Validate boolean parameters
        case "${{ inputs.show-summary }}" in
          true|false) ;;
          *) echo "::error::show-summary must be 'true' or 'false'"; exit 1 ;;
        esac

        echo "::notice::Input validation completed successfully"
        echo "::endgroup::"

    - name: "🔧 Normalize Arguments"
      id: normalize
      shell: bash
      run: |
        echo "::group::🚀 Normalizing Arguments"
        echo "::debug::Starting argument normalization process"

        # Handle empty arguments case
        if [ -z "${{ inputs.arguments }}" ]; then
          echo "::debug::Empty arguments provided, returning empty result"
          echo "normalized-arguments=" >> $GITHUB_OUTPUT
          echo "is-empty=true" >> $GITHUB_OUTPUT
          echo "::notice::Argument normalization completed (empty input)"
          echo "::endgroup::"
          exit 0
        fi

        # Read the arguments input into a temporary file for processing
        cat << 'ARGUMENTS_EOF' > /tmp/input_arguments.txt
        ${{ inputs.arguments }}
        ARGUMENTS_EOF

        echo "::debug::Original arguments received:"
        echo "::debug::$(cat /tmp/input_arguments.txt)"

        # Initialize variables
        NORMALIZED_ARGS=""
        SEPARATOR="${{ inputs.separator }}"

        # Process each line - sanitize and join with separator
        while IFS= read -r line || [ -n "$line" ]; do
          # Always trim whitespace from each line
          line=$(echo "$line" | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')

          # Skip empty lines
          if [ -z "$line" ]; then
            continue
          fi

          # Add the line with separator
          if [ -z "$NORMALIZED_ARGS" ]; then
            NORMALIZED_ARGS="$line"
          else
            NORMALIZED_ARGS="${NORMALIZED_ARGS}${SEPARATOR}${line}"
          fi

          echo "::debug::Added line: $line"

        done < /tmp/input_arguments.txt

        # Trim any leading/trailing whitespace from final result
        NORMALIZED_ARGS=$(echo "$NORMALIZED_ARGS" | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')

        # Determine if result is empty
        IS_EMPTY="false"
        if [ -z "$NORMALIZED_ARGS" ]; then
          IS_EMPTY="true"
          echo "::debug::No content found after processing"
        fi

        # Clean up temporary file
        rm -f /tmp/input_arguments.txt

        # Set outputs
        echo "normalized-arguments=$NORMALIZED_ARGS" >> $GITHUB_OUTPUT
        echo "is-empty=$IS_EMPTY" >> $GITHUB_OUTPUT

        echo "::notice::Argument normalization completed successfully"
        echo "::debug::Normalized arguments: $NORMALIZED_ARGS"
        echo "::endgroup::"

    - name: "📊 Action Summary"
      if: always() && inputs.show-summary == 'true'
      shell: bash
      run: |
        cat >> $GITHUB_STEP_SUMMARY << 'EOF'
        <details><summary>Expand for details - 📊 Normalize Arguments Summary</summary>

        ## 🔧 Input Parameters
        | Parameter | Value |
        |-----------|-------|
        | 📝 Arguments | `${{ inputs.arguments }}` |
        | 🔗 Separator | `${{ inputs.separator }}` |

        ## 📤 Normalization Results
        | Metric | Value |
        |--------|-------|
        | 🎯 Normalized Arguments | `${{ steps.normalize.outputs.normalized-arguments }}` |
        |  Is Empty | `${{ steps.normalize.outputs.is-empty }}` |
        | ✅ Status | `${{ steps.normalize.outcome }}` |

        ## ⚙️ Process Details
        | Step | Status |
        |------|--------|
        | ✅ Input Validation | `✅ Completed` |
        | 🔧 Argument Normalization | `${{ steps.normalize.outcome == 'success' && '✅ Completed' || '❌ Failed' }}` |

        ## 📋 Usage Example
        ```yaml
        - name: "Build with normalized arguments"
          run: |
            dotnet build ${{ steps.normalize.outputs.normalized-arguments }}
        ```

        </details>
        EOF

branding:
  icon: 'settings'
  color: 'blue'
