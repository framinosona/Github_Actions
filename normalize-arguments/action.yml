name: '🛠 Normalize Arguments'
description: 'Normalizes multi-line or single-line arguments into a clean, single-line string by joining lines with a separator'
author: 'Francois Raminosona'

inputs:
  arguments:
    description: 'Arguments to normalize (supports single-line, multi-line with |, or folded with >) - can be empty'
    required: false
    default: ''
  separator:
    description: 'Separator to use between lines (default: space)'
    required: false
    default: ' '
  show-summary:
    description: 'Whether to show the action summary'
    required: false
    default: 'false'

outputs:
  normalized:
    description: 'The normalized arguments as a single line'
    value: ${{ steps.normalize.outputs.normalized }}

runs:
  using: "composite"
  steps:
    # ================== ℹ️ ==================
    - name: "ℹ️ Gather environment information"
      shell: bash
      run: |
        echo "::group::ℹ️ Environment Information"
        echo "::debug::Operating System: $(uname -a)"
        echo "::debug::GitHub Runner OS: $RUNNER_OS"
        echo "::debug::GitHub Runner Version: $RUNNER_VERSION"
        echo "::debug::Shell: $SHELL"
        echo "::endgroup::"

    # ================== 🔒 ==================

    - name: "🔒 Mask sensitive data"
      shell: bash
      run: |
        # No sensitive inputs to mask in this action
        echo "✅ No sensitive data to mask"

    # ================== 📁 ==================

    - name: "📁 Normalize file paths"
      shell: bash
      run: |
        # This action IS the normalization action, no additional normalization needed
        echo "✅ No file paths to normalize"

    # ================== ✅ ==================

    - name: "✅ Validate inputs"
      shell: bash
      run: |
        echo "::group::🔍 Input Validation"
        echo "::debug::Validating inputs for argument normalization"

        # Validate boolean parameters
        case "${{ inputs.show-summary }}" in
          true|false) ;;
          *) echo "::error::show-summary must be 'true' or 'false'"; exit 1 ;;
        esac

        echo "::notice::Input validation completed successfully"
        echo "::endgroup::"

    # ================== 🚀 ==================

    - name: "🔧 Normalize Arguments"
      id: normalize
      shell: bash
      run: |
        echo "::group::🚀 Normalizing Arguments"
        echo "::debug::Starting argument normalization process"

        # Get the input arguments and separator using environment variables to avoid quote issues
        SEPARATOR="${{ inputs.separator }}"

        # Handle empty arguments case
        if [ -z "$INPUT_ARGUMENTS" ]; then
          echo "::debug::Empty arguments provided, returning empty result"
          echo "normalized=" >> $GITHUB_OUTPUT
          echo "::notice::Argument normalization completed (empty input)"
          echo "::endgroup::"
          exit 0
        fi

        # Simple approach: replace all newlines with spaces, then clean up
        # Use printf to avoid echo adding trailing newline
        NORMALIZED_ARGS=$(printf '%s' "$INPUT_ARGUMENTS" | tr '\n' ' ' | tr -s ' ' | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')

        # If a custom separator is specified (not space), replace spaces with the separator
        if [ "$SEPARATOR" != " " ]; then
          NORMALIZED_ARGS=$(printf '%s' "$NORMALIZED_ARGS" | sed "s/ /$SEPARATOR/g")
        fi

        # Set outputs - use delimiter to handle any special characters safely
        delimiter="$(openssl rand -hex 16)"
        {
          echo "normalized<<${delimiter}"
          printf '%s' "$NORMALIZED_ARGS"
          echo ""
          echo "${delimiter}"
        } >> "$GITHUB_OUTPUT"

        echo "::notice::Argument normalization completed successfully"
        echo "::debug::Normalized arguments: $NORMALIZED_ARGS"
        echo "::endgroup::"
      env:
        INPUT_ARGUMENTS: ${{ inputs.arguments }}

    # ================== 🔍 ==================
    - name: "🔍 Verify normalization results"
      shell: bash
      run: |
        echo "::group::🔍 Verifying Normalization Results"

        # Verify that output was generated
        if [ -z "${{ steps.normalize.outputs.normalized }}" ]; then
          echo "::warning::Normalization resulted in empty output"
        else
          echo "::notice::Normalization completed with valid output"
          echo "::debug::Output length: $(printf '%s' '${{ steps.normalize.outputs.normalized }}' | wc -c)"
        fi

        echo "✅ Normalization verification completed"
        echo "::endgroup::"

    # ================== 🔍 ===================
    - name: "📊 Action Summary"
      if: always() && inputs.show-summary == 'true'
      shell: bash
      run: |
        cat >> $GITHUB_STEP_SUMMARY << 'EOF'
        <details><summary>Expand for details - 📊 Normalize Arguments Summary</summary>

        ## 🔧 Input Parameters
        | Parameter | Value |
        |-----------|-------|
        | 📝 Arguments | `${{ inputs.arguments }}` |
        | 🔗 Separator | `${{ inputs.separator }}` |

        ## 📤 Normalization Results
        | Metric | Value |
        |--------|-------|
        | 🎯 Normalized Arguments | `${{ steps.normalize.outputs.normalized }}` |
        | ✅ Status | `${{ steps.normalize.outcome }}` |

        ## ⚙️ Process Details
        | Step | Status |
        |------|--------|
        | ✅ Input Validation | `✅ Completed` |
        | 🔧 Argument Normalization | `${{ steps.normalize.outcome == 'success' && '✅ Completed' || '❌ Failed' }}` |

        ## 📋 Usage Example
        ```yaml
        - name: "Build with normalized arguments"
          run: |
            dotnet build ${{ steps.normalize.outputs.normalized }}
        ```

        </details>
        EOF

branding:
  icon: 'settings'
  color: 'blue'
