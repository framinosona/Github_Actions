name: "📖 Generate DocFX Metadata"
description: "Generates YAML metadata files from source code using DocFX .NET Global Tool"
author: "Francois Raminosona"

inputs:
  # Arguments passed to dotnet
  working-directory:
    description: "Working directory for the command"
    required: false
    default: "."
  global:
    description: "Install the DocFX .NET global tool if not already installed"
    required: false
    default: "false"
  show-summary:
    description: "Whether to show the action summary"
    required: false
    default: "false"

  # Arguments unique to DocFX Metadata
  config:
    description: "Path to the docfx configuration file (default: docfx.json)"
    required: false
    default: "docfx.json"
  output:
    description: "Specify the output base directory"
    required: false
    default: "api"
  logLevel:
    description: "Set log level to error, warning, info, verbose or diagnostic"
    required: false
    default: "info"
  logFile:
    description: "Save log as structured JSON to the specified file"
    required: false
    default: ""
  verbose:
    description: "Set log level to verbose"
    required: false
    default: "false"
  warningsAsErrors:
    description: "Treats warnings as errors"
    required: false
    default: "false"
  shouldSkipMarkup:
    description: "Skip to markup the triple slash comments"
    required: false
    default: "false"
  outputFormat:
    description: "Specify the output type (mref, markdown, apiPage)"
    required: false
    default: "mref"
  filter:
    description: "Specify the filter config file"
    required: false
    default: ""
  globalNamespaceId:
    description: "Specify the name to use for the global namespace"
    required: false
    default: ""
  property:
    description: "MSBuild properties in JSON format (e.g., {'Configuration':'Release','Platform':'Any CPU'})"
    required: false
    default: ""
  disableGitFeatures:
    description: "Disable fetching Git related information for articles"
    required: false
    default: "false"
  disableDefaultFilter:
    description: "Disable the default API filter (default filter only generate public or protected APIs)"
    required: false
    default: "false"
  noRestore:
    description: "Do not run dotnet restore before building the projects"
    required: false
    default: "false"
  namespaceLayout:
    description: "Determines the namespace layout in table of contents (Flattened, Nested)"
    required: false
    default: "Flattened"
  memberLayout:
    description: "Determines the member page layout (SamePage, SeparatePages)"
    required: false
    default: "SamePage"
  useClrTypeNames:
    description: "Indicates whether the CLR type names or the language aliases must be used"
    required: false
    default: "false"
  docfx-version:
    description: "Version of DocFX tool to install"
    required: false
    default: ""

outputs:
  exit-code:
    description: "Exit code of the dotnet command"
    value: ${{ steps.run-dotnet.outputs.exit-code }}
  executed-command:
    description: "The actual command that was executed"
    value: ${{ steps.run-dotnet.outputs.executed-command }}
  output-path:
    description: "Full path to the generated metadata output directory"
    value: ${{ steps.build-args.outputs.output-path }}
  config-path:
    description: "Path to the DocFX configuration file used"
    value: ${{ steps.build-args.outputs.config-path }}
  files-count:
    description: "Number of metadata files generated"
    value: ${{ steps.analyze.outputs.files-count }}
  output-size:
    description: "Total size of the output directory in bytes"
    value: ${{ steps.analyze.outputs.output-size }}
  output-format:
    description: "Output format used for metadata generation"
    value: ${{ inputs.outputFormat }}

runs:
  using: "composite"
  steps:
    # ================== ℹ️ ==================
    - name: "ℹ️ Gather environment information"
      shell: bash
      run: |
        echo "::group::ℹ️ Environment Information"
        echo "::debug::Operating System: $(uname -a)"
        echo "::debug::GitHub Runner OS: $RUNNER_OS"
        echo "::debug::GitHub Runner Version: $RUNNER_VERSION"
        echo "::debug::.NET SDK Version: $(dotnet --version || echo 'Not installed')"
        echo "::endgroup::"

    # ================== 🔒 ==================
    - name: "🔒 Mask sensitive data"
      shell: bash
      run: |
        # No sensitive inputs to mask in this action
        echo "✅ No sensitive data to mask"

    # ================== 📁 ==================

    - name: "📁 Normalize config"
      id: normalize-config
      uses: framinosona/github_actions/normalize-path@main
      with:
        path: ${{ inputs.config }}

    - name: "📁 Normalize output"
      id: normalize-output
      uses: framinosona/github_actions/normalize-path@main
      with:
        path: ${{ inputs.output }}

    - name: "📁 Normalize filter"
      id: normalize-filter
      uses: framinosona/github_actions/normalize-path@main
      with:
        path: ${{ inputs.filter }}

    # ================== ✅ ==================
    - name: "✅ Validate input : booleans"
      shell: bash
      run: |
        echo "::debug::Validating boolean inputs for DocFX metadata generation"

        for param in verbose warningsAsErrors shouldSkipMarkup disableGitFeatures disableDefaultFilter noRestore useClrTypeNames; do
          case $param in
            verbose) value="${{ inputs.verbose }}" ;;
            warningsAsErrors) value="${{ inputs.warningsAsErrors }}" ;;
            shouldSkipMarkup) value="${{ inputs.shouldSkipMarkup }}" ;;
            disableGitFeatures) value="${{ inputs.disableGitFeatures }}" ;;
            disableDefaultFilter) value="${{ inputs.disableDefaultFilter }}" ;;
            noRestore) value="${{ inputs.noRestore }}" ;;
            useClrTypeNames) value="${{ inputs.useClrTypeNames }}" ;;
          esac
          if [ -n "$value" ] && [ "$value" != "true" ] && [ "$value" != "false" ]; then
            echo "::error::Parameter $param must be 'true' or 'false', got: $value"
            exit 1
          fi
        done

        echo "✅ Boolean input validation completed successfully"

    - name: "✅ Validate input : config"
      if: ${{ inputs.config != '' }}
      shell: bash
      run: |
        echo "::debug::Validating config input for DocFX metadata generation"

        if [ ! -f "${{ steps.normalize-config.outputs.normalized }}" ]; then
          echo "::error file=${{ steps.normalize-config.outputs.normalized }}::DocFX configuration file not found: ${{ steps.normalize-config.outputs.normalized }}"
          exit 1
        fi

        echo "✅ Config input validation completed successfully"

    - name: "✅ Validate input : logLevel"
      if: ${{ inputs.logLevel != '' && inputs.logLevel != 'info' }}
      shell: bash
      run: |
        echo "::debug::Validating logLevel input for DocFX metadata generation"

        case "${{ inputs.logLevel }}" in
          error|warning|info|verbose|diagnostic) ;;
          *) echo "::error::Invalid logLevel. Must be one of: error, warning, info, verbose, diagnostic"; exit 1 ;;
        esac

        echo "✅ Log-level input validation completed successfully"

    - name: "✅ Validate input : outputFormat"
      if: ${{ inputs.outputFormat != '' && inputs.outputFormat != 'mref' }}
      shell: bash
      run: |
        echo "::debug::Validating outputFormat input for DocFX metadata generation"

        case "${{ inputs.outputFormat }}" in
          mref|markdown|apiPage) ;;
          *) echo "::error::Invalid output format. Must be one of: mref, markdown, apiPage"; exit 1 ;;
        esac

        echo "✅ Output format validation completed successfully"

    - name: "✅ Validate input : namespaceLayout"
      if: ${{ inputs.namespaceLayout != '' && inputs.namespaceLayout != 'Flattened' }}
      shell: bash
      run: |
        echo "::debug::Validating namespaceLayout input for DocFX metadata generation"

        case "${{ inputs.namespaceLayout }}" in
          Flattened|Nested) ;;
          *) echo "::error::Invalid namespace layout. Must be one of: Flattened, Nested"; exit 1 ;;
        esac

        echo "✅ Namespace layout validation completed successfully"

    - name: "✅ Validate input : memberLayout"
      if: ${{ inputs.memberLayout != '' && inputs.memberLayout != 'SamePage' }}
      shell: bash
      run: |
        echo "::debug::Validating memberLayout input for DocFX metadata generation"

        case "${{ inputs.memberLayout }}" in
          SamePage|SeparatePages) ;;
          *) echo "::error::Invalid member layout. Must be one of: SamePage, SeparatePages"; exit 1 ;;
        esac

        echo "✅ Member layout validation completed successfully"

    - name: "✅ Validate input : property"
      if: ${{ inputs.property != '' }}
      shell: bash
      run: |
        echo "::debug::Validating property input for DocFX metadata generation"

        if ! echo "${{ inputs.property }}" | jq empty >/dev/null 2>&1; then
          echo "::error::Property must be a valid JSON string, got: ${{ inputs.property }}"
          exit 1
        fi

        echo "✅ Property input validation completed successfully"

    - name: "✅ Validate input : filter"
      if: ${{ inputs.filter != '' }}
      shell: bash
      run: |
        echo "::debug::Validating filter input for DocFX metadata generation"

        if [ ! -f "${{ steps.normalize-filter.outputs.normalized }}" ]; then
          echo "::error file=${{ steps.normalize-filter.outputs.normalized }}::Filter config file not found: ${{ steps.normalize-filter.outputs.normalized }}"
          exit 1
        fi

        echo "✅ Filter input validation completed successfully"

    - name: "✅ Validate input : docfx-version"
      if: ${{ inputs.docfx-version != '' }}
      shell: bash
      run: |
        echo "::debug::Validating docfx-version input for DocFX metadata generation"

        if ! [[ "${{ inputs.docfx-version }}" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
          echo "::warning::Version format may be invalid. Expected format: X.Y.Z, got: ${{ inputs.docfx-version }}"
        fi

        echo "✅ docfx-version input validation completed successfully"

    # ================== 🏗️ ==================
    - name: "🔧 Build arguments"
      id: build-args
      shell: bash
      run: |
        echo "::debug::Building arguments for DocFX metadata generation"

        # Start with base command
        ARGS="run docfx Metadata"

        # Key-value options (only add if not empty)
        for param in filter globalNamespaceId output config log property; do
          case $param in
            filter) value="${{ steps.normalize-filter.outputs.normalized }}" ;;
            globalNamespaceId) value="${{ inputs.globalNamespaceId }}" ;;
            output) value="${{ steps.normalize-output.outputs.normalized }}" ;;
            config) value="${{ steps.normalize-config.outputs.normalized }}" ;;
            log) value="${{ inputs.logFile }}" ;;
            property) value="${{ inputs.property }}" ;;
          esac
          if [ -n "$value" ]; then
            ARGS="$ARGS --$param '$value'"
          fi
        done

        # Boolean flags
        for param in verbose warningsAsErrors shouldSkipMarkup disableGitFeatures disableDefaultFilter noRestore useClrTypeNames; do
          case $param in
            verbose) value="${{ inputs.verbose }}" ;;
            warningsAsErrors) value="${{ inputs.warningsAsErrors }}" ;;
            shouldSkipMarkup) value="${{ inputs.shouldSkipMarkup }}" ;;
            disableGitFeatures) value="${{ inputs.disableGitFeatures }}" ;;
            disableDefaultFilter) value="${{ inputs.disableDefaultFilter }}" ;;
            noRestore) value="${{ inputs.noRestore }}" ;;
            useClrTypeNames) value="${{ inputs.useClrTypeNames }}" ;;
          esac
          if [ "$value" == "true" ]; then
            ARGS="$ARGS --${param}"
          fi
        done

        # Handle parameters with meaningful defaults
        if [ "${{ inputs.logLevel }}" != "info" ]; then
          ARGS="$ARGS --logLevel '${{ inputs.logLevel }}'"
        fi

        if [ "${{ inputs.outputFormat }}" != "mref" ]; then
          ARGS="$ARGS --outputFormat '${{ inputs.outputFormat }}'"
        fi

        if [ "${{ inputs.namespaceLayout }}" != "Flattened" ]; then
          ARGS="$ARGS --namespaceLayout '${{ inputs.namespaceLayout }}'"
        fi

        if [ "${{ inputs.memberLayout }}" != "SamePage" ]; then
          ARGS="$ARGS --memberLayout '${{ inputs.memberLayout }}'"
        fi

        echo "::debug::Generated arguments: $ARGS"
        echo "arguments=$ARGS" >> $GITHUB_OUTPUT
        echo "✅ Arguments built successfully"

    # ================== 🚀 ==================
    - name: "📦 Install DocFX tool"
      uses: "framinosona/github_actions/dotnet-tool-install@main"
      with:
        tool-name: "docfx"
        global: ${{ inputs.global }}
        create-manifest-if-needed: "true"
        version: ${{ inputs.docfx-version }}

    - name: "📖 Generate metadata with DocFX"
      id: run-dotnet
      uses: "framinosona/github_actions/dotnet@main"
      with:
        command: "tool"
        working-directory: ${{ inputs.working-directory }}
        arguments: ${{ steps.build-args.outputs.arguments }}
        show-summary: "${{ inputs.show-summary }}"

    # ================== 🔍 ==================
    - name: "📊 Analyze generated metadata"
      id: analyze
      shell: bash
      run: |
        echo "📊 Analyzing generated metadata..."

        OUTPUT_DIR="${{ steps.build-args.outputs.output-path }}"

        if [ -d "$OUTPUT_DIR" ]; then
          # Count files
          FILES_COUNT=$(find "$OUTPUT_DIR" -type f | wc -l | tr -d ' ')
          echo "📄 Metadata files generated: $FILES_COUNT"
          echo "files-count=$FILES_COUNT" >> $GITHUB_OUTPUT

          # Calculate total size
          if command -v du >/dev/null 2>&1; then
            if du -sb "$OUTPUT_DIR" >/dev/null 2>&1; then
              # GNU du
              OUTPUT_SIZE=$(du -sb "$OUTPUT_DIR" | cut -f1)
            else
              # BSD du (macOS)
              OUTPUT_SIZE=$(du -sk "$OUTPUT_DIR" | cut -f1)
              OUTPUT_SIZE=$((OUTPUT_SIZE * 1024))
            fi
          else
            OUTPUT_SIZE="unknown"
          fi

          echo "📏 Total output size: $OUTPUT_SIZE bytes"
          echo "output-size=$OUTPUT_SIZE" >> $GITHUB_OUTPUT

          # List metadata files by type
          echo "📋 Generated metadata files:"
          case "${{ inputs.output-format }}" in
            mref)
              find "$OUTPUT_DIR" -name "*.yml" -o -name "*.yaml" | head -10 | while read -r file; do
                echo "  📄 $file"
              done
              ;;
            markdown)
              find "$OUTPUT_DIR" -name "*.md" | head -10 | while read -r file; do
                echo "  📄 $file"
              done
              ;;
            apiPage)
              find "$OUTPUT_DIR" -name "*.json" | head -10 | while read -r file; do
                echo "  📄 $file"
              done
              ;;
          esac

        else
          echo "::error::Output directory not found: $OUTPUT_DIR"
          echo "files-count=0" >> $GITHUB_OUTPUT
          echo "output-size=0" >> $GITHUB_OUTPUT
        fi

    # ================== 📊 ==================
    - name: "📊 Action Summary"
      if: always() && inputs.show-summary == 'true'
      shell: bash
      run: |
        cat >> $GITHUB_STEP_SUMMARY << 'EOF'
        <details><summary>📄 DocFX Metadata</summary>

        ## 🔧 Input Parameters
        | Parameter | Value |
        |-----------|-------|
        | 📋 Config File | `${{ steps.normalize-config.outputs.normalized }}` |
        | 📁 Output Directory | `${{ steps.normalize-output.outputs.normalized }}` |
        | 📊 Log Level | `${{ inputs.logLevel }}` |
        | 📄 Output Format | `${{ inputs.outputFormat }}` |
        | 🌐 Namespace Layout | `${{ inputs.namespaceLayout }}` |
        | 👥 Member Layout | `${{ inputs.memberLayout }}` |

        ## 📤 Generation Results
        | Metric | Value |
        |--------|-------|
        | 📁 Output Path | `${{ steps.build-args.outputs.output-path }}` |
        | 📋 Config Path | `${{ steps.build-args.outputs.config-path }}` |
        | 📄 Files Generated | `${{ steps.analyze.outputs.files-count }}` |
        | 📏 Total Size | `${{ steps.analyze.outputs.output-size }} bytes` |
        | 📄 Output Format | `${{ inputs.outputFormat }}` |

        ## ⚙️ Configuration Options
        | Option | Status |
        |--------|--------|
        | 🔍 Verbose Logging | `${{ inputs.verbose }}` |
        | ⚠️ Warnings as Errors | `${{ inputs.warningsAsErrors }}` |
        | 📝 Skip Markup | `${{ inputs.shouldSkipMarkup }}` |
        | 🚫 Disable Git Features | `${{ inputs.disableGitFeatures }}` |
        | 🚫 Disable Default Filter | `${{ inputs.disableDefaultFilter }}` |
        | 🚫 No Restore | `${{ inputs.noRestore }}` |
        | 🔤 Use CLR Type Names | `${{ inputs.useClrTypeNames }}` |

        ## 🔧 Process Details
        | Step | Status |
        |------|--------|
        | ✅ Input Validation | `✅ Completed` |
        | 📦 Tool Installation | `✅ Completed` |
        | 📖 Metadata Generation | `${{ steps.run-dotnet.outcome == 'success' && '✅ Completed' || '❌ Failed' }}` |
        | 📊 Output Analysis | `${{ steps.analyze.outcome == 'success' && '✅ Completed' || '❌ Failed' }}` |

        </details>
        EOF

branding:
  icon: "file-text"
  color: "blue"
