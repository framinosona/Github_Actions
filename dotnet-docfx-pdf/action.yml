name: '📄 DocFX > Generate PDF'
description: 'Generates PDF documentation using DocFX .NET Global Tool'
author: 'Francois Raminosona'

inputs:
  config:
    description: 'Path to the docfx configuration file (default: docfx.json)'
    required: false
    default: 'docfx.json'
  output:
    description: 'Specify the output base directory'
    required: false
    default: '_site'
  log-level:
    description: 'Set log level to error, warning, info, verbose or diagnostic'
    required: false
    default: 'info'
  log-file:
    description: 'Save log as structured JSON to the specified file'
    required: false
    default: ''
  verbose:
    description: 'Set log level to verbose'
    required: false
    default: 'false'
  warnings-as-errors:
    description: 'Treats warnings as errors'
    required: false
    default: 'false'
  docfx-version:
    description: 'Version of DocFX tool to install'
    required: false
    default: ''
  show-summary:
    description: 'Whether to show the action summary'
    required: false
    default: 'false'

outputs:
  output-path:
    description: 'Full path to the generated PDF output directory'
    value: ${{ steps.build-args.outputs.output-path }}
  config-path:
    description: 'Path to the DocFX configuration file used'
    value: ${{ steps.build-args.outputs.config-path }}
  pdf-files:
    description: 'List of generated PDF files'
    value: ${{ steps.analyze.outputs.pdf-files }}
  files-count:
    description: 'Number of PDF files generated'
    value: ${{ steps.analyze.outputs.files-count }}
  output-size:
    description: 'Total size of the output directory in bytes'
    value: ${{ steps.analyze.outputs.output-size }}

runs:
  using: "composite"
  steps:
    - name: "✅ Validate inputs"
      shell: bash
      run: |
        echo "::group::🔍 DocFX PDF Input Validation"
        echo "::debug::Validating DocFX PDF inputs for documentation generation"

        # Validate config file exists if specified and not default
        if [ "${{ inputs.config }}" != "docfx.json" ] && [ ! -f "${{ inputs.config }}" ]; then
          echo "::error file=${{ inputs.config }}::DocFX configuration file not found: ${{ inputs.config }}"
          exit 1
        fi

        # Validate log level
        if [ -n "${{ inputs.log-level }}" ]; then
          case "${{ inputs.log-level }}" in
            error|warning|info|verbose|diagnostic) ;;
            *) echo "::error::Invalid log level. Must be one of: error, warning, info, verbose, diagnostic"; exit 1 ;;
          esac
        fi

        # Validate boolean inputs
        for param in verbose warnings-as-errors; do
          case $param in
            verbose) value="${{ inputs.verbose }}" ;;
            warnings-as-errors) value="${{ inputs.warnings-as-errors }}" ;;
          esac
          if [ -n "$value" ] && [ "$value" != "true" ] && [ "$value" != "false" ]; then
            echo "::error::Parameter $param must be 'true' or 'false', got: $value"
            exit 1
          fi
        done

        echo "::notice::Input validation completed successfully"
        echo "::endgroup::"

    - name: "📦 Install DocFX tool"
      uses: "./dotnet-tool-install"
      with:
        tool-name: 'docfx'
        tool-version: ${{ inputs.docfx-version }}

    - name: "🔧 Build arguments"
      id: build-args
      shell: bash
      run: |
        echo "::group::🔧 Building DocFX PDF Arguments"
        echo "::debug::Building dotnet arguments for DocFX PDF generation"

        # Start with base arguments
        ARGS="run docfx pdf"

        # Config file
        if [ -n "${{ inputs.config }}" ]; then
          ARGS="$ARGS '${{ inputs.config }}'"
        fi
        CONFIG_PATH=$(realpath "${{ inputs.config }}")
        echo "config-path=$CONFIG_PATH" >> $GITHUB_OUTPUT

        # Output directory
        if [ -n "${{ inputs.output }}" ]; then
          ARGS="$ARGS --output '${{ inputs.output }}'"
        fi
        OUTPUT_PATH=$(realpath "${{ inputs.output }}")
        echo "output-path=$OUTPUT_PATH" >> $GITHUB_OUTPUT

        # Log level
        if [ -n "${{ inputs.log-level }}" ]; then
          ARGS="$ARGS --logLevel '${{ inputs.log-level }}'"
        fi

        # Log file
        if [ -n "${{ inputs.log-file }}" ]; then
          ARGS="$ARGS --log '${{ inputs.log-file }}'"
        fi

        # Boolean flags
        [ "${{ inputs.verbose }}" = "true" ] && ARGS="$ARGS --verbose"
        [ "${{ inputs.warnings-as-errors }}" = "true" ] && ARGS="$ARGS --warningsAsErrors"

        echo "::debug::Generated arguments: $ARGS"

        # Output the arguments string
        echo "arguments=$ARGS" >> $GITHUB_OUTPUT
        echo "::endgroup::"

    - name: "📄 Generate PDF with DocFX"
      id: generate
      uses: ./dotnet
      with:
        command: "tool"
        arguments: ${{ steps.build-args.outputs.arguments }}

    - name: "📊 Analyze generated PDF files"
      id: analyze
      shell: bash
      run: |
        echo "::group::📊 Analyzing Generated PDF Files"
        echo "::debug::Analyzing generated DocFX PDF files"

        OUTPUT_DIR="${{ steps.build-args.outputs.output-path }}"

        if [ -d "$OUTPUT_DIR" ]; then
          # Find PDF files
          PDF_FILES=$(find "$OUTPUT_DIR" -name "*.pdf" -type f)
          FILES_COUNT=$(echo "$PDF_FILES" | grep -c . || echo "0")

          echo "📄 PDF files generated: $FILES_COUNT"
          echo "files-count=$FILES_COUNT" >> $GITHUB_OUTPUT

          # Create comma-separated list of PDF files
          if [ -n "$PDF_FILES" ]; then
            PDF_LIST=$(echo "$PDF_FILES" | tr '\n' ',')
            PDF_LIST=${PDF_LIST%,}  # Remove trailing comma
            echo "pdf-files=$PDF_LIST" >> $GITHUB_OUTPUT
          else
            echo "pdf-files=" >> $GITHUB_OUTPUT
          fi

          # Calculate total size
          if command -v du >/dev/null 2>&1; then
            if du -sb "$OUTPUT_DIR" >/dev/null 2>&1; then
              # GNU du
              OUTPUT_SIZE=$(du -sb "$OUTPUT_DIR" | cut -f1)
            else
              # BSD du (macOS)
              OUTPUT_SIZE=$(du -sk "$OUTPUT_DIR" | cut -f1)
              OUTPUT_SIZE=$((OUTPUT_SIZE * 1024))
            fi
          else
            OUTPUT_SIZE="unknown"
          fi

          echo "📏 Total output size: $OUTPUT_SIZE bytes"
          echo "output-size=$OUTPUT_SIZE" >> $GITHUB_OUTPUT

          # List PDF files with sizes
          if [ -n "$PDF_FILES" ]; then
            echo "📋 Generated PDF files:"
            echo "$PDF_FILES" | while read -r file; do
              if [ -f "$file" ]; then
                SIZE=$(wc -c < "$file" 2>/dev/null || echo "unknown")
                echo "  📄 $file ($SIZE bytes)"
              fi
            done
          else
            echo "::warning::No PDF files were generated"
          fi

        else
          echo "::error::Output directory not found: $OUTPUT_DIR"
          echo "files-count=0" >> $GITHUB_OUTPUT
          echo "output-size=0" >> $GITHUB_OUTPUT
          echo "pdf-files=" >> $GITHUB_OUTPUT
        fi

        echo "::endgroup::"

    - name: "📊 Action Summary"
      if: always() && inputs.show-summary == 'true'
      shell: bash
      run: |
        cat >> $GITHUB_STEP_SUMMARY << 'EOF'
        <details><summary>Expand for details - 📊 DocFX PDF Generation Summary</summary>

        ## 🔧 Input Parameters
        | Parameter | Value |
        |-----------|-------|
        | 📋 Config File | `${{ inputs.config }}` |
        | 📁 Output Directory | `${{ inputs.output }}` |
        | 📊 Log Level | `${{ inputs.log-level }}` |

        ## 📤 Generation Results
        | Metric | Value |
        |--------|-------|
        | 📁 Output Path | `${{ steps.build-args.outputs.output-path }}` |
        | 📋 Config Path | `${{ steps.build-args.outputs.config-path }}` |
        | 📄 PDF Files Generated | `${{ steps.analyze.outputs.files-count }}` |
        | 📏 Total Size | `${{ steps.analyze.outputs.output-size }} bytes` |

        ## 📄 Generated PDF Files
        | File | Status |
        |------|--------|
        ${{ steps.analyze.outputs.pdf-files != '' && steps.analyze.outputs.pdf-files || '| No PDF files generated | ❌ |' }}

        ## ⚙️ Configuration Options
        | Option | Status |
        |--------|--------|
        | 🔍 Verbose Logging | `${{ inputs.verbose }}` |
        | ⚠️ Warnings as Errors | `${{ inputs.warnings-as-errors }}` |

        ## 🔧 Process Details
        | Step | Status |
        |------|--------|
        | ✅ Input Validation | `✅ Completed` |
        | 📦 Tool Installation | `✅ Completed` |
        | 📄 PDF Generation | `${{ steps.generate.outcome == 'success' && '✅ Completed' || '❌ Failed' }}` |
        | 📊 Output Analysis | `${{ steps.analyze.outcome == 'success' && '✅ Completed' || '❌ Failed' }}` |

        </details>
        EOF

branding:
  icon: 'file-text'
  color: 'blue'
