name: "📄 Generate DocFX PDF"
description: "Generates PDF documentation using DocFX .NET Global Tool"
author: "Francois Raminosona"

inputs:
  # Arguments passed to dotnet
  working-directory:
    description: "Working directory for the command"
    required: false
    default: "."
  global:
    description: "Install the DocFX .NET global tool if not already installed"
    required: false
    default: "false"
  show-summary:
    description: "Whether to show the action summary"
    required: false
    default: "false"

  # Arguments unique to DocFX PDF
  config:
    description: "Path to the docfx configuration file (default: docfx.json)"
    required: false
    default: "docfx.json"
  output:
    description: "Specify the output base directory"
    required: false
    default: "_site"
  logLevel:
    description: "Set log level to error, warning, info, verbose or diagnostic"
    required: false
    default: "info"
  logFile:
    description: "Save log as structured JSON to the specified file"
    required: false
    default: ""
  verbose:
    description: "Set log level to verbose"
    required: false
    default: "false"
  warningsAsErrors:
    description: "Treats warnings as errors"
    required: false
    default: "false"
  docfx-version:
    description: "Version of DocFX tool to install"
    required: false
    default: ""

outputs:
  exit-code:
    description: "Exit code of the dotnet command"
    value: ${{ steps.run-dotnet.outputs.exit-code }}
  executed-command:
    description: "The actual command that was executed"
    value: ${{ steps.run-dotnet.outputs.executed-command }}
  output-path:
    description: "Full path to the generated PDF output directory"
    value: ${{ steps.build-args.outputs.output-path }}
  config-path:
    description: "Path to the DocFX configuration file used"
    value: ${{ steps.build-args.outputs.config-path }}
  pdf-files:
    description: "List of generated PDF files"
    value: ${{ steps.analyze.outputs.pdf-files }}
  files-count:
    description: "Number of PDF files generated"
    value: ${{ steps.analyze.outputs.files-count }}
  output-size:
    description: "Total size of the output directory in bytes"
    value: ${{ steps.analyze.outputs.output-size }}

runs:
  using: "composite"
  steps:
    - name: "✅ Validate input : booleans"
      shell: bash
      run: |
        echo "::debug::Validating boolean inputs for DocFX PDF generation"

        for param in verbose warningsAsErrors show-summary; do
          case $param in
            verbose) value="${{ inputs.verbose }}" ;;
            warningsAsErrors) value="${{ inputs.warningsAsErrors }}" ;;
            show-summary) value="${{ inputs.show-summary }}" ;;
          esac
          if [ -n "$value" ] && [ "$value" != "true" ] && [ "$value" != "false" ]; then
            echo "::error::Parameter $param must be 'true' or 'false', got: $value"
            exit 1
          fi
        done

        echo "✅ Boolean input validation completed successfully"

    - name: "✅ Validate input : config"
      if: ${{ inputs.config != '' }}
      shell: bash
      run: |
        echo "::debug::Validating config input for DocFX PDF generation"

        if [ ! -f "${{ inputs.config }}" ]; then
          echo "::error file=${{ inputs.config }}::DocFX configuration file not found: ${{ inputs.config }}"
          exit 1
        fi

        echo "✅ Config input validation completed successfully"

    - name: "✅ Validate input : logLevel"
      if: ${{ inputs.logLevel != '' && inputs.logLevel != 'info' }}
      shell: bash
      run: |
        echo "::debug::Validating logLevel input for DocFX PDF generation"

        case "${{ inputs.logLevel }}" in
          error|warning|info|verbose|diagnostic) ;;
          *) echo "::error::Invalid logLevel. Must be one of: error, warning, info, verbose, diagnostic"; exit 1 ;;
        esac

        echo "✅ Log-level input validation completed successfully"

    - name: "✅ Validate input : docfx-version"
      if: ${{ inputs.docfx-version != '' }}
      shell: bash
      run: |
        echo "::debug::Validating docfx-version input for DocFX PDF generation"

        if ! [[ "${{ inputs.docfx-version }}" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
          echo "::warning::Version format may be invalid. Expected format: X.Y.Z, got: ${{ inputs.docfx-version }}"
        fi

        echo "✅ docfx-version input validation completed successfully"

    - name: "📦 Install DocFX tool"
      uses: "framinosona/github_actions/dotnet-tool-install@main"
      with:
        tool-name: "docfx"
        global: ${{ inputs.global }}
        create-manifest-if-needed: "true"
        version: ${{ inputs.docfx-version }}

    - name: "🔧 Build arguments"
      id: build-args
      shell: bash
      run: |
        echo "::debug::Building arguments for DocFX PDF generation"

        # Start with base command
        ARGS="run docfx pdf"

        # Add config file path
        if [ -n "${{ inputs.config }}" ]; then
          ARGS="$ARGS '${{ inputs.config }}'"
        fi
        CONFIG_PATH=$(realpath "${{ inputs.config }}")
        echo "config-path=$CONFIG_PATH" >> $GITHUB_OUTPUT

        # Add output directory
        if [ -n "${{ inputs.output }}" ]; then
          ARGS="$ARGS --output '${{ inputs.output }}'"
        fi
        OUTPUT_PATH=$(realpath "${{ inputs.output }}")
        echo "output-path=$OUTPUT_PATH" >> $GITHUB_OUTPUT

        # Boolean flags
        for param in verbose warningsAsErrors; do
          case $param in
            verbose) value="${{ inputs.verbose }}" ;;
            warningsAsErrors) value="${{ inputs.warningsAsErrors }}" ;;
          esac
          if [ "$value" == "true" ]; then
            ARGS="$ARGS --${param}"
          fi
        done

        # Handle parameters with meaningful defaults
        if [ "${{ inputs.logLevel }}" != "info" ]; then
          ARGS="$ARGS --logLevel '${{ inputs.logLevel }}'"
        fi

        # Log file
        if [ -n "${{ inputs.logFile }}" ]; then
          ARGS="$ARGS --log '${{ inputs.logFile }}'"
        fi

        echo "::debug::Generated arguments: $ARGS"
        echo "arguments=$ARGS" >> $GITHUB_OUTPUT
        echo "✅ Arguments built successfully"

    - name: "📄 Generate PDF with DocFX"
      id: run-dotnet
      uses: "framinosona/github_actions/dotnet@main"
      with:
        command: "tool"
        working-directory: ${{ inputs.working-directory }}
        arguments: ${{ steps.build-args.outputs.arguments }}
        show-summary: "${{ inputs.show-summary }}"

    - name: "📊 Analyze generated PDF files"
      id: analyze
      shell: bash
      run: |
        echo "📊 Analyzing generated PDF files..."

        OUTPUT_DIR="${{ steps.build-args.outputs.output-path }}"

        if [ -d "$OUTPUT_DIR" ]; then
          # Find PDF files
          PDF_FILES=$(find "$OUTPUT_DIR" -name "*.pdf" -type f)
          FILES_COUNT=$(echo "$PDF_FILES" | grep -c . || echo "0")

          echo "📄 PDF files generated: $FILES_COUNT"
          echo "files-count=$FILES_COUNT" >> $GITHUB_OUTPUT

          # Create comma-separated list of PDF files
          if [ -n "$PDF_FILES" ]; then
            PDF_LIST=$(echo "$PDF_FILES" | tr '\n' ',')
            PDF_LIST=${PDF_LIST%,}  # Remove trailing comma
            echo "pdf-files=$PDF_LIST" >> $GITHUB_OUTPUT
          else
            echo "pdf-files=" >> $GITHUB_OUTPUT
          fi

          # Calculate total size
          if command -v du >/dev/null 2>&1; then
            if du -sb "$OUTPUT_DIR" >/dev/null 2>&1; then
              # GNU du
              OUTPUT_SIZE=$(du -sb "$OUTPUT_DIR" | cut -f1)
            else
              # BSD du (macOS)
              OUTPUT_SIZE=$(du -sk "$OUTPUT_DIR" | cut -f1)
              OUTPUT_SIZE=$((OUTPUT_SIZE * 1024))
            fi
          else
            OUTPUT_SIZE="unknown"
          fi

          echo "📏 Total output size: $OUTPUT_SIZE bytes"
          echo "output-size=$OUTPUT_SIZE" >> $GITHUB_OUTPUT

          # List PDF files with sizes
          if [ -n "$PDF_FILES" ]; then
            echo "📋 Generated PDF files:"
            echo "$PDF_FILES" | while read -r file; do
              if [ -f "$file" ]; then
                SIZE=$(wc -c < "$file" 2>/dev/null || echo "unknown")
                echo "  📄 $file ($SIZE bytes)"
              fi
            done
          else
            echo "::warning::No PDF files were generated"
          fi

        else
          echo "::error::Output directory not found: $OUTPUT_DIR"
          echo "files-count=0" >> $GITHUB_OUTPUT
          echo "output-size=0" >> $GITHUB_OUTPUT
          echo "pdf-files=" >> $GITHUB_OUTPUT
        fi

    - name: "📊 Action Summary"
      if: always() && inputs.show-summary == 'true'
      shell: bash
      run: |
        cat >> $GITHUB_STEP_SUMMARY << 'EOF'
        <details><summary>📄 DocFX PDF</summary>

        ## 🔧 Input Parameters
        | Parameter | Value |
        |-----------|-------|
        | 📋 Config File | `${{ inputs.config }}` |
        | 📁 Output Directory | `${{ inputs.output }}` |
        | 📊 Log Level | `${{ inputs.logLevel }}` |

        ## 📤 Generation Results
        | Metric | Value |
        |--------|-------|
        | 📁 Output Path | `${{ steps.build-args.outputs.output-path }}` |
        | 📋 Config Path | `${{ steps.build-args.outputs.config-path }}` |
        | 📄 PDF Files Generated | `${{ steps.analyze.outputs.files-count }}` |
        | 📏 Total Size | `${{ steps.analyze.outputs.output-size }} bytes` |

        ## 📄 Generated PDF Files
        | File | Status |
        |------|--------|
        ${{ steps.analyze.outputs.pdf-files != '' && steps.analyze.outputs.pdf-files || '| No PDF files generated | ❌ |' }}

        ## ⚙️ Configuration Options
        | Option | Status |
        |--------|--------|
        | 🔍 Verbose Logging | `${{ inputs.verbose }}` |
        | ⚠️ Warnings as Errors | `${{ inputs.warningsAsErrors }}` |

        ## 🔧 Process Details
        | Step | Status |
        |------|--------|
        | ✅ Input Validation | `✅ Completed` |
        | 📦 Tool Installation | `✅ Completed` |
        | � Argument Building | `${{ steps.build-args.outcome == 'success' && '✅ Completed' || '❌ Failed' }}` |
        | �📄 PDF Generation | `${{ steps.run-dotnet.outcome == 'success' && '✅ Completed' || '❌ Failed' }}` |
        | 📊 Output Analysis | `${{ steps.analyze.outcome == 'success' && '✅ Completed' || '❌ Failed' }}` |

        </details>
        EOF

branding:
  icon: "file-text"
  color: "blue"
