name: "🍎 Install Apple Certificate"
description: "Installs Apple certificates and provisioning profiles for iOS/macOS development"
author: "Francois Raminosona"

inputs:
  certificate-data:
    description: "Base64 encoded certificate (.p12 file content)"
    required: false
    default: ""
  certificate-path:
    description: "Path to certificate file (.p12)"
    required: false
    default: ""
  certificate-password:
    description: "Password for the certificate"
    required: true
  provisioning-profile-data:
    description: "Base64 encoded provisioning profile (.mobileprovision file content)"
    required: false
    default: ""
  provisioning-profile-path:
    description: "Path to provisioning profile file (.mobileprovision)"
    required: false
    default: ""
  keychain-name:
    description: "Name for the temporary keychain"
    required: false
    default: "build.keychain"
  keychain-password:
    description: "Password for the temporary keychain"
    required: false
    default: "build-keychain-password"
  delete-keychain:
    description: "Delete the keychain after installation"
    required: false
    default: "true"
  certificate-type:
    description: "Type of certificate (development, distribution, developer-id)"
    required: false
    default: "development"
  team-id:
    description: "Apple Developer Team ID"
    required: false
    default: ""
  allow-codesign-keychain-access:
    description: "Allow codesign to access the keychain"
    required: false
    default: "true"
  show-summary:
    description: "Whether to show the action summary"
    required: false
    default: "false"

outputs:
  keychain-path:
    description: "Path to the created keychain"
    value: ${{ steps.install.outputs.keychain-path }}
  certificate-name:
    description: "Name of the installed certificate"
    value: ${{ steps.install.outputs.certificate-name }}
  certificate-sha1:
    description: "SHA1 fingerprint of the installed certificate"
    value: ${{ steps.install.outputs.certificate-sha1 }}
  provisioning-profile-name:
    description: "Name of the installed provisioning profile"
    value: ${{ steps.install.outputs.provisioning-profile-name }}
  provisioning-profile-uuid:
    description: "UUID of the installed provisioning profile"
    value: ${{ steps.install.outputs.provisioning-profile-uuid }}
  team-id:
    description: "Team ID from the certificate or input"
    value: ${{ steps.install.outputs.team-id }}

runs:
  using: "composite"
  steps:
    - name: "🔒 Mask sensitive data"
      shell: bash
      run: |
        # Mask all sensitive data FIRST
        if [ -n "${{ inputs.certificate-password }}" ]; then
          echo "::add-mask::${{ inputs.certificate-password }}"
        fi
        if [ -n "${{ inputs.keychain-password }}" ]; then
          echo "::add-mask::${{ inputs.keychain-password }}"
        fi
        if [ -n "${{ inputs.certificate-data }}" ]; then
          echo "::add-mask::${{ inputs.certificate-data }}"
        fi
        if [ -n "${{ inputs.provisioning-profile-data }}" ]; then
          echo "::add-mask::${{ inputs.provisioning-profile-data }}"
        fi

        echo "::debug::Masked sensitive inputs"

    - name: "✅ Validate environment : macOS required"
      shell: bash
      run: |
        echo "::debug::Validating runtime environment..."

        # Check that we're running on macOS
        if [[ "$RUNNER_OS" != "macOS" ]]; then
          echo "::error::This action only works on macOS runners, current OS: $RUNNER_OS"
          exit 1
        fi

        # Verify security command is available
        if ! command -v security >/dev/null 2>&1; then
          echo "::error::macOS security command not found"
          exit 1
        fi

        echo "✅ Environment validation completed successfully"

    - name: "✅ Validate input : required parameters"
      shell: bash
      run: |
        echo "::debug::Validating required parameters..."

        # Validate certificate password is provided
        if [ -z "${{ inputs.certificate-password }}" ]; then
          echo "::error::Certificate password is required"
          exit 1
        fi

        # Validate that either certificate-data or certificate-path is provided
        if [ -z "${{ inputs.certificate-data }}" ] && [ -z "${{ inputs.certificate-path }}" ]; then
          echo "::error::Either certificate-data or certificate-path must be provided"
          exit 1
        fi

        # Validate that both certificate inputs are not provided
        if [ -n "${{ inputs.certificate-data }}" ] && [ -n "${{ inputs.certificate-path }}" ]; then
          echo "::error::Only one of certificate-data or certificate-path should be provided"
          exit 1
        fi

        echo "✅ Required parameters validation completed successfully"

    - name: "✅ Validate input : booleans"
      shell: bash
      run: |
        echo "::debug::Validating boolean inputs..."
        for param in delete-keychain allow-codesign-keychain-access show-summary; do
          case $param in
            delete-keychain) value="${{ inputs.delete-keychain }}" ;;
            allow-codesign-keychain-access) value="${{ inputs.allow-codesign-keychain-access }}" ;;
            show-summary) value="${{ inputs.show-summary }}" ;;
          esac
          if [ -n "$value" ] && [ "$value" != "true" ] && [ "$value" != "false" ]; then
            echo "::error::Parameter $param must be 'true' or 'false', got: $value"
            exit 1
          fi
        done

        echo "✅ Boolean inputs validation completed successfully"

    - name: "✅ Validate input : certificate-type"
      shell: bash
      run: |
        echo "::debug::Validating certificate-type input: ${{ inputs.certificate-type }}"

        case "${{ inputs.certificate-type }}" in
          development|distribution|developer-id) ;;
          *) echo "::error::Invalid certificate type. Must be one of: development, distribution, developer-id"; exit 1 ;;
        esac

        echo "✅ Certificate type validation completed successfully"

    - name: "✅ Validate input : certificate-path"
      if: ${{ inputs.certificate-path != '' }}
      shell: bash
      run: |
        echo "::debug::Validating certificate-path input: ${{ inputs.certificate-path }}"

        # Validate certificate file exists
        if [ ! -f "${{ inputs.certificate-path }}" ]; then
          echo "::error file=${{ inputs.certificate-path }}::Certificate file not found: ${{ inputs.certificate-path }}"
          exit 1
        fi

        # Validate file extension
        if [[ ! "${{ inputs.certificate-path }}" =~ \.p12$ ]]; then
          echo "::warning::Certificate file should have .p12 extension: ${{ inputs.certificate-path }}"
        fi

        echo "✅ Certificate path validation completed successfully"

    - name: "✅ Validate input : certificate-data"
      if: ${{ inputs.certificate-data != '' }}
      shell: bash
      run: |
        echo "::debug::Validating certificate-data input..."

        # Validate base64 format
        if ! echo "${{ inputs.certificate-data }}" | base64 --decode >/dev/null 2>&1; then
          echo "::error::Certificate data is not valid base64 format"
          exit 1
        fi

        echo "✅ Certificate data validation completed successfully"

    - name: "✅ Validate input : provisioning-profile-path"
      if: ${{ inputs.provisioning-profile-path != '' }}
      shell: bash
      run: |
        echo "::debug::Validating provisioning-profile-path input: ${{ inputs.provisioning-profile-path }}"

        # Validate provisioning profile file exists
        if [ ! -f "${{ inputs.provisioning-profile-path }}" ]; then
          echo "::error file=${{ inputs.provisioning-profile-path }}::Provisioning profile file not found: ${{ inputs.provisioning-profile-path }}"
          exit 1
        fi

        # Validate file extension
        if [[ ! "${{ inputs.provisioning-profile-path }}" =~ \.mobileprovision$ ]]; then
          echo "::warning::Provisioning profile should have .mobileprovision extension: ${{ inputs.provisioning-profile-path }}"
        fi

        echo "✅ Provisioning profile path validation completed successfully"

    - name: "✅ Validate input : provisioning-profile-data"
      if: ${{ inputs.provisioning-profile-data != '' }}
      shell: bash
      run: |
        echo "::debug::Validating provisioning-profile-data input..."

        # Validate that both provisioning profile inputs are not provided
        if [ -n "${{ inputs.provisioning-profile-path }}" ]; then
          echo "::error::Only one of provisioning-profile-data or provisioning-profile-path should be provided"
          exit 1
        fi

        # Validate base64 format
        if ! echo "${{ inputs.provisioning-profile-data }}" | base64 --decode >/dev/null 2>&1; then
          echo "::error::Provisioning profile data is not valid base64 format"
          exit 1
        fi

        echo "✅ Provisioning profile data validation completed successfully"

    - name: "✅ Validate input : keychain-name"
      shell: bash
      run: |
        echo "::debug::Validating keychain-name input: ${{ inputs.keychain-name }}"

        # Validate keychain name doesn't contain spaces or special characters
        if [[ "${{ inputs.keychain-name }}" =~ [[:space:]] ]]; then
          echo "::error::Keychain name cannot contain spaces: ${{ inputs.keychain-name }}"
          exit 1
        fi

        if [[ "${{ inputs.keychain-name }}" =~ [/\\:*?"<>\\|] ]]; then
          echo "::error::Keychain name contains invalid characters: ${{ inputs.keychain-name }}"
          exit 1
        fi

        echo "✅ Keychain name validation completed successfully"

    - name: "✅ Validate input : team-id"
      if: ${{ inputs.team-id != '' }}
      shell: bash
      run: |
        echo "::debug::Validating team-id input: ${{ inputs.team-id }}"

        # Validate Team ID format (10 alphanumeric characters)
        if ! [[ "${{ inputs.team-id }}" =~ ^[A-Z0-9]{10}$ ]]; then
          echo "::error::Team ID must be exactly 10 alphanumeric characters (uppercase), got: ${{ inputs.team-id }}"
          exit 1
        fi

        echo "✅ Team ID validation completed successfully"

    - name: "🍎 Install Apple certificate and provisioning profile"
      id: install
      shell: bash
      run: |
        echo "::debug::Installing Apple certificate and provisioning profile..."

        # Set up temporary directory for files
        TEMP_DIR=$(mktemp -d)
        echo "::debug::Using temporary directory: $TEMP_DIR"

        # Define keychain path
        KEYCHAIN_PATH="$HOME/Library/Keychains/${{ inputs.keychain-name }}-db"
        echo "::debug::Keychain path: $KEYCHAIN_PATH"
        echo "keychain-path=$KEYCHAIN_PATH" >> $GITHUB_OUTPUT

        # Create temporary keychain
        echo "::debug::Creating temporary keychain..."
        if ! security create-keychain -p "${{ inputs.keychain-password }}" "${{ inputs.keychain-name }}"; then
          echo "::error::Failed to create keychain"
          exit 1
        fi

        # Set keychain settings
        echo "::debug::Configuring keychain settings..."
        security set-keychain-settings -lut 21600 "${{ inputs.keychain-name }}"
        security default-keychain -s "${{ inputs.keychain-name }}"
        security unlock-keychain -p "${{ inputs.keychain-password }}" "${{ inputs.keychain-name }}"

        # Handle certificate installation
        CERTIFICATE_FILE=""
        if [ -n "${{ inputs.certificate-data }}" ]; then
          echo "::debug::Processing base64 encoded certificate..."
          CERTIFICATE_FILE="$TEMP_DIR/certificate.p12"
          if ! echo "${{ inputs.certificate-data }}" | base64 --decode > "$CERTIFICATE_FILE"; then
            echo "::error::Failed to decode certificate data"
            exit 1
          fi
        elif [ -n "${{ inputs.certificate-path }}" ]; then
          echo "::debug::Using certificate file: ${{ inputs.certificate-path }}"
          CERTIFICATE_FILE="${{ inputs.certificate-path }}"
        fi

        # Import certificate
        if [ -n "$CERTIFICATE_FILE" ]; then
          echo "::debug::Importing certificate into keychain..."
          if ! security import "$CERTIFICATE_FILE" -k "${{ inputs.keychain-name }}" -P "${{ inputs.certificate-password }}" -T /usr/bin/codesign; then
            echo "::error::Failed to import certificate"
            exit 1
          fi

          # Get certificate information
          echo "::debug::Extracting certificate information..."
          CERT_SHA1=$(security find-certificate -a -c "iPhone" -Z "${{ inputs.keychain-name }}" 2>/dev/null | grep "SHA-1 hash:" | head -1 | cut -d' ' -f3 || true)
          if [ -z "$CERT_SHA1" ]; then
            CERT_SHA1=$(security find-certificate -a -c "Mac" -Z "${{ inputs.keychain-name }}" 2>/dev/null | grep "SHA-1 hash:" | head -1 | cut -d' ' -f3 || true)
          fi
          if [ -z "$CERT_SHA1" ]; then
            CERT_SHA1=$(security find-certificate -a -Z "${{ inputs.keychain-name }}" 2>/dev/null | grep "SHA-1 hash:" | head -1 | cut -d' ' -f3 || true)
          fi

          CERT_NAME=$(security find-certificate -a -c "iPhone" -p "${{ inputs.keychain-name }}" 2>/dev/null | openssl x509 -subject -noout 2>/dev/null | sed 's/^subject.*CN=\([^,]*\).*/\1/' || true)
          if [ -z "$CERT_NAME" ]; then
            CERT_NAME=$(security find-certificate -a -c "Mac" -p "${{ inputs.keychain-name }}" 2>/dev/null | openssl x509 -subject -noout 2>/dev/null | sed 's/^subject.*CN=\([^,]*\).*/\1/' || true)
          fi
          if [ -z "$CERT_NAME" ]; then
            CERT_NAME=$(security find-certificate -a -p "${{ inputs.keychain-name }}" 2>/dev/null | openssl x509 -subject -noout 2>/dev/null | sed 's/^subject.*CN=\([^,]*\).*/\1/' | head -1 || true)
          fi

          echo "certificate-sha1=${CERT_SHA1:-unknown}" >> $GITHUB_OUTPUT
          echo "certificate-name=${CERT_NAME:-unknown}" >> $GITHUB_OUTPUT
          echo "✅ Certificate installed: ${CERT_NAME:-unknown}"
          echo "::debug::Certificate SHA1: ${CERT_SHA1:-unknown}"

          # Extract Team ID from certificate if not provided
          EXTRACTED_TEAM_ID=""
          if [ -z "${{ inputs.team-id }}" ]; then
            EXTRACTED_TEAM_ID=$(security find-certificate -a -p "${{ inputs.keychain-name }}" 2>/dev/null | openssl x509 -subject -noout 2>/dev/null | grep -o 'OU=[A-Z0-9]\{10\}' | cut -d'=' -f2 | head -1 || true)
            if [ -n "$EXTRACTED_TEAM_ID" ]; then
              echo "::debug::Extracted Team ID from certificate: $EXTRACTED_TEAM_ID"
              echo "team-id=$EXTRACTED_TEAM_ID" >> $GITHUB_OUTPUT
            fi
          else
            echo "team-id=${{ inputs.team-id }}" >> $GITHUB_OUTPUT
          fi
        fi

        # Handle provisioning profile installation
        PROFILE_FILE=""
        if [ -n "${{ inputs.provisioning-profile-data }}" ]; then
          echo "::debug::Processing base64 encoded provisioning profile..."
          PROFILE_FILE="$TEMP_DIR/profile.mobileprovision"
          if ! echo "${{ inputs.provisioning-profile-data }}" | base64 --decode > "$PROFILE_FILE"; then
            echo "::error::Failed to decode provisioning profile data"
            exit 1
          fi
        elif [ -n "${{ inputs.provisioning-profile-path }}" ]; then
          echo "::debug::Using provisioning profile file: ${{ inputs.provisioning-profile-path }}"
          PROFILE_FILE="${{ inputs.provisioning-profile-path }}"
        fi

        # Install provisioning profile
        if [ -n "$PROFILE_FILE" ]; then
          echo "::debug::Installing provisioning profile..."

          # Create provisioning profiles directory if it doesn't exist
          mkdir -p "$HOME/Library/MobileDevice/Provisioning Profiles"

          # Extract profile UUID and name
          if ! PROFILE_UUID=$(security cms -D -i "$PROFILE_FILE" | plutil -extract UUID raw -); then
            echo "::error::Failed to extract provisioning profile UUID"
            exit 1
          fi

          if ! PROFILE_NAME=$(security cms -D -i "$PROFILE_FILE" | plutil -extract Name raw -); then
            echo "::error::Failed to extract provisioning profile name"
            exit 1
          fi

          # Copy profile to the correct location
          if ! cp "$PROFILE_FILE" "$HOME/Library/MobileDevice/Provisioning Profiles/$PROFILE_UUID.mobileprovision"; then
            echo "::error::Failed to copy provisioning profile"
            exit 1
          fi

          echo "provisioning-profile-uuid=$PROFILE_UUID" >> $GITHUB_OUTPUT
          echo "provisioning-profile-name=$PROFILE_NAME" >> $GITHUB_OUTPUT
          echo "✅ Provisioning profile installed: $PROFILE_NAME"
          echo "::debug::Profile UUID: $PROFILE_UUID"
        fi

        # Configure keychain for codesign access
        if [ "${{ inputs.allow-codesign-keychain-access }}" = "true" ]; then
          echo "::debug::Configuring keychain for codesign access..."
          if ! security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "${{ inputs.keychain-password }}" "${{ inputs.keychain-name }}"; then
            echo "::warning::Failed to configure keychain for codesign access"
          fi
        fi

        # Add keychain to search list
        echo "::debug::Adding keychain to search list..."
        security list-keychains -d user -s "${{ inputs.keychain-name }}" $(security list-keychains -d user | sed s/\"//g)

        # Clean up temporary directory
        rm -rf "$TEMP_DIR"
        echo "::debug::Cleaned up temporary files"

        echo "✅ Apple certificate and provisioning profile installation completed successfully"

    - name: "� Verify installation"
      id: verify
      shell: bash
      run: |
        echo "::debug::Verifying certificate and provisioning profile installation..."

        # Verify certificate installation
        if security find-certificate -a "${{ inputs.keychain-name }}" >/dev/null 2>&1; then
          CERT_COUNT=$(security find-certificate -a "${{ inputs.keychain-name }}" 2>/dev/null | grep -c "keychain:" || echo "0")
          echo "✅ Found $CERT_COUNT certificate(s) in keychain"

          # List certificates for verification
          echo "::debug::Installed certificates:"
          security find-certificate -a "${{ inputs.keychain-name }}" -p 2>/dev/null | openssl x509 -subject -noout 2>/dev/null | while read -r line; do
            echo "::debug::  🔒 $line"
          done
        else
          echo "::warning::No certificates found in keychain"
        fi

        # Verify provisioning profile installation
        if [ -d "$HOME/Library/MobileDevice/Provisioning Profiles" ]; then
          PROFILE_COUNT=$(find "$HOME/Library/MobileDevice/Provisioning Profiles" -name "*.mobileprovision" 2>/dev/null | wc -l | tr -d ' ')
          echo "✅ Found $PROFILE_COUNT provisioning profile(s) installed"
        else
          echo "::debug::Provisioning profiles directory does not exist"
        fi

        # Verify keychain is in search list
        if security list-keychains -d user 2>/dev/null | grep -q "${{ inputs.keychain-name }}"; then
          echo "✅ Keychain is in search list"
        else
          echo "::warning::Keychain not found in search list"
        fi

        echo "✅ Verification completed successfully"

    - name: "🧹 Cleanup keychain"
      if: ${{ inputs.delete-keychain == 'true' }}
      shell: bash
      run: |
        echo "::debug::Cleaning up keychain..."

        # Remove keychain from search list
        if ! security list-keychains -d user -s $(security list-keychains -d user 2>/dev/null | sed s/\"//g | grep -v "${{ inputs.keychain-name }}") 2>/dev/null; then
          echo "::warning::Failed to remove keychain from search list"
        fi

        # Delete keychain
        if ! security delete-keychain "${{ inputs.keychain-name }}" 2>/dev/null; then
          echo "::warning::Failed to delete keychain, it may not exist"
        fi

        echo "✅ Keychain cleanup completed successfully"

    - name: "📊 Action Summary"
      if: always() && inputs.show-summary == 'true'
      shell: bash
      run: |
        cat >> $GITHUB_STEP_SUMMARY << 'EOF'
        <details><summary>🔑 Apple Certificate Installation</summary>

        ## 🔧 Input Parameters
        | Parameter | Value |
        |-----------|-------|
        | 🔑 Keychain Name | `${{ inputs.keychain-name }}` |
        | 📱 Certificate Type | `${{ inputs.certificate-type }}` |
        | 🏢 Team ID | `${{ inputs.team-id || 'auto-detected' }}` |
        | 🔓 Codesign Access | `${{ inputs.allow-codesign-keychain-access }}` |
        | 🧹 Delete Keychain | `${{ inputs.delete-keychain }}` |

        ## 📤 Installation Results
        | Item | Value |
        |------|-------|
        | 🔑 Keychain Path | `${{ steps.install.outputs.keychain-path }}` |
        | 🔒 Certificate Name | `${{ steps.install.outputs.certificate-name }}` |
        | 🔍 Certificate SHA1 | `${{ steps.install.outputs.certificate-sha1 }}` |
        | 📱 Profile Name | `${{ steps.install.outputs.provisioning-profile-name || 'N/A' }}` |
        | 🆔 Profile UUID | `${{ steps.install.outputs.provisioning-profile-uuid || 'N/A' }}` |
        | 🏢 Team ID | `${{ steps.install.outputs.team-id || 'N/A' }}` |

        ## 🔧 Process Details
        | Step | Status |
        |------|--------|
        | ✅ Input Validation | `✅ Completed` |
        | 🍎 Certificate Installation | `${{ steps.install.outcome == 'success' && '✅ Completed' || '❌ Failed' }}` |
        | 🔍 Installation Verification | `${{ steps.verify.outcome == 'success' && '✅ Completed' || '❌ Failed' }}` |
        | 🧹 Keychain Cleanup | `${{ inputs.delete-keychain == 'true' && '✅ Completed' || '⏭️ Skipped' }}` |

        ## 🛡️ Security Notes
        - Temporary keychain created for secure certificate storage
        - Certificate password handled securely through GitHub Secrets
        - Keychain configured for codesign access if enabled
        - Automatic cleanup performed if requested

        </details>
        EOF

branding:
  icon: "shield"
  color: "blue"
