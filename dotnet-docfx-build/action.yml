name: '📚 Generate DocFX Documentation'
description: 'Generates documentation using DocFX .NET Global Tool'
author: 'Francois Raminosona'

inputs:
  config:
    description: 'Path to the docfx configuration file (default: docfx.json)'
    required: false
    default: 'docfx.json'
  output:
    description: 'Specify the output base directory'
    required: false
    default: '_site'
  log-level:
    description: 'Set log level to error, warning, info, verbose or diagnostic'
    required: false
    default: 'info'
  log-file:
    description: 'Save log as structured JSON to the specified file'
    required: false
    default: ''
  verbose:
    description: 'Set log level to verbose'
    required: false
    default: 'false'
  warnings-as-errors:
    description: 'Treats warnings as errors'
    required: false
    default: 'false'
  metadata:
    description: 'Global metadata in JSON format (e.g., {"_appTitle":"My App","_disableContribution":true})'
    required: false
    default: ''
  xref:
    description: 'Comma-separated URLs of xrefmap used by content files'
    required: false
    default: ''
  template:
    description: 'Specify the template name to apply'
    required: false
    default: ''
  theme:
    description: 'Specify which theme to use (default: default)'
    required: false
    default: 'default'
  debug:
    description: 'Run in debug mode'
    required: false
    default: 'false'
  debug-output:
    description: 'The output folder for files generated for debugging purpose'
    required: false
    default: ''
  export-raw-model:
    description: 'Export raw model to .raw.model.json extension'
    required: false
    default: 'false'
  raw-model-output-folder:
    description: 'Specify the output folder for the raw model'
    required: false
    default: ''
  export-view-model:
    description: 'Export view model to .view.model.json extension'
    required: false
    default: 'false'
  view-model-output-folder:
    description: 'Specify the output folder for the view model'
    required: false
    default: ''
  max-parallelism:
    description: 'Set the max parallelism (0 is auto)'
    required: false
    default: '0'
  markdown-engine-properties:
    description: 'Parameters for markdown engine in JSON format'
    required: false
    default: ''
  post-processors:
    description: 'Comma-separated order of post processors in plugins'
    required: false
    default: ''
  disable-git-features:
    description: 'Disable fetching Git related information for articles'
    required: false
    default: 'false'
  docfx-version:
    description: 'Version of DocFX tool to install'
    required: false
    default: ''
  show-summary:
    description: 'Whether to show the action summary'
    required: false
    default: 'false'

outputs:
  output-path:
    description: 'Full path to the generated documentation output directory'
    value: ${{ steps.build-args.outputs.output-path }}
  config-path:
    description: 'Path to the DocFX configuration file used'
    value: ${{ steps.build-args.outputs.config-path }}
  files-count:
    description: 'Number of files generated'
    value: ${{ steps.analyze.outputs.files-count }}
  output-size:
    description: 'Total size of the output directory in bytes'
    value: ${{ steps.analyze.outputs.output-size }}

runs:
  using: "composite"
  steps:
    - name: "✅ Validate inputs"
      shell: bash
      run: |
        echo "::group::🔍 DocFX Build Input Validation"
        echo "::debug::Validating DocFX build inputs for documentation generation"

        # Validate config file exists if specified and not default
        if [ "${{ inputs.config }}" != "docfx.json" ] && [ ! -f "${{ inputs.config }}" ]; then
          echo "::error file=${{ inputs.config }}::DocFX configuration file not found: ${{ inputs.config }}"
          exit 1
        fi

        # Validate log level
        if [ -n "${{ inputs.log-level }}" ]; then
          case "${{ inputs.log-level }}" in
            error|warning|info|verbose|diagnostic) ;;
            *) echo "::error::Invalid log level. Must be one of: error, warning, info, verbose, diagnostic"; exit 1 ;;
          esac
        fi

        # Validate max-parallelism is numeric
        if [ -n "${{ inputs.max-parallelism }}" ]; then
          if ! [[ "${{ inputs.max-parallelism }}" =~ ^[0-9]+$ ]]; then
            echo "::error::max-parallelism must be a number"
            exit 1
          fi
        fi

        # Validate boolean inputs
        for param in verbose warnings-as-errors debug export-raw-model export-view-model disable-git-features; do
          case $param in
            verbose) value="${{ inputs.verbose }}" ;;
            warnings-as-errors) value="${{ inputs.warnings-as-errors }}" ;;
            debug) value="${{ inputs.debug }}" ;;
            export-raw-model) value="${{ inputs.export-raw-model }}" ;;
            export-view-model) value="${{ inputs.export-view-model }}" ;;
            disable-git-features) value="${{ inputs.disable-git-features }}" ;;
          esac
          if [ -n "$value" ] && [ "$value" != "true" ] && [ "$value" != "false" ]; then
            echo "::error::Parameter $param must be 'true' or 'false', got: $value"
            exit 1
          fi
        done

        # Validate JSON inputs if provided
        if [ -n "${{ inputs.metadata }}" ]; then
          if ! echo '${{ inputs.metadata }}' | python3 -m json.tool >/dev/null 2>&1; then
            echo "::error::metadata must be valid JSON"
            exit 1
          fi
        fi

        if [ -n "${{ inputs.markdown-engine-properties }}" ]; then
          if ! echo '${{ inputs.markdown-engine-properties }}' | python3 -m json.tool >/dev/null 2>&1; then
            echo "::error::markdown-engine-properties must be valid JSON"
            exit 1
          fi
        fi

        echo "✅ Input validation completed successfully"
        echo "::endgroup::"

    - name: "📦 Install DocFX tool"
      uses: "./dotnet-tool-install"
      with:
        tool-name: 'docfx'
        tool-version: ${{ inputs.docfx-version }}

    - name: "🔧 Build arguments"
      id: build-args
      shell: bash
      run: |
        echo "::group::🔧 Building DocFX Arguments"
        echo "::debug::Building dotnet arguments for DocFX documentation generation"

        # Start with base arguments
        ARGS="run docfx"

        # Config file
        if [ -n "${{ inputs.config }}" ]; then
          ARGS="$ARGS '${{ inputs.config }}'"
        fi
        CONFIG_PATH=$(realpath "${{ inputs.config }}")
        echo "config-path=$CONFIG_PATH" >> $GITHUB_OUTPUT

        # Output directory
        if [ -n "${{ inputs.output }}" ]; then
          ARGS="$ARGS --output '${{ inputs.output }}'"
        fi
        echo "output-path=${{ inputs.output }}" >> $GITHUB_OUTPUT
        echo "::debug::Using output path: ${{ inputs.output }}"

        # Log level
        if [ -n "${{ inputs.log-level }}" ]; then
          ARGS="$ARGS --logLevel '${{ inputs.log-level }}'"
        fi

        # Log file
        if [ -n "${{ inputs.log-file }}" ]; then
          ARGS="$ARGS --log '${{ inputs.log-file }}'"
        fi

        # Boolean flags
        [ "${{ inputs.verbose }}" = "true" ] && ARGS="$ARGS --verbose"
        [ "${{ inputs.warnings-as-errors }}" = "true" ] && ARGS="$ARGS --warningsAsErrors"
        [ "${{ inputs.debug }}" = "true" ] && ARGS="$ARGS --debug"
        [ "${{ inputs.export-raw-model }}" = "true" ] && ARGS="$ARGS --exportRawModel"
        [ -n "${{ inputs.raw-model-output-folder }}" ] && ARGS="$ARGS --rawModelOutputFolder '${{ inputs.raw-model-output-folder }}'"
        [ "${{ inputs.export-view-model }}" = "true" ] && ARGS="$ARGS --exportViewModel"
        [ -n "${{ inputs.view-model-output-folder }}" ] && ARGS="$ARGS --viewModelOutputFolder '${{ inputs.view-model-output-folder }}'"
        [ "${{ inputs.disable-git-features }}" = "true" ] && ARGS="$ARGS --disableGitFeatures"

        # Metadata
        if [ -n "${{ inputs.metadata }}" ]; then
          ARGS="$ARGS --metadata '${{ inputs.metadata }}'"
        fi

        # Xref URLs
        if [ -n "${{ inputs.xref }}" ]; then
          IFS=',' read -ra XREF_URLS <<< "${{ inputs.xref }}"
          for url in "${XREF_URLS[@]}"; do
            ARGS="$ARGS --xref '$url'"
          done
        fi

        # Template
        if [ -n "${{ inputs.template }}" ]; then
          ARGS="$ARGS --template '${{ inputs.template }}'"
        fi

        # Theme
        if [ -n "${{ inputs.theme }}" ] && [ "${{ inputs.theme }}" != "default" ]; then
          ARGS="$ARGS --theme '${{ inputs.theme }}'"
        fi

        # Max parallelism
        if [ -n "${{ inputs.max-parallelism }}" ] && [ "${{ inputs.max-parallelism }}" != "0" ]; then
          ARGS="$ARGS --maxParallelism '${{ inputs.max-parallelism }}'"
        fi

        # Markdown engine properties
        if [ -n "${{ inputs.markdown-engine-properties }}" ]; then
          ARGS="$ARGS --markdownEngineProperties '${{ inputs.markdown-engine-properties }}'"
        fi

        # Post processors
        if [ -n "${{ inputs.post-processors }}" ]; then
          ARGS="$ARGS --postProcessors '${{ inputs.post-processors }}'"
        fi

        # Debug output folder
        if [ -n "${{ inputs.debug-output }}" ]; then
          ARGS="$ARGS --debugOutput '${{ inputs.debug-output }}'"
        fi

        # Raw model output folder
        if [ -n "${{ inputs.raw-model-output-folder }}" ]; then
          ARGS="$ARGS --rawModelOutputFolder '${{ inputs.raw-model-output-folder }}'"
        fi

        # View model output folder
        if [ -n "${{ inputs.view-model-output-folder }}" ]; then
          ARGS="$ARGS --viewModelOutputFolder '${{ inputs.view-model-output-folder }}'"
        fi

        echo "::debug::Generated arguments: $ARGS"
        echo "::endgroup::"

        # Output the arguments string
        echo "arguments=$ARGS" >> $GITHUB_OUTPUT

    - name: "📚 Generate documentation with DocFX"
      id: generate
      uses: ./dotnet
      with:
        command: "tool"
        arguments: ${{ steps.build-args.outputs.arguments }}

    - name: "📊 Analyze generated documentation"
      id: analyze
      shell: bash
      run: |
        echo "::group::📊 Analyzing Generated Documentation"
        echo "::debug::Analyzing generated documentation files and calculating metrics"

        OUTPUT_DIR="${{ steps.build-args.outputs.output-path }}"

        if [ -d "$OUTPUT_DIR" ]; then
          # Count files
          FILES_COUNT=$(find "$OUTPUT_DIR" -type f | wc -l | tr -d ' ')
          echo "✅ Files generated: $FILES_COUNT"
          echo "files-count=$FILES_COUNT" >> $GITHUB_OUTPUT

          # Calculate total size
          if command -v du >/dev/null 2>&1; then
            if du -sb "$OUTPUT_DIR" >/dev/null 2>&1; then
              # GNU du
              OUTPUT_SIZE=$(du -sb "$OUTPUT_DIR" | cut -f1)
            else
              # BSD du (macOS)
              OUTPUT_SIZE=$(du -sk "$OUTPUT_DIR" | cut -f1)
              OUTPUT_SIZE=$((OUTPUT_SIZE * 1024))
            fi
          else
            OUTPUT_SIZE="unknown"
          fi

          echo "::debug::Total output size: $OUTPUT_SIZE bytes"
          echo "output-size=$OUTPUT_SIZE" >> $GITHUB_OUTPUT

          # List main files
          echo "::debug::Main generated files:"
          find "$OUTPUT_DIR" -maxdepth 2 -name "*.html" -o -name "*.json" -o -name "*.xml" | head -10 | while read -r file; do
            echo "::debug::  📄 $file"
          done
          echo "::endgroup::"

        else
          echo "::error::Output directory not found: $OUTPUT_DIR"
          echo "files-count=0" >> $GITHUB_OUTPUT
          echo "output-size=0" >> $GITHUB_OUTPUT
          echo "::endgroup::"
        fi

    - name: "📊 Action Summary"
      if: always() && inputs.show-summary == 'true'
      shell: bash
      run: |
        cat >> $GITHUB_STEP_SUMMARY << 'EOF'
        <details><summary>Expand for details - 📊 DocFX Documentation Generation Summary</summary>

        ## 🔧 Input Parameters
        | Parameter | Value |
        |-----------|-------|
        | 📋 Config File | `${{ inputs.config }}` |
        | 📁 Output Directory | `${{ inputs.output }}` |
        | 📊 Log Level | `${{ inputs.log-level }}` |
        | 🎨 Theme | `${{ inputs.theme }}` |
        | 📋 Template | `${{ inputs.template || 'default' }}` |

        ## 📤 Generation Results
        | Metric | Value |
        |--------|-------|
        | 📁 Output Path | `${{ steps.build-args.outputs.output-path }}` |
        | 📋 Config Path | `${{ steps.build-args.outputs.config-path }}` |
        | 📄 Files Generated | `${{ steps.analyze.outputs.files-count }}` |
        | 📏 Total Size | `${{ steps.analyze.outputs.output-size }} bytes` |

        ## ⚙️ Configuration Options
        | Option | Status |
        |--------|--------|
        | 🔍 Verbose Logging | `${{ inputs.verbose }}` |
        | ⚠️ Warnings as Errors | `${{ inputs.warnings-as-errors }}` |
        | 🐛 Debug Mode | `${{ inputs.debug }}` |
        | 📤 Export Raw Model | `${{ inputs.export-raw-model }}` |
        | 📤 Export View Model | `${{ inputs.export-view-model }}` |
        | 🚫 Disable Git Features | `${{ inputs.disable-git-features }}` |

        ## 🔧 Process Details
        | Step | Status |
        |------|--------|
        | ✅ Input Validation | `✅ Completed` |
        | 📦 Tool Installation | `✅ Completed` |
        | 📚 Documentation Generation | `${{ steps.generate.outcome == 'success' && '✅ Completed' || '❌ Failed' }}` |
        | 📊 Output Analysis | `${{ steps.analyze.outcome == 'success' && '✅ Completed' || '❌ Failed' }}` |

        </details>
        EOF

branding:
  icon: 'book-open'
  color: 'blue'
