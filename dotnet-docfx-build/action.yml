name: "📚 Generate DocFX Documentation"
description: "Generates documentation using DocFX .NET Global Tool"
author: "Francois Raminosona"

inputs:
  # Arguments passed to dotnet
  working-directory:
    description: "Working directory for the command"
    required: false
    default: "."
  global:
    description: "Install the DocFX .NET global tool if not already installed"
    required: false
    default: "false"
  show-summary:
    description: "Whether to show the action summary"
    required: false
    default: "false"

  # Arguments unique to DocFX
  config:
    description: "Path to the docfx configuration file (default: docfx.json)"
    required: false
    default: "docfx.json"
  output:
    description: "Specify the output base directory"
    required: false
    default: "_site"
  logLevel:
    description: "Set log level to error, warning, info, verbose or diagnostic"
    required: false
    default: "info"
  verbose:
    description: "Set log level to verbose"
    required: false
    default: "false"
  warningsAsErrors:
    description: "Treats warnings as errors"
    required: false
    default: "false"
  metadata:
    description: "Global metadata in JSON format (e.g., {'_appTitle':'My App','_disableContribution':true})"
    required: false
    default: ""
  xref:
    description: "Comma-separated URLs of xrefmap used by content files"
    required: false
    default: ""
  template:
    description: "Specify the template name to apply"
    required: false
    default: ""
  theme:
    description: "Specify which theme to use (default: default)"
    required: false
    default: "default"
  debug:
    description: "Run in debug mode"
    required: false
    default: "false"
  debugOutput:
    description: "The output folder for files generated for debugging purpose"
    required: false
    default: ""
  exportRawModel:
    description: "Export raw model to .raw.model.json extension"
    required: false
    default: "false"
  rawModelOutputFolder:
    description: "Specify the output folder for the raw model"
    required: false
    default: ""
  exportViewModel:
    description: "Export view model to .view.model.json extension"
    required: false
    default: "false"
  viewModelOutputFolder:
    description: "Specify the output folder for the view model"
    required: false
    default: ""
  maxParallelism:
    description: "Set the max parallelism (0 is auto)"
    required: false
    default: "0"
  markdownEngineProperties:
    description: "Parameters for markdown engine in JSON format"
    required: false
    default: ""
  postProcessors:
    description: "Comma-separated order of post processors in plugins"
    required: false
    default: ""
  disableGitFeatures:
    description: "Disable fetching Git related information for articles"
    required: false
    default: "false"
  log:
    description: "Save log as structured JSON to the specified file"
    required: false
    default: ""
  dryRun:
    description: "Template will not be actually applied to the documents"
    required: false
    default: "false"
  docfx-version:
    description: "Version of DocFX tool to install"
    required: false
    default: ""

outputs:
  exit-code:
    description: "Exit code of the dotnet command"
    value: ${{ steps.run-dotnet.outputs.exit-code }}
  executed-command:
    description: "The actual command that was executed"
    value: ${{ steps.run-dotnet.outputs.executed-command }}

runs:
  using: "composite"
  steps:

    - name: "✅ Validate input : booleans"
      shell: bash
      run: |
        echo "::debug::Validating boolean inputs for DocFX documentation generation"

        for param in verbose warningsAsErrors debug exportRawModel exportViewModel disableGitFeatures dryRun show-summary; do
          case $param in
            verbose) value="${{ inputs.verbose }}" ;;
            warningsAsErrors) value="${{ inputs.warningsAsErrors }}" ;;
            debug) value="${{ inputs.debug }}" ;;
            exportRawModel) value="${{ inputs.exportRawModel }}" ;;
            exportViewModel) value="${{ inputs.exportViewModel }}" ;;
            disableGitFeatures) value="${{ inputs.disableGitFeatures }}" ;;
            dryRun) value="${{ inputs.dryRun }}" ;;
            show-summary) value="${{ inputs.show-summary }}" ;;
          esac
          if [ -n "$value" ] && [ "$value" != "true" ] && [ "$value" != "false" ]; then
            echo "::error::Parameter $param must be 'true' or 'false', got: $value"
            exit 1
          fi
        done

        echo "✅ Boolean input validation completed successfully"

    - name: "✅ Validate input : config"
      if: ${{ inputs.config != '' }}
      shell: bash
      run: |
        echo "::debug::Validating config input for DocFX documentation generation"

        if [ ! -f "${{ inputs.config }}" ]; then
          echo "::error file=${{ inputs.config }}::DocFX configuration file not found: ${{ inputs.config }}"
          exit 1
        fi

        echo "✅ Config input validation completed successfully"

    - name: "✅ Validate input : logLevel"
      if: ${{ inputs.logLevel != '' && inputs.logLevel != 'info' }}
      shell: bash
      run: |
        echo "::debug::Validating logLevel input for DocFX documentation generation"

        case "${{ inputs.logLevel }}" in
          error|warning|info|verbose|diagnostic) ;;
          *) echo "::error::Invalid logLevel. Must be one of: error, warning, info, verbose, diagnostic"; exit 1 ;;
        esac

        echo "✅ Log-level input validation completed successfully"

    - name: "✅ Validate input : metadata"
      if: ${{ inputs.metadata != '' }}
      shell: bash
      run: |
        echo "::debug::Validating metadata input for DocFX documentation generation"

        if ! echo "${{ inputs.metadata }}" | jq empty >/dev/null 2>&1; then
          echo "::error::Metadata must be a valid JSON string, got: ${{ inputs.metadata }}"
          exit 1
        fi

        echo "✅ Metadata input validation completed successfully"

    - name: "✅ Validate input : maxParallelism"
      if: ${{ inputs.maxParallelism != '' && inputs.maxParallelism != '0' }}
      shell: bash
      run: |
        echo "::debug::Validating maxParallelism input for DocFX documentation generation"

        if ! [[ "${{ inputs.maxParallelism }}" =~ ^[0-9]+$ ]]; then
          echo "::error::maxParallelism must be a non-negative integer, got: ${{ inputs.maxParallelism }}"
          exit 1
        fi

        echo "✅ Max-parallelism input validation completed successfully"

    - name: "✅ Validate input : postProcessors"
      if: ${{ inputs.postProcessors != '' }}
      shell: bash
      run: |
        echo "::debug::Validating postProcessors input for DocFX documentation generation"

        IFS=',' read -ra PROCESSORS <<< "${{ inputs.postProcessors }}"
        for processor in "${PROCESSORS[@]}"; do
          if [[ -z "$processor" ]]; then
            echo "::error::Post-processors must be a comma-separated list of non-empty values, got: ${{ inputs.postProcessors }}"
            exit 1
          fi
        done

        echo "✅ Post-processors input validation completed successfully"

    - name: "✅ Validate input : docfx-version"
      if: ${{ inputs.docfx-version != '' }}
      shell: bash
      run: |
        echo "::debug::Validating docfx-version input for DocFX documentation generation"

        if ! [[ "${{ inputs.docfx-version }}" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
          echo "::warning::Version format may be invalid. Expected format: X.Y.Z, got: ${{ inputs.docfx-version }}"
        fi

        echo "✅ docfx-version input validation completed successfully"

    - name: "✅ Validate input : markdownEngineProperties"
      if: ${{ inputs.markdownEngineProperties != '' }}
      shell: bash
      run: |
        echo "::debug::Validating markdownEngineProperties input for DocFX documentation generation"

        if ! echo "${{ inputs.markdownEngineProperties }}" | jq empty >/dev/null 2>&1; then
          echo "::error::markdownEngineProperties must be a valid JSON string, got: ${{ inputs.markdownEngineProperties }}"
          exit 1
        fi

        echo "✅ markdownEngineProperties input validation completed successfully"

    - name: "✅ Validate input : xref"
      if: ${{ inputs.xref != '' }}
      shell: bash
      run: |
        echo "::debug::Validating xref input for DocFX documentation generation"

        IFS=',' read -ra XREF_URLS <<< "${{ inputs.xref }}"
        for url in "${XREF_URLS[@]}"; do
          if ! [[ "$url" =~ ^https?:// ]]; then
            echo "::error::Each xref URL must start with http:// or https://, got: $url"
            exit 1
          fi
        done

        echo "✅ Xref input validation completed successfully"

    - name: "📦 Install DocFX tool"
      uses: "framinosona/github_actions/dotnet-tool-install@main"
      with:
        tool-name: "docfx"
        global: ${{ inputs.global }}
        create-manifest-if-needed: "true"
        version: ${{ inputs.docfx-version }}

    - name: "🔧 Build arguments"
      id: build-args
      shell: bash
      run: |
        echo "::debug::Building arguments for DocFX documentation generation"

        # Start with base command
        ARGS="run docfx build"

        # Add config file path
        if [ -n "${{ inputs.config }}" ]; then
          ARGS="$ARGS '${{ inputs.config }}'"
        fi

        # Boolean flags
        for param in verbose warningsAsErrors debug exportRawModel exportViewModel disableGitFeatures dryRun; do
          case $param in
            verbose) value="${{ inputs.verbose }}" ;;
            warningsAsErrors) value="${{ inputs.warningsAsErrors }}" ;;
            debug) value="${{ inputs.debug }}" ;;
            exportRawModel) value="${{ inputs.exportRawModel }}" ;;
            exportViewModel) value="${{ inputs.exportViewModel }}" ;;
            disableGitFeatures) value="${{ inputs.disableGitFeatures }}" ;;
            dryRun) value="${{ inputs.dryRun }}" ;;
          esac
          if [ "$value" = "true" ]; then
            ARGS="$ARGS --${param}"
          fi
        done

        # Key-value options (only add if not default values)
        for param in output template debugOutput rawModelOutputFolder viewModelOutputFolder markdownEngineProperties postProcessors log; do
          case $param in
            output) value="${{ inputs.output }}" ;;
            template) value="${{ inputs.template }}" ;;
            debugOutput) value="${{ inputs.debugOutput }}" ;;
            rawModelOutputFolder) value="${{ inputs.rawModelOutputFolder }}" ;;
            viewModelOutputFolder) value="${{ inputs.viewModelOutputFolder }}" ;;
            markdownEngineProperties) value="${{ inputs.markdownEngineProperties }}" ;;
            postProcessors) value="${{ inputs.postProcessors }}" ;;
            log) value="${{ inputs.log }}" ;;
          esac
          if [ -n "$value" ]; then
            ARGS="$ARGS --$param '$value'"
          fi
        done

        # Handle parameters with meaningful defaults
        if [ "${{ inputs.logLevel }}" != "info" ]; then
          ARGS="$ARGS --logLevel '${{ inputs.logLevel }}'"
        fi

        if [ "${{ inputs.theme }}" != "default" ]; then
          ARGS="$ARGS --theme '${{ inputs.theme }}'"
        fi

        if [ "${{ inputs.maxParallelism }}" != "0" ]; then
          ARGS="$ARGS --maxParallelism '${{ inputs.maxParallelism }}'"
        fi

        # Special handling for metadata (JSON conversion)
        if [ -n "${{ inputs.metadata }}" ]; then
          # Convert JSON object to key-value pairs for --metadata flags
          while IFS= read -r metadata_arg; do
            ARGS="$ARGS $metadata_arg"
          done < <(echo "${{ inputs.metadata }}" | jq -r 'to_entries[] | "--metadata " + .key + "=\"" + (.value | tostring) + "\""')
        fi

        # Special handling for xref (comma-separated URLs)
        if [ -n "${{ inputs.xref }}" ]; then
          IFS=',' read -ra XREF_URLS <<< "${{ inputs.xref }}"
          for url in "${XREF_URLS[@]}"; do
            ARGS="$ARGS --xref '$url'"
          done
        fi

        echo "::debug::Generated arguments: $ARGS"
        echo "arguments=$ARGS" >> $GITHUB_OUTPUT
        echo "✅ Arguments built successfully"

    - name: "📚 Generate documentation with DocFX"
      id: run-dotnet
      uses: "framinosona/github_actions/dotnet@main"
      with:
        command: "tool"
        working-directory: ${{ inputs.working-directory }}
        arguments: ${{ steps.build-args.outputs.arguments }}
        show-summary: "${{ inputs.show-summary }}"

    - name: "📊 Action Summary"
      if: always() && inputs.show-summary == 'true'
      shell: bash
      run: |
        cat >> $GITHUB_STEP_SUMMARY << 'EOF'
        <details><summary>📄 DocFX Build</summary>

        ## 🔧 DocFX Configuration
        | Parameter | Value |
        |-----------|-------|
        | 📄 Config File | `${{ inputs.config }}` |
        | 📁 Output Directory | `${{ inputs.output }}` |
        | 📊 Log Level | `${{ inputs.logLevel }}` |
        | 🎨 Template | `${{ inputs.template || 'none' }}` |
        | 🎭 Theme | `${{ inputs.theme }}` |
        | 🔧 Max Parallelism | `${{ inputs.maxParallelism }}` |
        | 🐛 Debug Mode | `${{ inputs.debug }}` |
        | 🧪 Dry Run | `${{ inputs.dryRun }}` |
        | ⚠️ Warnings as Errors | `${{ inputs.warningsAsErrors }}` |
        | 📝 Verbose Logging | `${{ inputs.verbose }}` |

        ## 📊 Export Settings
        | Setting | Value |
        |---------|-------|
        | 🔍 Export Raw Model | `${{ inputs.exportRawModel }}` |
        | 📄 Export View Model | `${{ inputs.exportViewModel }}` |
        | 🚫 Disable Git Features | `${{ inputs.disableGitFeatures }}` |

        ## ⚙️ Process Details
        | Step | Status |
        |------|--------|
        | ✅ Input Validation | `✅ Completed` |
        | 📦 Tool Installation | `✅ Completed` |
        | 🔧 Argument Building | `${{ steps.build-args.outcome == 'success' && '✅ Completed' || '❌ Failed' }}` |
        | 📚 Documentation Generation | `${{ steps.run-dotnet.outcome == 'success' && '✅ Completed' || '❌ Failed' }}` |

        ## 📤 Execution Results
        | Metric | Value |
        |--------|-------|
        | ✅ Exit Code | `${{ steps.run-dotnet.outputs.exit-code }}` |
        | 🚀 Executed Command | `${{ steps.run-dotnet.outputs.executed-command }}` |

        </details>
        EOF

branding:
  icon: "book-open"
  color: "blue"

# dotnet docfx build --help
# USAGE:
#     docfx build [config] [OPTIONS]

# ARGUMENTS:
#     [config]    Path to docfx.json

# OPTIONS:
#     -h, --help                         Prints help information
#     -l, --log                          Save log as structured JSON to the specified file
#         --logLevel                     Set log level to error, warning, info, verbose or diagnostic
#         --verbose                      Set log level to verbose
#         --warningsAsErrors             Treats warnings as errors
#     -o, --output                       Specify the output base directory
#     -m, --metadata                     Specify a list of global metadata in key value pairs (e.g. --metadata _appTitle="My App" --metadata _disableContribution)
#     -x, --xref                         Specify the urls of xrefmap used by content files
#     -t, --template                     Specify the template name to apply to. If not specified, output YAML file will not be transformed
#         --theme                        Specify which theme to use. By default 'default' theme is offered
#     -s, --serve                        Host the generated documentation to a website
#     -n, --hostname                     Specify the hostname of the hosted website (e.g., 'localhost' or '*')
#     -p, --port                         Specify the port of the hosted website
#         --open-browser                 Open a web browser when the hosted website starts
#         --open-file <RELATIVE_PATH>    Open a file in a web browser when the hosted website starts
#         --debug                        Run in debug mode. With debug mode, raw model and view model will be exported automatically when it encounters error when applying templates. If not specified, it is false
#         --debugOutput                  The output folder for files generated for debugging purpose when in debug mode. If not specified, it is ${TempPath}/docfx
#         --exportRawModel               If set to true, data model to run template script will be extracted in .raw.model.json extension
#         --rawModelOutputFolder         Specify the output folder for the raw model. If not set, the raw model will be generated to the same folder as the output documentation
#         --viewModelOutputFolder        Specify the output folder for the view model. If not set, the view model will be generated to the same folder as the output documentation
#         --exportViewModel              If set to true, data model to apply template will be extracted in .view.model.json extension
#         --dryRun                       If set to true, template will not be actually applied to the documents. This option is always used with --exportRawModel or --exportViewModel is set so that only raw model files or view model files are generated
#         --maxParallelism               Set the max parallelism, 0 is auto
#         --markdownEngineProperties     Set the parameters for markdown engine, value should be a JSON string
#         --postProcessors               Set the order of post processors in plugins
#         --disableGitFeatures           Disable fetching Git related information for articles. By default it is enabled and may have side effect on performance when the repo is large
