name: 'üß™ Test Normalize Arguments Action'

on:
  push:
    paths:
      - 'normalize-arguments/**'
      - '.github/workflows/test-normalize-arguments.yml'
  pull_request:
    paths:
      - 'normalize-arguments/**'
      - '.github/workflows/test-normalize-arguments.yml'
  workflow_dispatch:
    inputs:
      show-summary:
        description: 'Show detailed action summaries'
        required: false
        default: true
        type: boolean
      test-platform:
        description: 'Platform to test (all, linux, windows, macos)'
        required: false
        default: 'all'
        type: choice
        options:
          - all
          - linux
          - windows
          - macos

env:
  SHOW_SUMMARY: ${{ github.event.inputs.show-summary || 'true' }}

permissions:
  contents: read

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test-strategy:
    name: 'üéØ Determine Test Strategy'
    runs-on: ubuntu-latest
    outputs:
      test-linux: ${{ steps.strategy.outputs.test-linux }}
      test-windows: ${{ steps.strategy.outputs.test-windows }}
      test-macos: ${{ steps.strategy.outputs.test-macos }}
    steps:
      - name: 'üéØ Set Test Strategy'
        id: strategy
        shell: bash
        run: |
          TEST_PLATFORM="${{ github.event.inputs.test-platform || 'all' }}"

          case "$TEST_PLATFORM" in
            "all")
              echo "test-linux=true" >> $GITHUB_OUTPUT
              echo "test-windows=true" >> $GITHUB_OUTPUT
              echo "test-macos=true" >> $GITHUB_OUTPUT
              ;;
            "linux")
              echo "test-linux=true" >> $GITHUB_OUTPUT
              echo "test-windows=false" >> $GITHUB_OUTPUT
              echo "test-macos=false" >> $GITHUB_OUTPUT
              ;;
            "windows")
              echo "test-linux=false" >> $GITHUB_OUTPUT
              echo "test-windows=true" >> $GITHUB_OUTPUT
              echo "test-macos=false" >> $GITHUB_OUTPUT
              ;;
            "macos")
              echo "test-linux=false" >> $GITHUB_OUTPUT
              echo "test-windows=false" >> $GITHUB_OUTPUT
              echo "test-macos=true" >> $GITHUB_OUTPUT
              ;;
          esac

          echo "::notice::Testing strategy: $TEST_PLATFORM"

  test-linux:
    name: 'üêß Test on Linux'
    if: needs.test-strategy.outputs.test-linux == 'true'
    needs: [test-strategy]
    runs-on: ubuntu-latest
    steps:
      - name: 'üì• Checkout Repository'
        uses: actions/checkout@v5

      - name: 'üß™ Test Single-line Arguments'
        id: test-single-line
        uses: ./normalize-arguments
        with:
          arguments: '--verbose --configuration Release --no-restore'
          separator: ' '
          show-summary: ${{ env.SHOW_SUMMARY }}

      - name: '‚úÖ Verify Single-line Results'
        shell: bash
        run: |
          echo "::group::üîç Single-line Test Results"
          EXPECTED="--verbose --configuration Release --no-restore"
          ACTUAL="${{ steps.test-single-line.outputs.normalized-arguments }}"

          echo "Expected: $EXPECTED"
          echo "Actual: $ACTUAL"

          if [ "$ACTUAL" != "$EXPECTED" ]; then
            echo "::error::Single-line test failed. Expected '$EXPECTED', got '$ACTUAL'"
            exit 1
          fi

          echo "::notice::‚úÖ Single-line test passed successfully"
          echo "::endgroup::"

      - name: 'üß™ Test Multi-line Arguments (Literal Block Scalar |)'
        id: test-multiline-windows
        uses: ./normalize-arguments
        with:
          arguments: |
            --env
            "NODE_ENV=production"
            --env
            "PORT=3000"
            --volume
            "data:/app/data"
          separator: ' '
          show-summary: ${{ env.SHOW_SUMMARY }}

      - name: '‚úÖ Verify Multi-line Results'
        shell: bash
        run: |
          echo "::group::üîç Multi-line Test Results"
          EXPECTED='--env "NODE_ENV=production" --env "PORT=3000" --volume "data:/app/data"'
          ACTUAL="${{ steps.test-multiline-windows.outputs.normalized-arguments }}"

          echo "Expected: $EXPECTED"
          echo "Actual: $ACTUAL"

          if [ "$ACTUAL" != "$EXPECTED" ]; then
            echo "::error::Multi-line test failed. Expected '$EXPECTED', got '$ACTUAL'"
            exit 1
          fi

          echo "::notice::‚úÖ Multi-line test passed successfully"
          echo "::endgroup::"

      - name: 'üß™ Test Folded Arguments (Folded Block Scalar >)'
        id: test-folded-windows
        uses: ./normalize-arguments
        with:
          arguments: >
            --param "value with spaces"
            --flag
            --option "another value"
            --count 42
          separator: ' '
          show-summary: ${{ env.SHOW_SUMMARY }}

      - name: '‚úÖ Verify Folded Results'
        shell: bash
        run: |
          echo "::group::üîç Folded Test Results"
          EXPECTED='--param "value with spaces" --flag --option "another value" --count 42'
          ACTUAL="${{ steps.test-folded-windows.outputs.normalized-arguments }}"

          echo "Expected: $EXPECTED"
          echo "Actual: $ACTUAL"

          if [ "$ACTUAL" != "$EXPECTED" ]; then
            echo "::error::Folded test failed. Expected '$EXPECTED', got '$ACTUAL'"
            exit 1
          fi

          echo "::notice::‚úÖ Folded test passed successfully"
          echo "::endgroup::"

      - name: 'üß™ Test Custom Separator'
        id: test-separator
        uses: ./normalize-arguments
        with:
          arguments: |
            arg1
            arg2
            arg3
          separator: ','
          show-summary: ${{ env.SHOW_SUMMARY }}

      - name: '‚úÖ Verify Separator Results'
        shell: bash
        run: |
          echo "::group::üîç Separator Test Results"
          EXPECTED="arg1,arg2,arg3"
          ACTUAL="${{ steps.test-separator.outputs.normalized-arguments }}"

          echo "Expected: $EXPECTED"
          echo "Actual: $ACTUAL"

          if [ "$ACTUAL" != "$EXPECTED" ]; then
            echo "::error::Separator test failed. Expected '$EXPECTED', got '$ACTUAL'"
            exit 1
          fi

          echo "::notice::‚úÖ Separator test passed successfully"
          echo "::endgroup::"

      - name: 'üß™ Test Empty Arguments'
        id: test-empty
        uses: ./normalize-arguments
        with:
          arguments: |



          separator: ' '
          show-summary: ${{ env.SHOW_SUMMARY }}

      - name: '‚úÖ Verify Empty Results'
        shell: bash
        run: |
          echo "::group::üîç Empty Test Results"
          ACTUAL="${{ steps.test-empty.outputs.normalized-arguments }}"

          echo "Actual: '$ACTUAL'"

          if [ -n "$ACTUAL" ]; then
            echo "::error::Empty test failed. Expected empty string, got '$ACTUAL'"
            exit 1
          fi

          echo "::notice::‚úÖ Empty test passed successfully"
          echo "::endgroup::"

      - name: 'üß™ Test Null/Missing Arguments'
        id: test-null
        uses: ./normalize-arguments
        with:
          separator: ' '
          show-summary: ${{ env.SHOW_SUMMARY }}

      - name: '‚úÖ Verify Null Results'
        shell: bash
        run: |
          echo "::group::üîç Null Arguments Test Results"
          ACTUAL="${{ steps.test-null.outputs.normalized-arguments }}"

          echo "Actual: '$ACTUAL'"

          if [ -n "$ACTUAL" ]; then
            echo "::error::Null test failed. Expected empty string, got '$ACTUAL'"
            exit 1
          fi

          echo "::notice::‚úÖ Null test passed successfully"
          echo "::endgroup::"

  test-windows:
    name: 'ü™ü Test on Windows'
    if: needs.test-strategy.outputs.test-windows == 'true'
    needs: [test-strategy]
    runs-on: windows-latest
    steps:
      - name: 'üì• Checkout Repository'
        uses: actions/checkout@v5

      - name: 'üß™ Test Multi-line Arguments (Literal Block Scalar |)'
        id: test-multiline
        uses: ./normalize-arguments
        with:
          arguments: |
            --verbose
            --configuration
            Release
            --no-restore
            --framework
            net8.0
          separator: ' '
          show-summary: ${{ env.SHOW_SUMMARY }}

      - name: '‚úÖ Verify Multi-line Results'
        shell: bash
        run: |
          echo "::group::üîç Multi-line Test Results"
          EXPECTED="--verbose --configuration Release --no-restore --framework net8.0"
          ACTUAL="${{ steps.test-multiline.outputs.normalized-arguments }}"

          echo "Expected: $EXPECTED"
          echo "Actual: $ACTUAL"

          if [ "$ACTUAL" != "$EXPECTED" ]; then
            echo "::error::Multi-line test failed. Expected '$EXPECTED', got '$ACTUAL'"
            exit 1
          fi

          echo "::notice::‚úÖ Multi-line test passed successfully"
          echo "::endgroup::"

      - name: 'üß™ Test Folded Arguments (Folded Block Scalar >)'
        id: test-folded
        uses: ./normalize-arguments
        with:
          arguments: >
            --build-arg "VERSION=1.0.0"
            --build-arg "BUILD_DATE=2024-01-01"
            --tag "my-app:latest"
            --no-cache
          separator: ' '
          show-summary: ${{ env.SHOW_SUMMARY }}

      - name: '‚úÖ Verify Folded Results'
        shell: bash
        run: |
          echo "::group::üîç Folded Test Results"
          EXPECTED='--build-arg "VERSION=1.0.0" --build-arg "BUILD_DATE=2024-01-01" --tag "my-app:latest" --no-cache'
          ACTUAL="${{ steps.test-folded.outputs.normalized-arguments }}"

          echo "Expected: $EXPECTED"
          echo "Actual: $ACTUAL"

          if [ "$ACTUAL" != "$EXPECTED" ]; then
            echo "::error::Folded test failed. Expected '$EXPECTED', got '$ACTUAL'"
            exit 1
          fi

          echo "::notice::‚úÖ Folded test passed successfully"
          echo "::endgroup::"

      - name: 'üß™ Test Single-line Arguments with Spaces'
        id: test-single-spaces
        uses: ./normalize-arguments
        with:
          arguments: '--name "My Project" --description "A test application" --version "1.0.0-beta"'
          separator: ' '
          show-summary: ${{ env.SHOW_SUMMARY }}

      - name: '‚úÖ Verify Single-line with Spaces Results'
        shell: bash
        run: |
          echo "::group::üîç Single-line with Spaces Test Results"
          EXPECTED='--name "My Project" --description "A test application" --version "1.0.0-beta"'
          ACTUAL="${{ steps.test-single-spaces.outputs.normalized-arguments }}"

          echo "Expected: $EXPECTED"
          echo "Actual: $ACTUAL"

          if [ "$ACTUAL" != "$EXPECTED" ]; then
            echo "::error::Single-line with spaces test failed. Expected '$EXPECTED', got '$ACTUAL'"
            exit 1
          fi

          echo "::notice::‚úÖ Single-line with spaces test passed successfully"
          echo "::endgroup::"

  test-macos:
    name: 'üçé Test on macOS'
    if: needs.test-strategy.outputs.test-macos == 'true'
    needs: [test-strategy]
    runs-on: macos-latest
    steps:
      - name: 'üì• Checkout Repository'
        uses: actions/checkout@v5

      - name: 'üß™ Test Multi-line Arguments (Literal Block Scalar |)'
        id: test-multiline-macos
        uses: ./normalize-arguments
        with:
          arguments: |
            --docker-option
            "publish=8080:8080"
            --docker-option
            "name=my-container"
            --mount
            "type=bind,source=/data,target=/app/data"
          separator: ' '
          show-summary: ${{ env.SHOW_SUMMARY }}

      - name: '‚úÖ Verify Multi-line Results'
        shell: bash
        run: |
          echo "::group::üîç Multi-line Test Results"
          EXPECTED='--docker-option "publish=8080:8080" --docker-option "name=my-container" --mount "type=bind,source=/data,target=/app/data"'
          ACTUAL="${{ steps.test-multiline-macos.outputs.normalized-arguments }}"

          echo "Expected: $EXPECTED"
          echo "Actual: $ACTUAL"

          if [ "$ACTUAL" != "$EXPECTED" ]; then
            echo "::error::Multi-line test failed. Expected '$EXPECTED', got '$ACTUAL'"
            exit 1
          fi

          echo "::notice::‚úÖ Multi-line test passed successfully"
          echo "::endgroup::"

      - name: 'üß™ Test Folded Arguments (Folded Block Scalar >)'
        id: test-folded-macos
        uses: ./normalize-arguments
        with:
          arguments: >
            --label "version=1.0"
            --label "environment=prod"
            --restart always
            --detach
          separator: ' '
          show-summary: ${{ env.SHOW_SUMMARY }}

      - name: '‚úÖ Verify Folded Results'
        shell: bash
        run: |
          echo "::group::üîç Folded Test Results"
          EXPECTED='--label "version=1.0" --label "environment=prod" --restart always --detach'
          ACTUAL="${{ steps.test-folded-macos.outputs.normalized-arguments }}"

          echo "Expected: $EXPECTED"
          echo "Actual: $ACTUAL"

          if [ "$ACTUAL" != "$EXPECTED" ]; then
            echo "::error::Folded test failed. Expected '$EXPECTED', got '$ACTUAL'"
            exit 1
          fi

          echo "::notice::‚úÖ Folded test passed successfully"
          echo "::endgroup::"

  test-integration:
    name: 'üîó Integration Tests'
    needs: [test-strategy, test-linux]
    if: always() && needs.test-strategy.outputs.test-linux == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: 'üì• Checkout Repository'
        uses: actions/checkout@v5

      - name: 'üß™ Test with Simple Command Arguments'
        id: test-simple-command
        uses: ./normalize-arguments
        with:
          arguments: |
            build
            --configuration
            Release
            --no-restore
            --verbosity
            minimal
          separator: ' '
          show-summary: ${{ env.SHOW_SUMMARY }}

      - name: 'üîß Execute Simple Command (dry run)'
        shell: bash
        run: |
          echo "::group::üöÄ Integration Test - Simple Command"
          COMMAND_ARGS="${{ steps.test-simple-command.outputs.normalized-arguments }}"
          echo "Generated arguments: $COMMAND_ARGS"
          echo "Would execute: dotnet $COMMAND_ARGS"

          # Verify the command structure is valid
          if [[ "$COMMAND_ARGS" =~ ^build[[:space:]]--configuration[[:space:]]Release[[:space:]]--no-restore[[:space:]]--verbosity[[:space:]]minimal$ ]]; then
            echo "::notice::‚úÖ Integration test passed - Command structure is valid"
          else
            echo "::error::Integration test failed - Invalid command structure"
            exit 1
          fi
          echo "::endgroup::"

      - name: 'üß™ Test with Complex Quoted Arguments'
        id: test-complex-quoted
        uses: ./normalize-arguments
        with:
          arguments: |
            --configuration Release
            --define "VERSION=1.2.3"
            --define "BRANCH_NAME=feature/new-feature"
            --property "AssemblyTitle=My Application"
            --verbosity normal
          separator: ' '
          show-summary: ${{ env.SHOW_SUMMARY }}

      - name: 'üîß Execute Complex Quoted Command (dry run)'
        shell: bash
        run: |
          echo "::group::üöÄ Integration Test - Complex Quoted Arguments"
          BUILD_ARGS="${{ steps.test-complex-quoted.outputs.normalized-arguments }}"
          echo "Generated arguments: $BUILD_ARGS"
          echo "Would execute: dotnet build $BUILD_ARGS"

          # Verify all expected arguments are present
          if [[ "$BUILD_ARGS" == *"--configuration Release"* ]] && \
             [[ "$BUILD_ARGS" == *'--define "VERSION=1.2.3"'* ]] && \
             [[ "$BUILD_ARGS" == *'--define "BRANCH_NAME=feature/new-feature"'* ]] && \
             [[ "$BUILD_ARGS" == *'--property "AssemblyTitle=My Application"'* ]] && \
             [[ "$BUILD_ARGS" == *"--verbosity normal"* ]]; then
            echo "::notice::‚úÖ Complex integration test passed - All expected arguments present"
          else
            echo "::error::Complex integration test failed - Missing expected arguments"
            echo "::error::Got: $BUILD_ARGS"
            exit 1
          fi
          echo "::endgroup::"

  test-summary:
    name: 'üìã Test Summary'
    if: always()
    needs: [test-strategy, test-linux, test-windows, test-macos, test-integration]
    runs-on: ubuntu-latest
    steps:
      - name: 'üìä Generate Test Summary'
        shell: bash
        run: |
          cat >> $GITHUB_STEP_SUMMARY << 'EOF'
          # üß™ Normalize Arguments Action Test Results

          ## üìã Test Execution Summary
          | Platform | Status | Details |
          |----------|--------|---------|
          | üêß Linux | ${{ needs.test-linux.result == 'success' && '‚úÖ Passed' || needs.test-linux.result == 'skipped' && '‚è≠Ô∏è Skipped' || '‚ùå Failed' }} | Core functionality, all argument types |
          | ü™ü Windows | ${{ needs.test-windows.result == 'success' && '‚úÖ Passed' || needs.test-windows.result == 'skipped' && '‚è≠Ô∏è Skipped' || '‚ùå Failed' }} | Windows-specific paths and PowerShell |
          | üçé macOS | ${{ needs.test-macos.result == 'success' && '‚úÖ Passed' || needs.test-macos.result == 'skipped' && '‚è≠Ô∏è Skipped' || '‚ùå Failed' }} | Unix-style arguments and macOS paths |
          | üîó Integration | ${{ needs.test-integration.result == 'success' && '‚úÖ Passed' || needs.test-integration.result == 'skipped' && '‚è≠Ô∏è Skipped' || '‚ùå Failed' }} | Real-world usage scenarios |

          ## üß™ Test Categories Covered
          - **Single-line arguments**: Direct string input with spaces
          - **Multi-line arguments (|)**: Literal block scalar with newlines
          - **Folded arguments (>)**: Folded block scalar (spaces between words)
          - **Quoted arguments**: Arguments containing spaces in quotes
          - **Custom separators**: Using comma, space, and other delimiters
          - **Empty handling**: Blank inputs and null arguments
          - **Cross-platform**: Same tests on Linux, Windows, and macOS

          ## üéØ Key Features Tested
          - ‚úÖ Input validation and error handling
          - ‚úÖ Automatic whitespace trimming and sanitization
          - ‚úÖ Custom separator support
          - ‚úÖ Cross-platform compatibility
          - ‚úÖ YAML scalar type handling (|, >, plain)
          - ‚úÖ Quoted argument preservation
          - ‚úÖ Output format consistency

          ## üì§ Action Outputs Verified
          - `normalized-arguments`: Properly formatted single-line string

          ---
          *Test completed on: ${{ github.run_number }} | Triggered by: ${{ github.event_name }}*
          EOF

          # Check overall success
          LINUX_STATUS="${{ needs.test-linux.result }}"
          WINDOWS_STATUS="${{ needs.test-windows.result }}"
          MACOS_STATUS="${{ needs.test-macos.result }}"
          INTEGRATION_STATUS="${{ needs.test-integration.result }}"

          FAILED_TESTS=""

          if [ "$LINUX_STATUS" = "failure" ]; then
            FAILED_TESTS="$FAILED_TESTS Linux"
          fi

          if [ "$WINDOWS_STATUS" = "failure" ]; then
            FAILED_TESTS="$FAILED_TESTS Windows"
          fi

          if [ "$MACOS_STATUS" = "failure" ]; then
            FAILED_TESTS="$FAILED_TESTS macOS"
          fi

          if [ "$INTEGRATION_STATUS" = "failure" ]; then
            FAILED_TESTS="$FAILED_TESTS Integration"
          fi

          if [ -n "$FAILED_TESTS" ]; then
            echo "::error::Tests failed on:$FAILED_TESTS"
            exit 1
          else
            echo "::notice::üéâ All tests passed successfully!"
          fi
