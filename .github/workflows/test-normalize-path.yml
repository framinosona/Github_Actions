name: 'üß™ Test Normalize Path Action'

on:
  push:
    paths:
      - 'normalize-path/**'
      - '.github/workflows/test-normalize-path.yml'
  pull_request:
    paths:
      - 'normalize-path/**'
      - '.github/workflows/test-normalize-path.yml'
  workflow_dispatch:
    inputs:
      show-summary:
        description: 'Show detailed action summaries'
        required: false
        default: true
        type: boolean
      test-platform:
        description: 'Platform to test (all, linux, windows, macos)'
        required: false
        default: 'all'
        type: choice
        options:
          - all
          - linux
          - windows
          - macos

env:
  SHOW_SUMMARY: ${{ github.event.inputs.show-summary || 'true' }}

permissions:
  contents: read

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test-strategy:
    name: 'üéØ Determine Test Strategy'
    runs-on: ubuntu-latest
    outputs:
      test-linux: ${{ steps.strategy.outputs.test-linux }}
      test-windows: ${{ steps.strategy.outputs.test-windows }}
      test-macos: ${{ steps.strategy.outputs.test-macos }}
    steps:
      - name: 'üéØ Set Test Strategy'
        id: strategy
        shell: bash
        run: |
          TEST_PLATFORM="${{ github.event.inputs.test-platform || 'all' }}"
          
          case "$TEST_PLATFORM" in
            "all")
              echo "test-linux=true" >> $GITHUB_OUTPUT
              echo "test-windows=true" >> $GITHUB_OUTPUT
              echo "test-macos=true" >> $GITHUB_OUTPUT
              ;;
            "linux")
              echo "test-linux=true" >> $GITHUB_OUTPUT
              echo "test-windows=false" >> $GITHUB_OUTPUT
              echo "test-macos=false" >> $GITHUB_OUTPUT
              ;;
            "windows")
              echo "test-linux=false" >> $GITHUB_OUTPUT
              echo "test-windows=true" >> $GITHUB_OUTPUT
              echo "test-macos=false" >> $GITHUB_OUTPUT
              ;;
            "macos")
              echo "test-linux=false" >> $GITHUB_OUTPUT
              echo "test-windows=false" >> $GITHUB_OUTPUT
              echo "test-macos=true" >> $GITHUB_OUTPUT
              ;;
          esac
          
          echo "::notice::Testing strategy: $TEST_PLATFORM"

  setup-test-files:
    name: 'üìÅ Setup Test Files'
    runs-on: ubuntu-latest
    steps:
      - name: 'üì• Checkout Repository'
        uses: actions/checkout@v5

      - name: 'üìÅ Create Test Directory Structure'
        shell: bash
        run: |
          echo "::group::üèóÔ∏è Creating test directory structure"
          
          # Create test directories and files
          mkdir -p test-paths/src/components
          mkdir -p test-paths/src/utils
          mkdir -p test-paths/docs/api
          mkdir -p test-paths/build/output
          mkdir -p test-paths/config
          
          # Create test files
          echo "console.log('main');" > test-paths/src/main.js
          echo "console.log('utils');" > test-paths/src/utils/helper.js
          echo "# Component" > test-paths/src/components/Button.md
          echo "# API Docs" > test-paths/docs/api/index.md
          echo "# Guide" > test-paths/docs/guide.md
          echo '{"name": "test"}' > test-paths/config/app.json
          echo '{"version": "1.0.0"}' > test-paths/package.json
          
          # List created structure
          echo "Created test structure:"
          find test-paths -type f | sort
          
          echo "::endgroup::"

      - name: 'üì§ Upload Test Files'
        uses: actions/upload-artifact@v4
        with:
          name: test-file-structure
          path: test-paths/
          retention-days: 1

  test-linux:
    name: 'üêß Test on Linux'
    if: needs.test-strategy.outputs.test-linux == 'true'
    needs: [test-strategy, setup-test-files]
    runs-on: ubuntu-latest
    steps:
      - name: 'üì• Checkout Repository'
        uses: actions/checkout@v5

      - name: 'üì• Download Test Files'
        uses: actions/download-artifact@v4
        with:
          name: test-file-structure
          path: test-paths/

      - name: 'üß™ Test Simple Relative Path'
        id: test-simple
        uses: ./normalize-path
        with:
          path: 'test-paths/src/main.js'
          show-summary: ${{ env.SHOW_SUMMARY }}

      - name: '‚úÖ Verify Simple Path Results'
        shell: bash
        run: |
          echo "::group::üîç Simple Path Test Results"
          NORMALIZED="${{ steps.test-simple.outputs.normalized }}"
          ABSOLUTE="${{ steps.test-simple.outputs.absolute }}"
          EXISTS="${{ steps.test-simple.outputs.exists }}"
          
          echo "Normalized: $NORMALIZED"
          echo "Absolute: $ABSOLUTE"
          echo "Exists: $EXISTS"
          
          # Verify normalized path (should be clean relative path)
          EXPECTED="test-paths/src/main.js"
          if [ "$NORMALIZED" != "$EXPECTED" ]; then
            echo "::error::Simple path normalization failed. Expected '$EXPECTED', got '$NORMALIZED'"
            exit 1
          fi
          
          # Verify absolute path contains the working directory
          if [[ ! "$ABSOLUTE" == *"/test-paths/src/main.js" ]]; then
            echo "::error::Absolute path format incorrect. Got '$ABSOLUTE'"
            exit 1
          fi
          
          # Verify file exists
          if [ "$EXISTS" != "true" ]; then
            echo "::error::File existence check failed. Expected 'true', got '$EXISTS'"
            exit 1
          fi
          
          echo "::notice::‚úÖ Simple path test passed successfully"
          echo "::endgroup::"

      - name: 'üß™ Test Complex Relative Path with Parent References'
        id: test-complex
        uses: ./normalize-path
        with:
          path: 'test-paths/src/components/../utils/../main.js'
          show-summary: ${{ env.SHOW_SUMMARY }}

      - name: '‚úÖ Verify Complex Path Results'
        shell: bash
        run: |
          echo "::group::üîç Complex Path Test Results"
          NORMALIZED="${{ steps.test-complex.outputs.normalized }}"
          ABSOLUTE="${{ steps.test-complex.outputs.absolute }}"
          EXISTS="${{ steps.test-complex.outputs.exists }}"
          
          echo "Normalized: $NORMALIZED"
          echo "Absolute: $ABSOLUTE"
          echo "Exists: $EXISTS"
          
          # Verify normalized path resolves parent references
          EXPECTED="test-paths/src/main.js"
          if [ "$NORMALIZED" != "$EXPECTED" ]; then
            echo "::error::Complex path normalization failed. Expected '$EXPECTED', got '$NORMALIZED'"
            exit 1
          fi
          
          # Verify file exists
          if [ "$EXISTS" != "true" ]; then
            echo "::error::Complex path existence check failed. Expected 'true', got '$EXISTS'"
            exit 1
          fi
          
          echo "::notice::‚úÖ Complex path test passed successfully"
          echo "::endgroup::"

      - name: 'üß™ Test Current Directory References'
        id: test-current-dir
        uses: ./normalize-path
        with:
          path: './test-paths/./docs/./guide.md'
          show-summary: ${{ env.SHOW_SUMMARY }}

      - name: '‚úÖ Verify Current Directory Results'
        shell: bash
        run: |
          echo "::group::üîç Current Directory Test Results"
          NORMALIZED="${{ steps.test-current-dir.outputs.normalized }}"
          EXISTS="${{ steps.test-current-dir.outputs.exists }}"
          
          echo "Normalized: $NORMALIZED"
          echo "Exists: $EXISTS"
          
          # Verify normalized path removes current directory references
          EXPECTED="test-paths/docs/guide.md"
          if [ "$NORMALIZED" != "$EXPECTED" ]; then
            echo "::error::Current directory normalization failed. Expected '$EXPECTED', got '$NORMALIZED'"
            exit 1
          fi
          
          # Verify file exists
          if [ "$EXISTS" != "true" ]; then
            echo "::error::Current directory existence check failed. Expected 'true', got '$EXISTS'"
            exit 1
          fi
          
          echo "::notice::‚úÖ Current directory test passed successfully"
          echo "::endgroup::"

      - name: 'üß™ Test Non-existent Path'
        id: test-nonexistent
        uses: ./normalize-path
        with:
          path: 'test-paths/nonexistent/file.txt'
          show-summary: ${{ env.SHOW_SUMMARY }}

      - name: '‚úÖ Verify Non-existent Path Results'
        shell: bash
        run: |
          echo "::group::üîç Non-existent Path Test Results"
          NORMALIZED="${{ steps.test-nonexistent.outputs.normalized }}"
          EXISTS="${{ steps.test-nonexistent.outputs.exists }}"
          
          echo "Normalized: $NORMALIZED"
          echo "Exists: $EXISTS"
          
          # Verify path is normalized even if it doesn't exist
          EXPECTED="test-paths/nonexistent/file.txt"
          if [ "$NORMALIZED" != "$EXPECTED" ]; then
            echo "::error::Non-existent path normalization failed. Expected '$EXPECTED', got '$NORMALIZED'"
            exit 1
          fi
          
          # Verify file doesn't exist
          if [ "$EXISTS" != "false" ]; then
            echo "::error::Non-existent path existence check failed. Expected 'false', got '$EXISTS'"
            exit 1
          fi
          
          echo "::notice::‚úÖ Non-existent path test passed successfully"
          echo "::endgroup::"

      - name: 'üß™ Test Absolute Path'
        id: test-absolute
        uses: ./normalize-path
        with:
          path: '/tmp'
          show-summary: ${{ env.SHOW_SUMMARY }}

      - name: '‚úÖ Verify Absolute Path Results'
        shell: bash
        run: |
          echo "::group::üîç Absolute Path Test Results"
          NORMALIZED="${{ steps.test-absolute.outputs.normalized }}"
          ABSOLUTE="${{ steps.test-absolute.outputs.absolute }}"
          EXISTS="${{ steps.test-absolute.outputs.exists }}"
          
          echo "Normalized: $NORMALIZED"
          echo "Absolute: $ABSOLUTE"
          echo "Exists: $EXISTS"
          
          # Verify absolute path remains absolute
          if [[ ! "$NORMALIZED" == "/"* ]]; then
            echo "::error::Absolute path normalization failed. Expected absolute path, got '$NORMALIZED'"
            exit 1
          fi
          
          # Verify normalized and absolute are the same for absolute inputs
          if [ "$NORMALIZED" != "$ABSOLUTE" ]; then
            echo "::error::Absolute path consistency failed. Normalized '$NORMALIZED' != Absolute '$ABSOLUTE'"
            exit 1
          fi
          
          echo "::notice::‚úÖ Absolute path test passed successfully"
          echo "::endgroup::"

  test-windows:
    name: 'ü™ü Test on Windows'
    if: needs.test-strategy.outputs.test-windows == 'true'
    needs: [test-strategy, setup-test-files]
    runs-on: windows-latest
    steps:
      - name: 'üì• Checkout Repository'
        uses: actions/checkout@v5

      - name: 'üì• Download Test Files'
        uses: actions/download-artifact@v4
        with:
          name: test-file-structure
          path: test-paths/

      - name: 'üß™ Test Windows Path Separators'
        id: test-windows-separators
        uses: ./normalize-path
        with:
          path: 'test-paths\src\main.js'
          show-summary: ${{ env.SHOW_SUMMARY }}

      - name: '‚úÖ Verify Windows Separator Results'
        shell: bash
        run: |
          echo "::group::üîç Windows Separator Test Results"
          NORMALIZED="${{ steps.test-windows-separators.outputs.normalized }}"
          EXISTS="${{ steps.test-windows-separators.outputs.exists }}"
          
          echo "Normalized: $NORMALIZED"
          echo "Exists: $EXISTS"
          
          # On Windows, should use backslashes
          if [[ ! "$NORMALIZED" == *"\\"* ]]; then
            echo "::warning::Expected Windows-style path separators, got '$NORMALIZED'"
          fi
          
          # Verify file exists
          if [ "$EXISTS" != "true" ]; then
            echo "::error::Windows separator existence check failed. Expected 'true', got '$EXISTS'"
            exit 1
          fi
          
          echo "::notice::‚úÖ Windows separator test passed successfully"
          echo "::endgroup::"

      - name: 'üß™ Test Mixed Path Separators'
        id: test-mixed-separators
        uses: ./normalize-path
        with:
          path: 'test-paths/src\components/../utils/helper.js'
          show-summary: ${{ env.SHOW_SUMMARY }}

      - name: '‚úÖ Verify Mixed Separator Results'
        shell: bash
        run: |
          echo "::group::üîç Mixed Separator Test Results"
          NORMALIZED="${{ steps.test-mixed-separators.outputs.normalized }}"
          EXISTS="${{ steps.test-mixed-separators.outputs.exists }}"
          
          echo "Normalized: $NORMALIZED"
          echo "Exists: $EXISTS"
          
          # Verify file exists
          if [ "$EXISTS" != "true" ]; then
            echo "::error::Mixed separator existence check failed. Expected 'true', got '$EXISTS'"
            exit 1
          fi
          
          echo "::notice::‚úÖ Mixed separator test passed successfully"
          echo "::endgroup::"

      - name: 'üß™ Test Windows Drive Letter'
        id: test-drive-letter
        uses: ./normalize-path
        with:
          path: 'C:\Windows\System32'
          show-summary: ${{ env.SHOW_SUMMARY }}

      - name: '‚úÖ Verify Drive Letter Results'
        shell: bash
        run: |
          echo "::group::üîç Drive Letter Test Results"
          NORMALIZED="${{ steps.test-drive-letter.outputs.normalized }}"
          ABSOLUTE="${{ steps.test-drive-letter.outputs.absolute }}"
          EXISTS="${{ steps.test-drive-letter.outputs.exists }}"
          
          echo "Normalized: $NORMALIZED"
          echo "Absolute: $ABSOLUTE"
          echo "Exists: $EXISTS"
          
          # Verify drive letter is preserved
          if [[ ! "$NORMALIZED" == "C:\\"* ]]; then
            echo "::error::Drive letter normalization failed. Expected C:\\ prefix, got '$NORMALIZED'"
            exit 1
          fi
          
          # System32 should exist on Windows
          if [ "$EXISTS" != "true" ]; then
            echo "::warning::System32 directory not found. This might be expected in some environments."
          fi
          
          echo "::notice::‚úÖ Drive letter test passed successfully"
          echo "::endgroup::"

      - name: 'üß™ Test Reserved Characters Warning'
        id: test-reserved-chars
        uses: ./normalize-path
        with:
          path: 'test<file>with:invalid|chars?.txt'
          show-summary: ${{ env.SHOW_SUMMARY }}

      - name: '‚úÖ Verify Reserved Characters Handling'
        shell: bash
        run: |
          echo "::group::üîç Reserved Characters Test Results"
          NORMALIZED="${{ steps.test-reserved-chars.outputs.normalized }}"
          EXISTS="${{ steps.test-reserved-chars.outputs.exists }}"
          
          echo "Normalized: $NORMALIZED"
          echo "Exists: $EXISTS"
          
          # Should normalize the path even with invalid characters
          # (Note: The action warns but still processes the path)
          if [ -z "$NORMALIZED" ]; then
            echo "::error::Reserved characters test failed. Path should still be normalized"
            exit 1
          fi
          
          # File shouldn't exist due to invalid characters
          if [ "$EXISTS" != "false" ]; then
            echo "::error::Reserved characters existence check failed. Expected 'false', got '$EXISTS'"
            exit 1
          fi
          
          echo "::notice::‚úÖ Reserved characters test passed successfully"
          echo "::endgroup::"

  test-macos:
    name: 'üçé Test on macOS'
    if: needs.test-strategy.outputs.test-macos == 'true'
    needs: [test-strategy, setup-test-files]
    runs-on: macos-latest
    steps:
      - name: 'üì• Checkout Repository'
        uses: actions/checkout@v5

      - name: 'üì• Download Test Files'
        uses: actions/download-artifact@v4
        with:
          name: test-file-structure
          path: test-paths/

      - name: 'üß™ Test macOS Unix-style Paths'
        id: test-unix-paths
        uses: ./normalize-path
        with:
          path: 'test-paths/src/../docs/api/index.md'
          show-summary: ${{ env.SHOW_SUMMARY }}

      - name: '‚úÖ Verify Unix Path Results'
        shell: bash
        run: |
          echo "::group::üîç Unix Path Test Results"
          NORMALIZED="${{ steps.test-unix-paths.outputs.normalized }}"
          EXISTS="${{ steps.test-unix-paths.outputs.exists }}"
          
          echo "Normalized: $NORMALIZED"
          echo "Exists: $EXISTS"
          
          # Verify Unix-style path normalization
          EXPECTED="test-paths/docs/api/index.md"
          if [ "$NORMALIZED" != "$EXPECTED" ]; then
            echo "::error::Unix path normalization failed. Expected '$EXPECTED', got '$NORMALIZED'"
            exit 1
          fi
          
          # Verify file exists
          if [ "$EXISTS" != "true" ]; then
            echo "::error::Unix path existence check failed. Expected 'true', got '$EXISTS'"
            exit 1
          fi
          
          echo "::notice::‚úÖ Unix path test passed successfully"
          echo "::endgroup::"

      - name: 'üß™ Test Home Directory Path'
        id: test-home-dir
        uses: ./normalize-path
        with:
          path: '~/Documents'
          show-summary: ${{ env.SHOW_SUMMARY }}

      - name: '‚úÖ Verify Home Directory Results'
        shell: bash
        run: |
          echo "::group::üîç Home Directory Test Results"
          NORMALIZED="${{ steps.test-home-dir.outputs.normalized }}"
          ABSOLUTE="${{ steps.test-home-dir.outputs.absolute }}"
          EXISTS="${{ steps.test-home-dir.outputs.exists }}"
          
          echo "Normalized: $NORMALIZED"
          echo "Absolute: $ABSOLUTE"
          echo "Exists: $EXISTS"
          
          # Note: ~ expansion might not work as expected in Node.js path.normalize
          # The test verifies the action handles it gracefully
          if [ -z "$NORMALIZED" ]; then
            echo "::error::Home directory normalization failed. Got empty result"
            exit 1
          fi
          
          echo "::notice::‚úÖ Home directory test passed successfully"
          echo "::endgroup::"

      - name: 'üß™ Test Case Sensitivity'
        id: test-case-sensitivity
        uses: ./normalize-path
        with:
          path: 'test-paths/SRC/MAIN.JS'
          show-summary: ${{ env.SHOW_SUMMARY }}

      - name: '‚úÖ Verify Case Sensitivity Results'
        shell: bash
        run: |
          echo "::group::üîç Case Sensitivity Test Results"
          NORMALIZED="${{ steps.test-case-sensitivity.outputs.normalized }}"
          EXISTS="${{ steps.test-case-sensitivity.outputs.exists }}"
          
          echo "Normalized: $NORMALIZED"
          echo "Exists: $EXISTS"
          
          # Verify normalization preserves case
          EXPECTED="test-paths/SRC/MAIN.JS"
          if [ "$NORMALIZED" != "$EXPECTED" ]; then
            echo "::error::Case sensitivity normalization failed. Expected '$EXPECTED', got '$NORMALIZED'"
            exit 1
          fi
          
          # File shouldn't exist due to case difference (on case-sensitive filesystem)
          if [ "$EXISTS" != "false" ]; then
            echo "::warning::Case sensitivity test: Expected 'false', got '$EXISTS'. Filesystem might be case-insensitive"
          fi
          
          echo "::notice::‚úÖ Case sensitivity test passed successfully"
          echo "::endgroup::"

  test-integration:
    name: 'üîó Integration Tests'
    needs: [test-strategy, setup-test-files, test-linux]
    if: always() && needs.test-strategy.outputs.test-linux == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: 'üì• Checkout Repository'
        uses: actions/checkout@v5

      - name: 'üì• Download Test Files'
        uses: actions/download-artifact@v4
        with:
          name: test-file-structure
          path: test-paths/

      - name: 'üß™ Test Multiple Path Normalization'
        id: test-multiple-paths
        shell: bash
        run: |
          echo "::group::üîó Multiple Path Integration Test"
          
          # Test source path
          SOURCE_PATH="test-paths/src/../config/app.json"
          echo "Testing source path: $SOURCE_PATH"

      - name: 'üìÅ Normalize Source Path'
        id: normalize-source
        uses: ./normalize-path
        with:
          path: 'test-paths/src/../config/app.json'
          show-summary: ${{ env.SHOW_SUMMARY }}

      - name: 'üìÅ Normalize Destination Path'
        id: normalize-dest
        uses: ./normalize-path
        with:
          path: 'test-paths/build/output/config.json'
          show-summary: ${{ env.SHOW_SUMMARY }}

      - name: 'üîß File Copy Integration Test'
        shell: bash
        run: |
          echo "::group::üöÄ File Copy Integration Test"
          SOURCE="${{ steps.normalize-source.outputs.absolute }}"
          DEST="${{ steps.normalize-dest.outputs.absolute }}"
          SOURCE_EXISTS="${{ steps.normalize-source.outputs.exists }}"
          
          echo "Source: $SOURCE (exists: $SOURCE_EXISTS)"
          echo "Destination: $DEST"
          
          if [ "$SOURCE_EXISTS" = "true" ]; then
            # Create destination directory if needed
            mkdir -p "$(dirname "$DEST")"
            
            # Copy file using normalized paths
            cp "$SOURCE" "$DEST"
            
            if [ -f "$DEST" ]; then
              echo "::notice::‚úÖ File copy integration test passed"
              echo "File successfully copied from normalized paths"
              
              # Verify content
              echo "Source content:"
              cat "$SOURCE"
              echo "Destination content:"
              cat "$DEST"
            else
              echo "::error::File copy integration test failed"
              exit 1
            fi
          else
            echo "::error::Source file doesn't exist for integration test"
            exit 1
          fi
          echo "::endgroup::"

      - name: 'üß™ Test Path Validation Workflow'
        id: test-validation
        shell: bash
        run: |
          echo "::group::üîç Path Validation Workflow"
          
          # Test package.json validation (should exist)
          echo "Testing package.json validation..."

      - name: 'üìÅ Validate Package Path'
        id: validate-package
        uses: ./normalize-path
        with:
          path: 'test-paths/package.json'
          show-summary: ${{ env.SHOW_SUMMARY }}

      - name: 'üìÅ Validate Missing Config Path'
        id: validate-missing
        uses: ./normalize-path
        with:
          path: 'test-paths/missing-config.json'
          show-summary: ${{ env.SHOW_SUMMARY }}

      - name: '‚úÖ Complete Validation Workflow'
        shell: bash
        run: |
          echo "::group::üìã Validation Workflow Results"
          PACKAGE_EXISTS="${{ steps.validate-package.outputs.exists }}"
          MISSING_EXISTS="${{ steps.validate-missing.outputs.exists }}"
          
          echo "Package.json exists: $PACKAGE_EXISTS"
          echo "Missing config exists: $MISSING_EXISTS"
          
          # Process existing file
          if [ "$PACKAGE_EXISTS" = "true" ]; then
            echo "::notice::Processing existing package.json"
            cat "${{ steps.validate-package.outputs.absolute }}"
          else
            echo "::error::Package.json validation failed"
            exit 1
          fi
          
          # Create missing file
          if [ "$MISSING_EXISTS" = "false" ]; then
            echo "::notice::Creating missing config file"
            MISSING_PATH="${{ steps.validate-missing.outputs.absolute }}"
            echo '{"created": true}' > "$MISSING_PATH"
            
            if [ -f "$MISSING_PATH" ]; then
              echo "::notice::‚úÖ Missing file created successfully"
            else
              echo "::error::Failed to create missing file"
              exit 1
            fi
          else
            echo "::warning::Expected missing file to not exist"
          fi
          
          echo "::notice::‚úÖ Validation workflow integration test passed"
          echo "::endgroup::"

  test-summary:
    name: 'üìã Test Summary'
    if: always()
    needs: [test-strategy, test-linux, test-windows, test-macos, test-integration]
    runs-on: ubuntu-latest
    steps:
      - name: 'üìä Generate Test Summary'
        shell: bash
        run: |
          cat >> $GITHUB_STEP_SUMMARY << 'EOF'
          # üß™ Normalize Path Action Test Results
          
          ## üìã Test Execution Summary
          | Platform | Status | Details |
          |----------|--------|---------|
          | üêß Linux | ${{ needs.test-linux.result == 'success' && '‚úÖ Passed' || needs.test-linux.result == 'skipped' && '‚è≠Ô∏è Skipped' || '‚ùå Failed' }} | Unix paths, relative/absolute normalization |
          | ü™ü Windows | ${{ needs.test-windows.result == 'success' && '‚úÖ Passed' || needs.test-windows.result == 'skipped' && '‚è≠Ô∏è Skipped' || '‚ùå Failed' }} | Windows separators, drive letters, reserved chars |
          | üçé macOS | ${{ needs.test-macos.result == 'success' && '‚úÖ Passed' || needs.test-macos.result == 'skipped' && '‚è≠Ô∏è Skipped' || '‚ùå Failed' }} | Unix-style paths, case sensitivity |
          | üîó Integration | ${{ needs.test-integration.result == 'success' && '‚úÖ Passed' || needs.test-integration.result == 'skipped' && '‚è≠Ô∏è Skipped' || '‚ùå Failed' }} | File operations, validation workflows |
          
          ## üß™ Test Categories Covered
          
          ### Path Normalization Types
          - **Simple relative paths**: `src/main.js`
          - **Complex parent references**: `src/components/../utils/../main.js`
          - **Current directory references**: `./src/./docs/./guide.md`
          - **Absolute paths**: `/tmp`, `C:\Windows\System32`
          - **Mixed separators**: `src\components/../utils/helper.js`
          
          ### Platform-Specific Features
          - **Linux/Unix**: Forward slashes, case sensitivity
          - **Windows**: Backslashes, drive letters, reserved character warnings
          - **macOS**: Unix-style paths, home directory handling
          
          ### Path Existence Testing
          - **Existing files**: Verification of real file existence
          - **Non-existent paths**: Handling of missing files/directories
          - **Directory vs file**: Different path types
          
          ### Integration Scenarios
          - **File copy operations**: Using normalized paths for file operations
          - **Path validation workflows**: Conditional processing based on existence
          - **Multiple path coordination**: Working with source and destination paths
          
          ## üéØ Key Features Tested
          - ‚úÖ Cross-platform path normalization
          - ‚úÖ Parent directory (`..`) resolution
          - ‚úÖ Current directory (`.`) cleanup
          - ‚úÖ Absolute path resolution
          - ‚úÖ File existence checking
          - ‚úÖ Path separator normalization
          - ‚úÖ Invalid character handling
          - ‚úÖ Case sensitivity awareness
          - ‚úÖ Integration with file operations
          
          ## üì§ Action Outputs Verified
          - `normalized`: Cleaned relative or absolute path
          - `absolute`: Full filesystem path from current working directory
          - `exists`: Boolean indicating filesystem presence
          
          ## üîß Implementation Details Tested
          - **Node.js path.normalize()**: Proper `.` and `..` resolution
          - **Node.js path.resolve()**: Absolute path generation
          - **Node.js fs.accessSync()**: File existence checking
          - **Cross-platform compatibility**: Windows vs Unix behavior
          - **Error handling**: Invalid inputs and edge cases
          
          ## üõ°Ô∏è Security Considerations Verified
          - **Parent directory warnings**: Detection of `..` patterns
          - **Reserved character validation**: Windows-specific restrictions
          - **Path traversal safety**: Proper normalization without exploits
          
          ---
          *Test completed on: ${{ github.run_number }} | Triggered by: ${{ github.event_name }}*
          EOF
          
          # Check overall success
          LINUX_STATUS="${{ needs.test-linux.result }}"
          WINDOWS_STATUS="${{ needs.test-windows.result }}"
          MACOS_STATUS="${{ needs.test-macos.result }}"
          INTEGRATION_STATUS="${{ needs.test-integration.result }}"
          
          FAILED_TESTS=""
          
          if [ "$LINUX_STATUS" = "failure" ]; then
            FAILED_TESTS="$FAILED_TESTS Linux"
          fi
          
          if [ "$WINDOWS_STATUS" = "failure" ]; then
            FAILED_TESTS="$FAILED_TESTS Windows"
          fi
          
          if [ "$MACOS_STATUS" = "failure" ]; then
            FAILED_TESTS="$FAILED_TESTS macOS"
          fi
          
          if [ "$INTEGRATION_STATUS" = "failure" ]; then
            FAILED_TESTS="$FAILED_TESTS Integration"
          fi
          
          if [ -n "$FAILED_TESTS" ]; then
            echo "::error::Tests failed on:$FAILED_TESTS"
            exit 1
          else
            echo "::notice::üéâ All tests passed successfully!"
          fi