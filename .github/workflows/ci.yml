name: '🚀 CI/CD Pipeline'

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      major:
        description: 'Major version number'
        required: true
        default: '1'
        type: string
      minor:
        description: 'Minor version number'
        required: true
        default: '0'
        type: string
      force-release:
        description: 'Force create release even if no changes'
        required: false
        default: false
        type: boolean

env:
  MAJOR_VERSION: ${{ github.event.inputs.major || '1' }}
  MINOR_VERSION: ${{ github.event.inputs.minor || '0' }}

permissions:
  contents: write
  pages: write
  id-token: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-and-release:
    name: '🏗️ Build and Release'
    runs-on: ubuntu-latest
    outputs:
      version-full: ${{ steps.version.outputs.VERSION_FULL }}
      version-tag: ${{ steps.git-tag.outputs.tag-name }}
      release-url: ${{ steps.release.outputs.release-url }}
      docfx-path: ${{ steps.docfx.outputs.output-path }}

    steps:
      - name: '📥 Checkout Repository'
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: '🔢 Generate Version'
        id: version
        uses: ./generate-version
        with:
          major: ${{ env.MAJOR_VERSION }}
          minor: ${{ env.MINOR_VERSION }}
          output-txt: 'version.txt'
          show-summary: 'true'


      - name: '🏷️ Generate Version Badge'
        id: badge
        uses: ./generate-badge
        with:
          label: 'version'
          message: ${{ steps.version.outputs.VERSION_FULL }}
          logo: 'github'
          output-file: 'version-badge.svg'
          output-format: 'svg'
          show-summary: 'true'

      - name: '📚 Build Documentation'
        id: docfx
        uses: ./dotnet-docfx-build
        with:
          metadata: '{"_appTitle":"GitHub Actions Repository","_appFooter":"© 2024 Francois Raminosona","_enableSearch":"true"}'
          show-summary: 'true'

      - name: '📁 Prepare Site Assets'
        shell: bash
        run: |
          echo "📁 Preparing site assets for GitHub Pages..."

          # Create assets directory in site output
          mkdir -p ${{ steps.docfx.outputs.output-path }}/assets

          # Copy version files to site
          if [ -f "version.txt" ]; then
            cp version.txt ${{ steps.docfx.outputs.output-path }}/assets/
            echo "✅ Copied version.txt to site assets"
          fi

          # Copy SVG badge to site assets
          if [ -f "version-badge.svg" ]; then
            cp version-badge.svg ${{ steps.docfx.outputs.output-path }}/assets/
            echo "✅ Copied version-badge.svg to site assets"
          fi

          # Copy SVG badge to site assets
          if [ -f "version-badge.svg" ]; then
            cp version-badge.svg ${{ steps.docfx.outputs.output-path }}/assets/
            echo "✅ Copied version-badge.svg to site assets"
          fi

          # Create version JSON for JavaScript consumption
          cat > ${{ steps.docfx.outputs.output-path }}/assets/version.json << EOF
          {
            "major": "${{ steps.version.outputs.VERSION_MAJOR }}",
            "minor": "${{ steps.version.outputs.VERSION_MINOR }}",
            "patch": "${{ steps.version.outputs.VERSION_PATCH }}",
            "full": "${{ steps.version.outputs.VERSION_FULL }}",
            "core": "${{ steps.version.outputs.VERSION_CORE }}",
            "assembly": "${{ steps.version.outputs.VERSION_ASSEMBLY }}",
            "buildId": "${{ steps.version.outputs.VERSION_BUILDID }}",
            "branchName": "${{ steps.version.outputs.VERSION_BRANCHNAME }}",
            "releaseUrl": "${{ steps.release.outputs.release-url || '' }}",
            "badgeFile": "assets/version-badge.svg"
          }
          EOF
          echo "✅ Created version.json for site"

          echo "✅ Site assets preparation completed"

      - name: '📤 Upload GitHub Pages Artifact'
        uses: actions/upload-pages-artifact@v3
        with:
          path: ${{ steps.docfx.outputs.output-path }}

      - name: '🏷️ Create Git Tag'
        id: git-tag
        if: github.ref == format('refs/heads/{0}', github.event.repository.default_branch) || github.event.inputs.force-release == 'true'
        uses: ./git-tag
        with:
          tag: ${{ steps.version.outputs.VERSION_FULL }}
          message: 'Release ${{ steps.version.outputs.VERSION_FULL }}'
          prefix: 'v'
          fail-if-exists: 'false'
          show-summary: 'true'

      - name: '🚀 Create GitHub Release'
        id: release
        if: github.ref == format('refs/heads/{0}', github.event.repository.default_branch) || github.event.inputs.force-release == 'true'
        uses: ./github-release
        with:
          tag: ${{ steps.git-tag.outputs.tag-name }}
          title: 'Release ${{ steps.version.outputs.VERSION_FULL }}'
          generate-notes: 'true'
          prerelease: ${{ contains(steps.version.outputs.VERSION_FULL, '-') }}
          show-summary: 'true'

      - name: '📋 Workflow Summary'
        shell: bash
        run: |
          cat >> $GITHUB_STEP_SUMMARY << 'EOF'
          # 🚀 CI/CD Pipeline Summary

          ## 📊 Build Results
          | Component | Status | Details |
          |-----------|--------|---------|
          | 🔢 Version Generation | ✅ | `${{ steps.version.outputs.VERSION_FULL }}` |
          | 🏷️ Git Tagging | ${{ steps.git-tag.outcome == 'success' && '✅' || (steps.git-tag.outcome == 'skipped' && '⏭️' || '❌') }} | `${{ steps.git-tag.outputs.tag-name || 'skipped' }}` |
          | 🏷️ Badge Generation | ✅ | SVG file created |
          | 🚀 GitHub Release | ${{ steps.release.outcome == 'success' && '✅' || (steps.release.outcome == 'skipped' && '⏭️' || '❌') }} | ${{ steps.release.outputs.release-url && format('[Release]({0})', steps.release.outputs.release-url) || 'skipped' }} |
          | 📚 Documentation | ✅ | ${{ steps.docfx.outputs.files-count }} files generated |

          ## 🔗 Quick Links
          - 📦 **Version**: `${{ steps.version.outputs.VERSION_FULL }}`
          - 🏷️ **Badge**: Available at `/assets/version-badge.svg`
          - 🌐 **Documentation**: Will be available at GitHub Pages after deployment
          ${{ steps.release.outputs.release-url && format('- 🚀 **Release**: [View Release]({0})', steps.release.outputs.release-url) || '' }}

          ## 📁 Generated Assets
          - `version.txt` - Version information in key=value format
          - `version.json` - Version information in JSON format
          - `version-badge.svg` - Version badge in SVG format
          - Documentation site in `${{ steps.docfx.outputs.output-path }}`
          EOF

  deploy-pages:
    name: '🌐 Deploy to GitHub Pages'
    needs: build-and-release
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
      - name: '🌐 Deploy to GitHub Pages'
        id: deployment
        uses: actions/deploy-pages@v4

      - name: '📋 Deployment Summary'
        shell: bash
        run: |
          cat >> $GITHUB_STEP_SUMMARY << 'EOF'
          # 🌐 GitHub Pages Deployment

          ## 🚀 Deployment Results
          | Component | Status | URL |
          |-----------|--------|-----|
          | 📚 Documentation Site | ✅ | [${{ steps.deployment.outputs.page_url }}](${{ steps.deployment.outputs.page_url }}) |
          | 🏷️ Version Badge | ✅ | [${{ steps.deployment.outputs.page_url }}assets/version-badge.svg](${{ steps.deployment.outputs.page_url }}assets/version-badge.svg) |
          | 📄 Version Info | ✅ | [${{ steps.deployment.outputs.page_url }}assets/version.json](${{ steps.deployment.outputs.page_url }}assets/version.json) |

          ## 📋 Available Resources
          - **Main Documentation**: [${{ steps.deployment.outputs.page_url }}](${{ steps.deployment.outputs.page_url }})
          - **Version Badge**: [${{ steps.deployment.outputs.page_url }}assets/version-badge.svg](${{ steps.deployment.outputs.page_url }}assets/version-badge.svg)
          - **Version**: `${{ needs.build-and-release.outputs.version-full }}`
          ${{ needs.build-and-release.outputs.release-url && format('- **Latest Release**: [View Release]({0})', needs.build-and-release.outputs.release-url) || '' }}
          EOF
