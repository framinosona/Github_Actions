name: "📦 Upload NuGet Package"
description: "Uploads a NuGet package to a specified feed using dotnet nuget push"
author: "Francois Raminosona"

inputs:
  # Arguments passed to dotnet
  working-directory:
    description: "Working directory for the push operation"
    required: false
    default: "."
  verbosity:
    description: "Verbosity level (quiet, minimal, normal, detailed, diagnostic)"
    required: false
    default: ""
  show-summary:
    description: "Whether to show the action summary"
    required: false
    default: "false"

  # Arguments unique to command
  package-path:
    description: "Path to the NuGet package file (.nupkg or .snupkg) or a wildcard pattern (e.g., 'bin/Release/*.nupkg')"
    required: true
  source:
    description: "NuGet server URL or source name to push to"
    required: false
    default: ""
  api-key:
    description: "API key for the NuGet server (use secrets for security)"
    required: false
    default: ""
  symbol-source:
    description: "Symbol server URL to push symbols to"
    required: false
    default: ""
  symbol-api-key:
    description: "API key for the symbol server (use secrets for security)"
    required: false
    default: ""
  timeout:
    description: "Timeout for the push operation in seconds"
    required: false
    default: "300"
  skip-duplicate:
    description: "Skip duplicate packages (true/false)"
    required: false
    default: "false"
  no-symbols:
    description: "Do not push symbols (true/false)"
    required: false
    default: "false"
  force-english-output:
    description: "Force English output for consistent parsing"
    required: false
    default: "true"

outputs:
  exit-code:
    description: "Exit code of the nuget push command"
    value: ${{ steps.run-dotnet.outputs.exit-code }}
  executed-command:
    description: "The actual command that was executed"
    value: ${{ steps.run-dotnet.outputs.executed-command }}

runs:
  using: "composite"
  steps:
    - name: "🔒 Mask sensitive data"
      shell: bash
      run: |
        # Mask sensitive data FIRST
        if [ -n "${{ inputs.api-key }}" ]; then
          echo "::add-mask::${{ inputs.api-key }}"
        fi
        if [ -n "${{ inputs.symbol-api-key }}" ]; then
          echo "::add-mask::${{ inputs.symbol-api-key }}"
        fi

        echo "✅ Masked sensitive inputs"

    - name: "✅ Validate input : booleans"
      shell: bash
      run: |
        echo "::debug::Validating boolean inputs"

        for param in skip-duplicate no-symbols force-english-output; do
          case $param in
            skip-duplicate) value="${{ inputs.skip-duplicate }}" ;;
            no-symbols) value="${{ inputs.no-symbols }}" ;;
            force-english-output) value="${{ inputs.force-english-output }}" ;;
          esac
          if [ -n "$value" ] && [ "$value" != "true" ] && [ "$value" != "false" ]; then
            echo "::error::Parameter $param must be 'true' or 'false', got: $value"
            exit 1
          fi
        done

        echo "::debug::Boolean inputs validation completed successfully"


    - name: "✅ Validate input : package-path"
      shell: bash
      run: |
        echo "::debug::Validating package-path input: ${{ inputs.package-path }}"

        # Validate package path is not empty
        if [ -z "${{ inputs.package-path }}" ]; then
          echo "::error::Package path cannot be empty"
          exit 1
        fi

        echo "::debug::Package path validation completed successfully"

    - name: "✅ Validate input : timeout"
      shell: bash
      run: |
        echo "::debug::Validating timeout input: ${{ inputs.timeout }}"

        if [ -n "${{ inputs.timeout }}" ]; then
          if ! [[ "${{ inputs.timeout }}" =~ ^[0-9]+$ ]]; then
            echo "::error::Timeout must be a positive number: ${{ inputs.timeout }}"
            exit 1
          fi
        fi

        echo "::debug::Timeout validation completed successfully"

    - name: "🏗️ Build argument list"
      id: build-args
      shell: bash
      run: |
        echo "::debug::Building argument list for NuGet package upload"

        # Start with base arguments
        ARGUMENTS="push '${{ inputs.package-path }}'"

        # Key-value options
        for param in source api-key symbol-source symbol-api-key; do
          case $param in
            source) value="${{ inputs.source }}" ;;
            api-key) value="${{ inputs.api-key }}" ;;
            symbol-source) value="${{ inputs.symbol-source }}" ;;
            symbol-api-key) value="${{ inputs.symbol-api-key }}" ;;
          esac
          if [ -n "$value" ]; then
            ARGUMENTS="$ARGUMENTS --$param '$value'"
          fi
        done

        # Timeout (only if different from default)
        if [ "${{ inputs.timeout }}" != "300" ]; then
          ARGUMENTS="$ARGUMENTS --timeout ${{ inputs.timeout }}"
        fi

        # Boolean flags
        for param in skip-duplicate no-symbols force-english-output; do
          case $param in
            skip-duplicate) value="${{ inputs.skip-duplicate }}" ;;
            no-symbols) value="${{ inputs.no-symbols }}" ;;
            force-english-output) value="${{ inputs.force-english-output }}" ;;
          esac
          if [ "$value" = "true" ]; then
            ARGUMENTS="$ARGUMENTS --${param}"
          fi
        done

        # Trim leading space
        ARGUMENTS="${ARGUMENTS# }"

        echo "arguments=$ARGUMENTS" >> $GITHUB_OUTPUT
        echo "::debug::Argument list built successfully: $ARGUMENTS"

    - name: "🔄 Execute NuGet package upload"
      id: run-dotnet
      uses: "framinosona/github_actions/dotnet@main"
      with:
        command: "nuget"
        arguments: ${{ steps.build-args.outputs.arguments }}
        working-directory: ${{ inputs.working-directory }}
        verbosity: ${{ inputs.verbosity }}
        show-summary: ${{ inputs.show-summary }}

    - name: "📊 Action Summary"
      if: always() && inputs.show-summary == 'true'
      shell: bash
      run: |
        cat >> $GITHUB_STEP_SUMMARY << 'EOF'
        <details><summary>📦 NuGet Upload : ${{ inputs.package-path }}</summary>

        ## 🔧 NuGet Upload Specific Parameters
        | Parameter | Value |
        |-----------|-------|
        | 📦 Package Path | `${{ inputs.package-path }}` |
        | 🔗 Source | `${{ inputs.source || 'default' }}` |
        | 🔑 API Key | `${{ inputs.api-key != '' && '***configured***' || 'not provided' }}` |
        | 🔣 Symbol Source | `${{ inputs.symbol-source || 'none' }}` |
        | 🔑 Symbol API Key | `${{ inputs.symbol-api-key != '' && '***configured***' || 'not provided' }}` |
        | ⏱️ Timeout | `${{ inputs.timeout }}s` |
        | � Skip Duplicate | `${{ inputs.skip-duplicate }}` |
        | 🚫 No Symbols | `${{ inputs.no-symbols }}` |
        | 🌍 Force English | `${{ inputs.force-english-output }}` |

        ## ⚙️ Process Details
        | Step | Status |
        |------|--------|
        | ✅ Input Validation | `✅ Completed` |
        | 🔨 Argument Building | `${{ steps.build-args.outcome == 'success' && '✅ Completed' || '❌ Failed' }}` |
        | ⚙️ Base Action Execution | `${{ steps.run-dotnet.outcome == 'success' && '✅ Completed' || '❌ Failed' }}` |

        ## 📤 Execution Results
        | Metric | Value |
        |--------|-------|
        | ✅ Exit Code | `${{ steps.run-dotnet.outputs.exit-code }}` |
        | 🔄 Executed Command | `${{ steps.run-dotnet.outputs.executed-command }}` |

        </details>
        EOF

branding:
  icon: "upload"
  color: "blue"

# Usage: dotnet nuget push [arguments] [options]

# Arguments:
#   [root]  Specify the path to the package and your API key to push the package to the server.

# Options:
#   -h|--help                      Show help information
#   --force-english-output         Forces the application to run using an invariant, English-based culture.
#   -s|--source <source>           Package source (URL, UNC/folder path or package source name) to use. Defaults to DefaultPushSource if specified in NuGet.Config.
#   -ss|--symbol-source <source>   Symbol server URL to use.
#   -t|--timeout <timeout>         Timeout for pushing to a server in seconds. Defaults to 300 seconds (5 minutes).
#   -k|--api-key <apiKey>          The API key for the server.
#   -sk|--symbol-api-key <apiKey>  The API key for the symbol server.
#   -d|--disable-buffering         Disable buffering when pushing to an HTTP(S) server to decrease memory usage.
#   -n|--no-symbols                If a symbols package exists, it will not be pushed to a symbols server.
#   --no-service-endpoint          Does not append "api/v2/package" to the source URL.
#   --interactive                  Allow the command to block and require manual action for operations like authentication.
#   --skip-duplicate               If a package and version already exists, skip it and continue with the next package in the push, if any.
#   --configfile                   The NuGet configuration file. If specified, only the settings from this file will be used. If not specified, the hierarchy of configuration files from the current directory will be used. For more information, see https://docs.microsoft.com/nuget/consume-packages/configuring-nuget-behavior.
