name: "📦 Upload NuGet Package"
description: "Uploads a NuGet package to a specified feed using dotnet nuget push"
author: 'Francois Raminosona'

inputs:
  package-path:
    description: "Path to the NuGet package file (.nupkg or .snupkg) to upload"
    required: true
  source:
    description: "NuGet server URL or source name to push to"
    required: false
    default: ""
  api-key:
    description: "API key for the NuGet server (use secrets for security)"
    required: false
    default: ""
  symbol-source:
    description: "Symbol server URL to push symbols to"
    required: false
    default: ""
  symbol-api-key:
    description: "API key for the symbol server (use secrets for security)"
    required: false
    default: ""
  timeout:
    description: "Timeout for the push operation in seconds"
    required: false
    default: "300"
  skip-duplicate:
    description: "Skip duplicate packages (true/false)"
    required: false
    default: "false"
  no-symbols:
    description: "Do not push symbols (true/false)"
    required: false
    default: "false"
  force-english-output:
    description: "Force English output for consistent parsing"
    required: false
    default: "true"
  working-directory:
    description: "Working directory for the push operation"
    required: false
    default: "."
  verbosity:
    description: "Verbosity level (quiet, minimal, normal, detailed, diagnostic)"
    required: false
    default: ""
  show-summary:
    description: 'Whether to show the action summary'
    required: false
    default: 'false'

outputs:
  exit-code:
    description: "Exit code of the nuget push command"
    value: ${{ steps.push-package.outputs.exit-code }}
  executed-command:
    description: "The actual command that was executed"
    value: ${{ steps.push-package.outputs.executed-command }}
  package-name:
    description: "Name of the package that was uploaded"
    value: ${{ steps.extract-info.outputs.package-name }}
  package-version:
    description: "Version of the package that was uploaded"
    value: ${{ steps.extract-info.outputs.package-version }}

runs:
  using: "composite"
  steps:
    - name: "✅ Validate inputs"
      shell: bash
      run: |
        echo "🔍 Validating inputs..."

        # Validate package path is not empty
        if [ -z "${{ inputs.package-path }}" ]; then
          echo "❌ Error: Package path cannot be empty"
          exit 1
        fi

        # Validate package file exists
        if [ ! -f "${{ inputs.package-path }}" ]; then
          echo "❌ Error: Package file not found: ${{ inputs.package-path }}"
          exit 1
        fi

        # Validate package file extension
        case "${{ inputs.package-path }}" in
          *.nupkg|*.snupkg) ;;
          *) echo "❌ Error: Package file must have .nupkg or .snupkg extension: ${{ inputs.package-path }}"; exit 1 ;;
        esac

        # Validate working directory exists
        if [ ! -d "${{ inputs.working-directory }}" ]; then
          echo "❌ Error: Working directory does not exist: ${{ inputs.working-directory }}"
          exit 1
        fi

        # Validate skip-duplicate flag
        case "${{ inputs.skip-duplicate }}" in
          true|false) ;;
          *) echo "❌ Error: Skip duplicate flag must be 'true' or 'false', got: ${{ inputs.skip-duplicate }}"; exit 1 ;;
        esac

        # Validate no-symbols flag
        case "${{ inputs.no-symbols }}" in
          true|false) ;;
          *) echo "❌ Error: No symbols flag must be 'true' or 'false', got: ${{ inputs.no-symbols }}"; exit 1 ;;
        esac

        # Validate force-english-output flag
        case "${{ inputs.force-english-output }}" in
          true|false) ;;
          *) echo "❌ Error: Force English output flag must be 'true' or 'false', got: ${{ inputs.force-english-output }}"; exit 1 ;;
        esac

        # Validate timeout is a positive number
        if [ -n "${{ inputs.timeout }}" ]; then
          if ! [[ "${{ inputs.timeout }}" =~ ^[0-9]+$ ]]; then
            echo "❌ Error: Timeout must be a positive number: ${{ inputs.timeout }}"
            exit 1
          fi
        fi

        # Validate verbosity level if specified
        if [ -n "${{ inputs.verbosity }}" ]; then
          case "${{ inputs.verbosity }}" in
            quiet|minimal|normal|detailed|diagnostic) ;;
            *) echo "❌ Error: Invalid verbosity level: ${{ inputs.verbosity }}. Must be one of: quiet, minimal, normal, detailed, diagnostic"; exit 1 ;;
          esac
        fi

        echo "✅ Input validation passed"

    - name: "📋 Extract package information"
      id: extract-info
      shell: bash
      run: |
        echo "🔍 Extracting package information..."

        PACKAGE_FILE="${{ inputs.package-path }}"
        PACKAGE_NAME="unknown"
        PACKAGE_VERSION="unknown"

        # Extract package name and version from filename
        # Standard NuGet package naming: PackageName.Version.nupkg
        BASENAME=$(basename "$PACKAGE_FILE" .nupkg)
        BASENAME=$(basename "$BASENAME" .snupkg)

        # Try to extract version (last part after final dot before potential prerelease)
        if [[ "$BASENAME" =~ ^(.+)\.([0-9]+\.[0-9]+\.[0-9]+.*)$ ]]; then
          PACKAGE_NAME="${BASH_REMATCH[1]}"
          PACKAGE_VERSION="${BASH_REMATCH[2]}"
          echo "✅ Extracted package: $PACKAGE_NAME version $PACKAGE_VERSION"
        else
          echo "⚠️ Could not parse package name and version from filename: $BASENAME"
          PACKAGE_NAME="$BASENAME"
        fi

        echo "package-name=$PACKAGE_NAME" >> $GITHUB_OUTPUT
        echo "package-version=$PACKAGE_VERSION" >> $GITHUB_OUTPUT

    - name: "🔧 Build arguments"
      id: build-args
      shell: bash
      run: |
        echo "🔧 Building dotnet nuget push arguments..."

        # Start with base arguments
        ARGS="push '${{ inputs.package-path }}'"

        # Add conditional arguments
        if [ -n "${{ inputs.source }}" ]; then
          ARGS="$ARGS --source '${{ inputs.source }}'"
        fi

        if [ -n "${{ inputs.api-key }}" ]; then
          ARGS="$ARGS --api-key '${{ inputs.api-key }}'"
        fi

        if [ -n "${{ inputs.symbol-source }}" ]; then
          ARGS="$ARGS --symbol-source '${{ inputs.symbol-source }}'"
        fi

        if [ -n "${{ inputs.symbol-api-key }}" ]; then
          ARGS="$ARGS --symbol-api-key '${{ inputs.symbol-api-key }}'"
        fi

        if [ "${{ inputs.timeout }}" != "300" ]; then
          ARGS="$ARGS --timeout ${{ inputs.timeout }}"
        fi

        if [ "${{ inputs.skip-duplicate }}" = "true" ]; then
          ARGS="$ARGS --skip-duplicate"
        fi

        if [ "${{ inputs.no-symbols }}" = "true" ]; then
          ARGS="$ARGS --no-symbols"
        fi

        if [ "${{ inputs.force-english-output }}" = "true" ]; then
          ARGS="$ARGS --force-english-output"
        fi

        echo "📋 Generated arguments: $ARGS"

        # Output the arguments string
        echo "arguments=$ARGS" >> $GITHUB_OUTPUT

    - name: "📦 Push NuGet package"
      id: push-package
      uses: ./dotnet
      with:
        command: "nuget"
        arguments: ${{ steps.build-args.outputs.arguments }}
        working-directory: ${{ inputs.working-directory }}
        force-verbosity: ${{ inputs.verbosity }}

    - name: "📊 Action Summary"
      if: always() && inputs.show-summary == 'true'
      shell: bash
      run: |
        cat >> $GITHUB_STEP_SUMMARY << 'EOF'
        <details><summary>Expand for details - 📊 NuGet Package Upload Summary</summary>

        ## 🔧 Input Parameters
        | Parameter | Value |
        |-----------|-------|
        | 📦 Package Path | `${{ inputs.package-path }}` |
        | 🔗 Source | `${{ inputs.source || 'default' }}` |
        | 🔑 API Key | `${{ inputs.api-key != '' && '***configured***' || 'not provided' }}` |
        | 🔣 Symbol Source | `${{ inputs.symbol-source || 'none' }}` |
        | 🔑 Symbol API Key | `${{ inputs.symbol-api-key != '' && '***configured***' || 'not provided' }}` |
        | ⏱️ Timeout | `${{ inputs.timeout }}s` |
        | 📁 Working Directory | `${{ inputs.working-directory }}` |

        ## 📤 Upload Results
        | Metric | Value |
        |--------|-------|
        | ✅ Exit Code | `${{ steps.push-package.outputs.exit-code }}` |
        | 📦 Package Name | `${{ steps.extract-info.outputs.package-name }}` |
        | 🏷️ Package Version | `${{ steps.extract-info.outputs.package-version }}` |
        | 🚀 Executed Command | `${{ steps.push-package.outputs.executed-command }}` |

        ## ⚙️ Upload Options
        | Option | Status |
        |--------|--------|
        | 🚫 Skip Duplicate | `${{ inputs.skip-duplicate }}` |
        | 🚫 No Symbols | `${{ inputs.no-symbols }}` |
        | 🌍 Force English | `${{ inputs.force-english-output }}` |

        ## ⚙️ Process Details
        | Step | Status |
        |------|--------|
        | ✅ Input Validation | `✅ Completed` |
        | 📋 Package Info Extraction | `${{ steps.extract-info.outcome == 'success' && '✅ Completed' || '❌ Failed' }}` |
        | 📦 Package Upload | `${{ steps.push-package.outputs.exit-code == '0' && '✅ Completed' || '❌ Failed' }}` |

        </details>
        EOF

branding:
  icon: 'upload'
  color: 'blue'
