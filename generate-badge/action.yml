name: "🏷️ Generate Badge"
description: "Generate static badges using shields.io with customizable styling and output options"
author: "Francois Raminosona"

inputs:
  label:
    description: "Left-hand side text of the badge (optional if using badge-content format)"
    required: false
    default: ""
  message:
    description: "Right-hand side text/message of the badge"
    required: true
  color:
    description: "Background color of the right part (hex, rgb, rgba, hsl, hsla and css named colors supported)"
    required: false
    default: "blue"
  label-color:
    description: "Background color of the left part (hex, rgb, rgba, hsl, hsla and css named colors supported)"
    required: false
    default: ""
  style:
    description: "Badge style - flat, flat-square, plastic, for-the-badge, social"
    required: false
    default: "flat"
  logo:
    description: "Icon slug from simple-icons (e.g., github, docker, node-dot-js)"
    required: false
    default: ""
  logo-color:
    description: "Color of the logo (hex, rgb, rgba, hsl, hsla and css named colors supported)"
    required: false
    default: ""
  logo-size:
    description: "Logo size - set to 'auto' for adaptive resizing"
    required: false
    default: ""
  output-file:
    description: "File path to save the badge URL (optional)"
    required: false
    default: ""
  output-format:
    description: "Output format - url, markdown, html, svg"
    required: false
    default: "svg"
  cache-seconds:
    description: "HTTP cache lifetime in seconds"
    required: false
    default: ""
  show-summary:
    description: "Whether to show the action summary"
    required: false
    default: "false"

outputs:
  badge-url:
    description: "The generated shields.io badge URL"
    value: ${{ steps.generate.outputs.badge-url }}
  badge-markdown:
    description: "Badge in Markdown format"
    value: ${{ steps.generate.outputs.badge-markdown }}
  badge-html:
    description: "Badge in HTML format"
    value: ${{ steps.generate.outputs.badge-html }}
  output-file-path:
    description: "Path to the output file if created"
    value: ${{ steps.download-svg-to-file.outputs.output-file-path }}
  svg-content:
    description: "The SVG content of the badge (when format is svg)"
    value: ${{ steps.generate.outputs.svg-content }}
  badge-url-generated:
    description: "Whether the badge URL was successfully generated"
    value: ${{ steps.verify-badge.outputs.badge-url-generated }}
  badge-formats-generated:
    description: "Whether badge formats were successfully generated"
    value: ${{ steps.verify-badge.outputs.badge-formats-generated }}
  output-file-created:
    description: "Whether the output file was successfully created"
    value: ${{ steps.verify-badge.outputs.output-file-created }}
  output-file-size:
    description: "Size of the created output file in bytes"
    value: ${{ steps.verify-badge.outputs.output-file-size }}

runs:
  using: "composite"
  steps:
    # ================== ℹ️ ==================
    - name: "ℹ️ Gather environment information"
      shell: bash
      run: |
        echo "::group::ℹ️ Environment Information"
        echo "::debug::Operating System: $(uname -a)"
        echo "::debug::GitHub Runner OS: $RUNNER_OS"
        echo "::debug::GitHub Runner Version: $RUNNER_VERSION"
        echo "::debug::curl availability: $(command -v curl >/dev/null 2>&1 && echo 'Available' || echo 'Not available')"
        echo "::debug::wget availability: $(command -v wget >/dev/null 2>&1 && echo 'Available' || echo 'Not available')"
        echo "::endgroup::"

    # ================== 🔒 ==================
    - name: "🔒 Mask sensitive data"
      shell: bash
      run: |
        # No sensitive inputs to mask in this action
        echo "✅ No sensitive data to mask"

    # ================== 📁 ==================
    - name: "📁 Normalize output-file path"
      id: normalize-output-file
      uses: framinosona/github_actions/normalize-path@main
      with:
        path: ${{ inputs.output-file }}

    # ================== ✅ ==================
    - name: "✅ Validate input : required parameters"
      shell: bash
      run: |
        echo "::debug::Validating required parameters..."

        # Validate required message parameter
        if [ -z "${{ inputs.message }}" ]; then
          echo "::error::Message parameter is required"
          exit 1
        fi

        echo "✅ Required parameters validation completed successfully"

    - name: "✅ Validate input : booleans"
      shell: bash
      run: |
        echo "::debug::Validating boolean inputs..."
        for param in show-summary; do
          case $param in
            show-summary) value="${{ inputs.show-summary }}" ;;
          esac
          if [ -n "$value" ] && [ "$value" != "true" ] && [ "$value" != "false" ]; then
            echo "::error::Parameter $param must be 'true' or 'false', got: $value"
            exit 1
          fi
        done

        echo "✅ Boolean inputs validation completed successfully"

    - name: "✅ Validate input : style"
      shell: bash
      run: |
        echo "::debug::Validating style input: ${{ inputs.style }}"

        case "${{ inputs.style }}" in
          flat|flat-square|plastic|for-the-badge|social) ;;
          *) echo "::error::Invalid style. Must be one of: flat, flat-square, plastic, for-the-badge, social"; exit 1 ;;
        esac

        echo "✅ Style validation completed successfully"

    - name: "✅ Validate input : output-format"
      shell: bash
      run: |
        echo "::debug::Validating output-format input: ${{ inputs.output-format }}"

        case "${{ inputs.output-format }}" in
          url|markdown|html|svg) ;;
          *) echo "::error::Invalid output format. Must be one of: url, markdown, html, svg"; exit 1 ;;
        esac

        echo "✅ Output format validation completed successfully"

    - name: "✅ Validate input : colors"
      if: ${{ inputs.color != '' || inputs.label-color != '' || inputs.logo-color != '' }}
      shell: bash
      run: |
        echo "::debug::Validating color inputs..."

        # Validate color formats (hex, rgb, rgba, hsl, hsla, css named colors)
        validate_color() {
          local color="$1"
          local param_name="$2"

          if [ -n "$color" ]; then
            # Check for hex colors (with or without #)
            if [[ "$color" =~ ^#?[0-9a-fA-F]{3}$ ]] || [[ "$color" =~ ^#?[0-9a-fA-F]{6}$ ]]; then
              return 0
            # Check for rgb/rgba format - parentheses must be escaped in regex
            elif [[ "$color" =~ ^rgba?\\([0-9\ ,./]+\\)$ ]]; then
              return 0
            # Check for hsl/hsla format - parentheses must be escaped in regex
            elif [[ "$color" =~ ^hsla?\\([0-9\ ,./%]+\\)$ ]]; then
              return 0
            # Check for CSS named colors (basic validation)
            elif [[ "$color" =~ ^[a-zA-Z]+$ ]]; then
              return 0
            else
              echo "::error::Invalid $param_name color format: $color. Use hex, rgb, rgba, hsl, hsla, or CSS named colors"
              exit 1
            fi
          fi
        }

        validate_color "${{ inputs.color }}" "color"
        validate_color "${{ inputs.label-color }}" "label-color"
        validate_color "${{ inputs.logo-color }}" "logo-color"

        echo "✅ Colors validation completed successfully"

    - name: "✅ Validate input : logo"
      if: ${{ inputs.logo != '' }}
      shell: bash
      run: |
        echo "::debug::Validating logo input: ${{ inputs.logo }}"

        # Logo should be a valid simple-icons slug (lowercase, hyphens allowed)
        if [[ ! "${{ inputs.logo }}" =~ ^[a-z0-9-]+$ ]]; then
          echo "::error::Invalid logo format. Use simple-icons slug format (lowercase, hyphens allowed): ${{ inputs.logo }}"
          exit 1
        fi

        echo "✅ Logo validation completed successfully"

    - name: "✅ Validate input : cache-seconds"
      if: ${{ inputs.cache-seconds != '' }}
      shell: bash
      run: |
        echo "::debug::Validating cache-seconds input: ${{ inputs.cache-seconds }}"

        if ! [[ "${{ inputs.cache-seconds }}" =~ ^[0-9]+$ ]]; then
          echo "::error::cache-seconds must be a numeric value, got: ${{ inputs.cache-seconds }}"
          exit 1
        fi

        # Validate reasonable range (0 to 1 year in seconds)
        if [ "${{ inputs.cache-seconds }}" -gt 31536000 ]; then
          echo "::warning::cache-seconds value is very high (>1 year): ${{ inputs.cache-seconds }}"
        fi

        echo "✅ Cache seconds validation completed successfully"

    - name: "✅ Validate input : output-file"
      if: ${{ inputs.output-file != '' }}
      shell: bash
      run: |
        echo "::debug::Validating output-file input: ${{ steps.normalize-output-file.outputs.normalized }}"

        # Validate file extension matches output format
        case "${{ inputs.output-format }}" in
          url)
            if [[ ! "${{ steps.normalize-output-file.outputs.normalized }}" =~ \.(txt|url)$ ]]; then
              echo "::warning::URL format typically uses .txt or .url extension"
            fi
            ;;
          markdown)
            if [[ ! "${{ steps.normalize-output-file.outputs.normalized }}" =~ \.(md|markdown)$ ]]; then
              echo "::warning::Markdown format typically uses .md or .markdown extension"
            fi
            ;;
          html)
            if [[ ! "${{ steps.normalize-output-file.outputs.normalized }}" =~ \.html?$ ]]; then
              echo "::warning::HTML format typically uses .html or .htm extension"
            fi
            ;;
          svg)
            if [[ ! "${{ steps.normalize-output-file.outputs.normalized }}" =~ \.svg$ ]]; then
              echo "::warning::SVG format should use .svg extension"
            fi
            ;;
        esac

        # Validate output directory exists or can be created
        output_dir=$(dirname "${{ steps.normalize-output-file.outputs.normalized }}")
        if [ "$output_dir" != "." ] && [ ! -d "$output_dir" ]; then
          echo "::debug::Output directory will be created: $output_dir"
        fi

        echo "✅ Output file validation completed successfully"

    # ================== 🚀 ==================
    - name: "🛠️ Build badge URL"
      id: build-url
      shell: bash
      run: |
        echo "::debug::Building shields.io badge URL..."

        # URL encode function for shields.io format
        url_encode() {
          echo "$1" | sed 's/ /%20/g' | sed 's/_/__/g' | sed 's/-/--/g'
        }

        # Build badge content
        if [ -n "${{ inputs.label }}" ]; then
          # Label-Message-Color format
          label_encoded=$(url_encode "${{ inputs.label }}")
          message_encoded=$(url_encode "${{ inputs.message }}")
          badge_content="${label_encoded}-${message_encoded}-${{ inputs.color }}"
          echo "::debug::Using label-message format: $badge_content"
        else
          # Message-Color format
          message_encoded=$(url_encode "${{ inputs.message }}")
          badge_content="${message_encoded}-${{ inputs.color }}"
          echo "::debug::Using message-only format: $badge_content"
        fi

        # Build base URL
        base_url="https://img.shields.io/badge/${badge_content}"

        # Build query parameters
        params=""

        # Add style parameter (only if not default)
        if [ -n "${{ inputs.style }}" ] && [ "${{ inputs.style }}" != "flat" ]; then
          params="${params}&style=${{ inputs.style }}"
          echo "::debug::Adding style parameter: ${{ inputs.style }}"
        fi

        # Add logo parameters
        if [ -n "${{ inputs.logo }}" ]; then
          params="${params}&logo=${{ inputs.logo }}"
          echo "::debug::Adding logo parameter: ${{ inputs.logo }}"
        fi

        if [ -n "${{ inputs.logo-color }}" ]; then
          # URL encode logo color for special characters
          logo_color_encoded=$(echo "${{ inputs.logo-color }}" | sed 's/#/%23/g')
          params="${params}&logoColor=${logo_color_encoded}"
          echo "::debug::Adding logo color parameter: ${{ inputs.logo-color }}"
        fi

        if [ -n "${{ inputs.logo-size }}" ]; then
          params="${params}&logoSize=${{ inputs.logo-size }}"
          echo "::debug::Adding logo size parameter: ${{ inputs.logo-size }}"
        fi

        # Add label color
        if [ -n "${{ inputs.label-color }}" ]; then
          # URL encode label color for special characters
          label_color_encoded=$(echo "${{ inputs.label-color }}" | sed 's/#/%23/g')
          params="${params}&labelColor=${label_color_encoded}"
          echo "::debug::Adding label color parameter: ${{ inputs.label-color }}"
        fi

        # Add cache seconds
        if [ -n "${{ inputs.cache-seconds }}" ]; then
          params="${params}&cacheSeconds=${{ inputs.cache-seconds }}"
          echo "::debug::Adding cache seconds parameter: ${{ inputs.cache-seconds }}"
        fi

        # Remove leading & if params exist
        if [ -n "$params" ]; then
          params="?${params#&}"
        fi

        # Complete URL
        badge_url="${base_url}${params}"

        echo "badge-url=$badge_url" >> $GITHUB_OUTPUT
        echo "✅ Badge URL built successfully: $badge_url"

    - name: "🏷️ Generate badge formats"
      id: generate
      shell: bash
      run: |
        echo "::debug::Generating badge in multiple formats..."

        # Get URL from build step
        badge_url="${{ steps.build-url.outputs.badge-url }}"
        echo "::debug::Using badge URL: $badge_url"

        # Generate alt text for accessibility
        if [ -n "${{ inputs.label }}" ]; then
          alt_text="${{ inputs.label }}: ${{ inputs.message }}"
        else
          alt_text="${{ inputs.message }}"
        fi

        # Generate different formats
        badge_markdown="![${alt_text}](${badge_url})"
        badge_html="<img src=\"${badge_url}\" alt=\"${alt_text}\" />"

        # Set basic outputs
        echo "badge-url=${badge_url}" >> $GITHUB_OUTPUT
        echo "badge-markdown=${badge_markdown}" >> $GITHUB_OUTPUT
        echo "badge-html=${badge_html}" >> $GITHUB_OUTPUT

        echo "✅ Badge formats generated successfully"

    - name: "📥 Download SVG content"
      id: download-svg-to-file
      if: ${{ inputs.output-format == 'svg' && inputs.output-file != '' }}
      shell: bash
      run: |
        echo "::debug::Downloading SVG content from shields.io to file: ${{ steps.normalize-output-file.outputs.normalized }}"

        badge_url="${{ steps.build-url.outputs.badge-url }}"
        svg_content=""

        # Create output directory if needed
        output_dir=$(dirname "${{ steps.normalize-output-file.outputs.normalized }}")
        if [ "$output_dir" != "." ] && [ ! -d "$output_dir" ]; then
          echo "::debug::Creating output directory: $output_dir"
          mkdir -p "$output_dir"
        fi

        # Try curl first, then wget as fallback
        if command -v curl >/dev/null 2>&1; then
          echo "::debug::Using curl to download SVG"
          svg_content=$(curl -s -f "${badge_url}" 2>/dev/null)
          curl_exit_code=$?
        elif command -v wget >/dev/null 2>&1; then
          echo "::debug::Using wget to download SVG"
          svg_content=$(wget -qO- "${badge_url}" 2>/dev/null)
          curl_exit_code=$?
        else
          echo "::error::Neither curl nor wget is available for downloading SVG content"
          exit 1
        fi

        # Validate SVG content
        if [ $curl_exit_code -eq 0 ] && [ -n "$svg_content" ] && [[ "$svg_content" =~ \<svg ]]; then
          echo "✅ SVG content downloaded successfully"
          echo "${svg_content}" > "${{ steps.normalize-output-file.outputs.normalized }}"
        else
          echo "::error::Failed to download valid SVG content from shields.io"
          echo "::debug::Response: ${svg_content:0:200}..."
          exit 1
        fi

        # Get absolute path and set output
        output_file_full_path=$(realpath "${{ steps.normalize-output-file.outputs.normalized }}")
        echo "output-file-path=${output_file_full_path}" >> $GITHUB_OUTPUT
        echo "✅ Badge saved to: ${output_file_full_path}"

    # ================== � ==================
    - name: "🔍 Verify badge generation"
      id: verify-badge
      shell: bash
      run: |
        echo "::debug::Verifying badge generation results..."

        # Verify badge URL was generated
        if [ -n "${{ steps.build-url.outputs.badge-url }}" ]; then
          echo "✅ Badge URL generated successfully"
          echo "badge-url-generated=true" >> $GITHUB_OUTPUT
        else
          echo "❌ Badge URL was not generated"
          echo "badge-url-generated=false" >> $GITHUB_OUTPUT
        fi

        # Verify badge formats were generated
        if [ -n "${{ steps.generate.outputs.badge-markdown }}" ] && [ -n "${{ steps.generate.outputs.badge-html }}" ]; then
          echo "✅ Badge formats generated successfully"
          echo "badge-formats-generated=true" >> $GITHUB_OUTPUT
        else
          echo "❌ Badge formats were not generated properly"
          echo "badge-formats-generated=false" >> $GITHUB_OUTPUT
        fi

        # Verify output file if requested
        if [ -n "${{ inputs.output-file }}" ]; then
          if [ -f "${{ steps.normalize-output-file.outputs.normalized }}" ]; then
            file_size=$(wc -c < "${{ steps.normalize-output-file.outputs.normalized }}" 2>/dev/null || echo "0")
            echo "✅ Output file created: ${{ steps.normalize-output-file.outputs.normalized }} ($file_size bytes)"
            echo "output-file-created=true" >> $GITHUB_OUTPUT
            echo "output-file-size=$file_size" >> $GITHUB_OUTPUT
          else
            echo "❌ Output file was not created: ${{ steps.normalize-output-file.outputs.normalized }}"
            echo "output-file-created=false" >> $GITHUB_OUTPUT
            echo "output-file-size=0" >> $GITHUB_OUTPUT
          fi
        else
          echo "⏭️ No output file requested"
          echo "output-file-created=not-requested" >> $GITHUB_OUTPUT
          echo "output-file-size=0" >> $GITHUB_OUTPUT
        fi

        echo "::debug::Badge generation verification completed"

    # ================== �📊 ==================
    - name: "📊 Action Summary"
      if: always() && inputs.show-summary == 'true'
      shell: bash
      run: |
        # Determine final status
        if [ "${{ steps.generate.outcome }}" = "success" ]; then
          status_icon="✅"
          status_text="Success"
        else
          status_icon="❌"
          status_text="Failed"
        fi

        cat >> $GITHUB_STEP_SUMMARY << 'EOF'
        <details><summary>🏷️ Generate Badge: ${{ inputs.label || inputs.message }}</summary>

        ## 🔧 Input Parameters
        | Parameter | Value |
        |-----------|-------|
        | 🏷️ Label | `${{ inputs.label || '(none)' }}` |
        | 💬 Message | `${{ inputs.message }}` |
        | 🎨 Color | `${{ inputs.color }}` |
        | 🎨 Label Color | `${{ inputs.label-color || '(default)' }}` |
        | 🎭 Style | `${{ inputs.style }}` |
        | 🔗 Logo | `${{ inputs.logo || '(none)' }}` |
        | 🎨 Logo Color | `${{ inputs.logo-color || '(default)' }}` |
        | 📏 Logo Size | `${{ inputs.logo-size || '(default)' }}` |
        | 📁 Output File | `${{ steps.normalize-output-file.outputs.normalized || '(none)' }}` |
        | 📋 Output Format | `${{ inputs.output-format }}` |
        | ⏱️ Cache Seconds | `${{ inputs.cache-seconds || '(default)' }}` |

        ## 📤 Badge Results
        | Metric | Value |
        |--------|-------|
        | 🌐 Badge URL | [${{ steps.generate.outputs.badge-url }}](${{ steps.generate.outputs.badge-url }}) |
        | 📝 Markdown | `${{ steps.generate.outputs.badge-markdown }}` |
        | 🔗 HTML | `${{ steps.generate.outputs.badge-html }}` |
        | 📁 Output File Created | `${{ steps.verify-badge.outputs.output-file-created }}` |
        | 📏 Output File Size | `${{ steps.verify-badge.outputs.output-file-size }} bytes` |
        | 📁 Output File Path | `${{ steps.download-svg-to-file.outputs.output-file-path || '(not created)' }}` |

        ## 🖼️ Badge Preview
        ${{ steps.generate.outputs.badge-markdown }}

        ## ⚙️ Process Details
        | Step | Status |
        |------|--------|
        | ✅ Input Validation | `✅ Completed` |
        | 🛠️ URL Building | `${{ steps.build-url.outcome == 'success' && '✅ Completed' || '❌ Failed' }}` |
        | 🏷️ Format Generation | `${{ steps.generate.outcome == 'success' && '✅ Completed' || '❌ Failed' }}` |
        | 📥 SVG Download | `${{ (inputs.output-format == 'svg' && inputs.output-file != '') && (steps.download-svg-to-file.outcome == 'success' && '✅ Completed' || '❌ Failed') || '⏭️ Skipped' }}` |
        | � Badge Verification | `${{ steps.verify-badge.outcome == 'success' && '✅ Completed' || '❌ Failed' }}` |

        </details>
        EOF
      env:
        status_icon: ${{ steps.generate.outcome == 'success' && '✅' || '❌' }}
        status_text: ${{ steps.generate.outcome == 'success' && 'Success' || 'Failed' }}

branding:
  icon: "award"
  color: "blue"
