name: "🔧 .NET > Install Tool"
description: "Installs a .NET global or local tool with automatic tool manifest creation"
author: 'Francois Raminosona'

inputs:
  tool-name:
    description: "Name of the .NET tool to install (e.g., 'dotnet-ef', 'dotnet-outdated')"
    required: true
  tool-version:
    description: "Specific version of the tool to install (optional, uses latest if not specified)"
    required: false
    default: ""
  global:
    description: "Install as global tool (true) or local tool (false)"
    required: false
    default: "false"
  prerelease:
    description: "Include prerelease versions when searching for the tool"
    required: false
    default: "false"
  working-directory:
    description: "Working directory for the installation (only relevant for local tools)"
    required: false
    default: "."
  tool-path:
    description: "Custom tool path for global tool installation"
    required: false
    default: ""
  add-source:
    description: "Additional NuGet source to use when installing the tool"
    required: false
    default: ""
  configfile:
    description: "NuGet configuration file to use"
    required: false
    default: ""
  framework:
    description: "Target framework for the tool"
    required: false
    default: ""
  verbosity:
    description: "Verbosity level (quiet, minimal, normal, detailed, diagnostic)"
    required: false
    default: ""
  show-summary:
    description: 'Whether to show the action summary'
    required: false
    default: 'false'

outputs:
  exit-code:
    description: "Exit code of the tool installation command"
    value: ${{ steps.install-tool.outputs.exit-code }}
  executed-command:
    description: "The actual command that was executed"
    value: ${{ steps.install-tool.outputs.executed-command }}
  tool-manifest-created:
    description: "Whether a new tool manifest was created"
    value: ${{ steps.create-manifest.outputs.manifest-created }}
  installed-version:
    description: "The version of the tool that was installed"
    value: ${{ steps.install-tool.outputs.installed-version }}

runs:
  using: "composite"
  steps:
    - name: "✅ Validate inputs"
      shell: bash
      run: |
        echo "::group::🔍 .NET Tool Installation Input Validation"
        echo "::debug::Validating inputs for .NET tool installation"

        # Validate tool name is not empty
        if [ -z "${{ inputs.tool-name }}" ]; then
          echo "::error::Tool name cannot be empty"
          exit 1
        fi

        # Validate working directory exists
        if [ ! -d "${{ inputs.working-directory }}" ]; then
          echo "::error::Working directory does not exist: ${{ inputs.working-directory }}"
          exit 1
        fi

        # Validate global flag
        case "${{ inputs.global }}" in
          true|false) ;;
          *) echo "::error::Global flag must be 'true' or 'false', got: ${{ inputs.global }}"; exit 1 ;;
        esac

        # Validate prerelease flag
        case "${{ inputs.prerelease }}" in
          true|false) ;;
          *) echo "::error::Prerelease flag must be 'true' or 'false', got: ${{ inputs.prerelease }}"; exit 1 ;;
        esac

        # Validate verbosity level if specified
        if [ -n "${{ inputs.verbosity }}" ]; then
          case "${{ inputs.verbosity }}" in
            quiet|minimal|normal|detailed|diagnostic) ;;
            *) echo "::error::Invalid verbosity level: ${{ inputs.verbosity }}. Must be one of: quiet, minimal, normal, detailed, diagnostic"; exit 1 ;;
          esac
        fi

        # Validate configfile exists if specified
        if [ -n "${{ inputs.configfile }}" ] && [ ! -f "${{ inputs.configfile }}" ]; then
          echo "::error file=${{ inputs.configfile }}::Configuration file not found: ${{ inputs.configfile }}"
          exit 1
        fi

        echo "::notice::Input validation completed successfully"
        echo "::endgroup::"

    - name: "📝 Create tool manifest if needed"
      id: create-manifest
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: |
        echo "::group::📝 Creating Tool Manifest"
        echo "::debug::Checking for tool manifest file"

        MANIFEST_CREATED="false"

        # Only check for manifest if installing as local tool
        if [ "${{ inputs.global }}" = "false" ]; then
          # Check if tool manifest exists, create if not
          if [ ! -f .config/dotnet-tools.json ]; then
            echo "::debug::Creating tool manifest"
            dotnet new tool-manifest
            if [ $? -eq 0 ]; then
              MANIFEST_CREATED="true"
              echo "::notice::Tool manifest created successfully"
            else
              echo "::error::Failed to create tool manifest"
              exit 1
            fi
          else
            echo "::debug::Tool manifest already exists"
          fi
        else
          echo "::debug::Installing as global tool - no manifest needed"
        fi

        echo "manifest-created=$MANIFEST_CREATED" >> $GITHUB_OUTPUT
        echo "::endgroup::"

    - name: "🔧 Build arguments"
      id: build-args
      shell: bash
      run: |
        echo "::group::🔧 Building Tool Installation Arguments"
        echo "::debug::Building dotnet arguments for tool installation"

        run: |
        echo "::group::🔧 Building Tool Installation Arguments"
        echo "::debug::Building dotnet arguments for tool installation"

        # Start with base arguments
        ARGS="install '${{ inputs.tool-name }}'"

        # Add conditional arguments
        if [ -n "${{ inputs.tool-version }}" ]; then
          ARGS="$ARGS --version '${{ inputs.tool-version }}'"
        fi

        if [ "${{ inputs.global }}" = "true" ]; then
          ARGS="$ARGS --global"
        fi

        if [ "${{ inputs.prerelease }}" = "true" ]; then
          ARGS="$ARGS --prerelease"
        fi

        if [ -n "${{ inputs.tool-path }}" ]; then
          ARGS="$ARGS --tool-path '${{ inputs.tool-path }}'"
        fi

        if [ -n "${{ inputs.add-source }}" ]; then
          ARGS="$ARGS --add-source '${{ inputs.add-source }}'"
        fi

        if [ -n "${{ inputs.configfile }}" ]; then
          ARGS="$ARGS --configfile '${{ inputs.configfile }}'"
        fi

        if [ -n "${{ inputs.framework }}" ]; then
          ARGS="$ARGS --framework '${{ inputs.framework }}'"
        fi

        echo "::debug::Generated arguments: $ARGS"

        # Output the arguments string
        echo "arguments=$ARGS" >> $GITHUB_OUTPUT
        echo "::endgroup::"

    - name: "🔧 Install .NET tool"
      id: install-tool
      uses: ./dotnet
      with:
        command: "tool"
        arguments: ${{ steps.build-args.outputs.arguments }}
        working-directory: ${{ inputs.working-directory }}
        force-verbosity: ${{ inputs.verbosity }}

    - name: "🔍 Extract installed version"
      id: extract-version
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: |
        echo "::group::🔍 Extracting Tool Version"
        echo "::debug::Extracting installed tool version information"

        INSTALLED_VERSION="unknown"

        # Try to get the installed version
        if [ "${{ inputs.global }}" = "true" ]; then
          # For global tools, list global tools
          VERSION_OUTPUT=$(dotnet tool list --global | grep "${{ inputs.tool-name }}" | awk '{print $2}' || echo "")
        else
          # For local tools, list local tools
          VERSION_OUTPUT=$(dotnet tool list | grep "${{ inputs.tool-name }}" | awk '{print $2}' || echo "")
        fi

        if [ -n "$VERSION_OUTPUT" ]; then
          INSTALLED_VERSION="$VERSION_OUTPUT"
          echo "::notice::Detected installed version: $INSTALLED_VERSION"
        else
          echo "::warning::Could not determine installed tool version"
        fi

        echo "installed-version=$INSTALLED_VERSION" >> $GITHUB_OUTPUT
        echo "::endgroup::"

    - name: "📊 Action Summary"
      if: always() && inputs.show-summary == 'true'
      shell: bash
      run: |
        cat >> $GITHUB_STEP_SUMMARY << 'EOF'
        <details><summary>Expand for details - 📊 .NET Tool Installation Summary</summary>

        ## 🔧 Input Parameters
        | Parameter | Value |
        |-----------|-------|
        | 🔧 Tool Name | `${{ inputs.tool-name }}` |
        | 📦 Tool Version | `${{ inputs.tool-version || 'latest' }}` |
        | 🌍 Global Install | `${{ inputs.global }}` |
        | 🧪 Include Prerelease | `${{ inputs.prerelease }}` |
        | 📁 Working Directory | `${{ inputs.working-directory }}` |
        | 🛤️ Tool Path | `${{ inputs.tool-path || 'default' }}` |
        | 🔗 Additional Source | `${{ inputs.add-source || 'none' }}` |
        | ⚙️ Config File | `${{ inputs.configfile || 'default' }}` |
        | 🎯 Framework | `${{ inputs.framework || 'default' }}` |

        ## 📤 Installation Results
        | Metric | Value |
        |--------|-------|
        | ✅ Exit Code | `${{ steps.install-tool.outputs.exit-code }}` |
        | 📦 Installed Version | `${{ steps.extract-version.outputs.installed-version }}` |
        | 📝 Manifest Created | `${{ steps.create-manifest.outputs.manifest-created }}` |
        | 🚀 Executed Command | `${{ steps.install-tool.outputs.executed-command }}` |

        ## ⚙️ Process Details
        | Step | Status |
        |------|--------|
        | ✅ Input Validation | `✅ Completed` |
        | 📝 Manifest Creation | `${{ steps.create-manifest.outcome == 'success' && '✅ Completed' || '❌ Failed' }}` |
        | 🔧 Tool Installation | `${{ steps.install-tool.outputs.exit-code == '0' && '✅ Completed' || '❌ Failed' }}` |
        | 🔍 Version Detection | `${{ steps.extract-version.outcome == 'success' && '✅ Completed' || '❌ Failed' }}` |

        </details>
        EOF

branding:
  icon: 'settings'
  color: 'blue'
