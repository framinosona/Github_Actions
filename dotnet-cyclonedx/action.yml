name: "üìÑ Generate CycloneDX SBOM"
description: "Generates Software Bill of Materials (SBOM) using CycloneDX .NET Global Tool"
author: "Francois Raminosona"

inputs:
  path:
    description: "Path to a .sln, .slnf, .slnx, .csproj, .fsproj, .vbproj, .xsproj, or packages.config file or directory"
    required: true
  framework:
    description: "Target framework to use. If not defined, all will be aggregated"
    required: false
    default: ""
  runtime:
    description: "Runtime to use. If not defined, all will be aggregated"
    required: false
    default: ""
  output:
    description: "Directory to write the BOM"
    required: false
    default: "${{ github.workspace }}/output/sbom"
  filename:
    description: "Filename for the BOM"
    required: false
    default: "bom.xml"
  output-format:
    description: "BOM output format"
    required: false
    default: "Auto"
  exclude-dev:
    description: "Exclude development dependencies from the BOM"
    required: false
    default: "true"
  exclude-test-projects:
    description: "Exclude test projects from the BOM"
    required: false
    default: "true"
  recursive:
    description: "Recursively scan project references"
    required: false
    default: "false"
  include-project-references:
    description: "Include project references as components"
    required: false
    default: "false"
  no-serial-number:
    description: "Omit the serial number from the resulting BOM"
    required: false
    default: "false"
  disable-package-restore:
    description: "Disable package restore"
    required: false
    default: "false"
  disable-hash-computation:
    description: "Disable hash computation for packages"
    required: false
    default: "false"
  set-name:
    description: "Override the autogenerated BOM metadata component name"
    required: false
    default: ""
  set-version:
    description: "Override the default BOM metadata component version"
    required: false
    default: ""
  set-type:
    description: "Override the default BOM metadata component type"
    required: false
    default: "Application"
  dotnet-command-timeout:
    description: "dotnet command timeout in milliseconds"
    required: false
    default: "300000"
  github-username:
    description: "GitHub username for license resolution"
    required: false
    default: ""
  github-token:
    description: "GitHub personal access token for license resolution"
    required: false
    default: ""
  github-bearer-token:
    description: "GitHub bearer token for license resolution"
    required: false
    default: ""
  enable-github-licenses:
    description: "Enable GitHub license resolution"
    required: false
    default: "false"
  nuget-url:
    description: "Alternative NuGet repository URL"
    required: false
    default: ""
  nuget-username:
    description: "Alternative NuGet repository username"
    required: false
    default: ""
  nuget-password:
    description: "Alternative NuGet repository password/apikey"
    required: false
    default: ""
  nuget-password-clear-text:
    description: "NuGet repository password is cleartext"
    required: false
    default: "false"
  base-intermediate-output-path:
    description: "Custom build environment folder (if obj folder is relocated)"
    required: false
    default: ""
  import-metadata-path:
    description: "Metadata template path with project specific details"
    required: false
    default: ""
  exclude-filter:
    description: "Comma separated list of dependencies to exclude (name1@version1,name2@version2)"
    required: false
    default: ""
  cyclonedx-version:
    description: "Version of CycloneDX tool to install"
    required: false
    default: ""
  show-summary:
    description: 'Whether to show the action summary'
    required: false
    default: 'false'

outputs:
  sbom-path:
    description: "Full path to the generated SBOM file"
    value: ${{ steps.analyze.outputs.sbom-path }}
  sbom-size:
    description: "Size of the generated SBOM file in bytes"
    value: ${{ steps.analyze.outputs.sbom-size }}
  dependencies-count:
    description: "Number of dependencies found in the SBOM"
    value: ${{ steps.analyze.outputs.dependencies-count }}
  output-format:
    description: "Actual output format used"
    value: ${{ steps.analyze.outputs.output-format }}

runs:
  using: "composite"
  steps:
    - name: "‚úÖ Validate inputs"
      shell: bash
      run: |
        echo "::group::üîç CycloneDX Input Validation"
        echo "::debug::Validating CycloneDX inputs for SBOM generation"

        # Validate required path parameter
        if [ -z "${{ inputs.path }}" ]; then
          echo "::error::Path parameter is required"
          exit 1
        fi

        # Validate path exists
        if [ ! -e "${{ inputs.path }}" ]; then
          echo "::error file=${{ inputs.path }}::Specified path does not exist: ${{ inputs.path }}"
          exit 1
        fi

                # Validate output format if specified
        if [ -n "${{ inputs.output-format }}" ]; then
          case "${{ inputs.output-format }}" in
            Auto|xml|json|csv|spdx-tag|spdx-json) ;;
            *) echo "::error::Invalid output format: ${{ inputs.output-format }}. Must be one of: Auto, xml, json, csv, spdx-tag, spdx-json"; exit 1 ;;
          esac
        fi

        # Validate set-type if specified
        if [ -n "${{ inputs.set-type }}" ]; then
          case "${{ inputs.set-type }}" in
            Application|Library|Framework|File|Container|OS|Device|Firmware|Platform) ;;
            *) echo "::warning::Unusual component type: ${{ inputs.set-type }}" ;;
          esac
        fi

                # Validate timeout is numeric
        if [ -n "${{ inputs.dotnet-command-timeout }}" ]; then
          if ! [[ "${{ inputs.dotnet-command-timeout }}" =~ ^[0-9]+$ ]]; then
            echo "::error::Timeout must be a numeric value in milliseconds, got: ${{ inputs.dotnet-command-timeout }}"
            exit 1
          fi
        fi

        # Validate GitHub credentials are paired
        if [ -n "${{ inputs.github-username }}" ] && [ -z "${{ inputs.github-token }}" ] && [ -z "${{ inputs.github-bearer-token }}" ]; then
          echo "::error::GitHub username provided but no token specified"
          exit 1
        fi

        # Validate NuGet credentials
        if [ -n "${{ inputs.nuget-username }}" ] && [ -z "${{ inputs.nuget-password }}" ]; then
          echo "::error::NuGet username provided but no password specified"
          exit 1
        fi

        # Validate boolean inputs
        for param in exclude-dev exclude-test-projects recursive include-project-references no-serial-number disable-package-restore disable-hash-computation enable-github-licenses nuget-password-clear-text; do
          case $param in
            exclude-dev) value="${{ inputs.exclude-dev }}" ;;
            exclude-test-projects) value="${{ inputs.exclude-test-projects }}" ;;
            recursive) value="${{ inputs.recursive }}" ;;
            include-project-references) value="${{ inputs.include-project-references }}" ;;
            no-serial-number) value="${{ inputs.no-serial-number }}" ;;
            disable-package-restore) value="${{ inputs.disable-package-restore }}" ;;
            disable-hash-computation) value="${{ inputs.disable-hash-computation }}" ;;
            enable-github-licenses) value="${{ inputs.enable-github-licenses }}" ;;
            nuget-password-clear-text) value="${{ inputs.nuget-password-clear-text }}" ;;
          esac
          if [ -n "$value" ] && [ "$value" != "true" ] && [ "$value" != "false" ]; then
            echo "‚ùå Error: Parameter $param must be 'true' or 'false', got: $value"
            exit 1
          fi
        done

        echo "::notice::Input validation completed successfully"
        echo "::endgroup::"

    - name: "üì¶ Install CycloneDX tool"
      uses: "./dotnet-tool-install"
      with:
        tool-name: "CycloneDX"

    - name: "üîß Build arguments"
      id: build-args
      shell: bash
      run: |
        echo "::group::üîß Building CycloneDX Arguments"
        echo "::debug::Building dotnet arguments for CycloneDX SBOM generation"

        # Start with base arguments
        ARGS="run cyclonedx"

        # Add path
        ARGS="$ARGS '${{ inputs.path }}'"
        echo "::debug::Using path: ${{ inputs.path }}"

        # Add framework if specified
        if [ -n "${{ inputs.framework }}" ]; then
          ARGS="$ARGS --framework '${{ inputs.framework }}'"
          echo "::debug::Using framework: ${{ inputs.framework }}"
        fi

        # Add runtime if specified
        if [ -n "${{ inputs.runtime }}" ]; then
          ARGS="$ARGS --runtime '${{ inputs.runtime }}'"
          echo "::debug::Using runtime: ${{ inputs.runtime }}"
        fi

        # Add output directory
        ARGS="$ARGS --output '${{ inputs.output }}'"
        echo "::debug::Using output directory: ${{ inputs.output }}"

        # Add filename if specified
        if [ -n "${{ inputs.filename }}" ]; then
          ARGS="$ARGS --filename '${{ inputs.filename }}'"
          echo "::debug::Using filename: ${{ inputs.filename }}"
        fi

        # Add output format
        if [ -n "${{ inputs.output-format }}" ]; then
          ARGS="$ARGS --output-format '${{ inputs.output-format }}'"
          echo "::debug::Using output format: ${{ inputs.output-format }}"
        fi

        # Add boolean flags
        [ "${{ inputs.exclude-dev }}" = "true" ] && ARGS="$ARGS --exclude-dev" && echo "::debug::Excluding development dependencies"
        [ "${{ inputs.exclude-test-projects }}" = "true" ] && ARGS="$ARGS --exclude-test-projects" && echo "::debug::Excluding test projects"
        [ "${{ inputs.recursive }}" = "true" ] && ARGS="$ARGS --recursive" && echo "::debug::Using recursive scan"
        [ "${{ inputs.include-project-references }}" = "true" ] && ARGS="$ARGS --include-project-references" && echo "::debug::Including project references"
        [ "${{ inputs.no-serial-number }}" = "true" ] && ARGS="$ARGS --no-serial-number" && echo "::debug::Omitting serial number"
        [ "${{ inputs.disable-package-restore }}" = "true" ] && ARGS="$ARGS --disable-package-restore" && echo "::debug::Package restore disabled"
        [ "${{ inputs.disable-hash-computation }}" = "true" ] && ARGS="$ARGS --disable-hash-computation" && echo "::debug::Hash computation disabled"
        [ "${{ inputs.enable-github-licenses }}" = "true" ] && ARGS="$ARGS --enable-github-licenses" && echo "::debug::GitHub license resolution enabled"
        [ "${{ inputs.nuget-password-clear-text }}" = "true" ] && ARGS="$ARGS --isBaseUrlPasswordClearText" && echo "::debug::NuGet password in clear text"

        # Add metadata overrides
        if [ -n "${{ inputs.set-name }}" ]; then
          ARGS="$ARGS --set-name '${{ inputs.set-name }}'"
          echo "::debug::Setting component name: ${{ inputs.set-name }}"
        fi

        # Add version override
        if [ -n "${{ inputs.set-version }}" ]; then
          ARGS="$ARGS --set-version '${{ inputs.set-version }}'"
          echo "::debug::Setting component version: ${{ inputs.set-version }}"
        fi

        # Add type override
        if [ -n "${{ inputs.set-type }}" ]; then
          ARGS="$ARGS --set-type '${{ inputs.set-type }}'"
          echo "::debug::Setting component type: ${{ inputs.set-type }}"
        fi

        # Add timeout
        if [ -n "${{ inputs.dotnet-command-timeout }}" ]; then
          ARGS="$ARGS --dotnet-command-timeout '${{ inputs.dotnet-command-timeout }}'"
          echo "::debug::Using timeout: ${{ inputs.dotnet-command-timeout }}ms"
        fi

        # Add GitHub credentials
        if [ -n "${{ inputs.github-username }}" ]; then
          ARGS="$ARGS --github-username '${{ inputs.github-username }}'"
          echo "::debug::Using GitHub username for license resolution"
        fi

        # Add GitHub token if provided (mask sensitive data)
        if [ -n "${{ inputs.github-token }}" ]; then
          echo "::add-mask::${{ inputs.github-token }}"
          ARGS="$ARGS --github-token '${{ inputs.github-token }}'"
          echo "::debug::Using GitHub token for license resolution"
        fi

        # Add GitHub bearer token if provided (mask sensitive data)
        if [ -n "${{ inputs.github-bearer-token }}" ]; then
          echo "::add-mask::${{ inputs.github-bearer-token }}"
          ARGS="$ARGS --github-bearer-token '${{ inputs.github-bearer-token }}'"
          echo "::debug::Using GitHub bearer token for license resolution"
        fi

        # Add NuGet repository settings
        if [ -n "${{ inputs.nuget-url }}" ]; then
          ARGS="$ARGS --url '${{ inputs.nuget-url }}'"
          echo "::debug::Using custom NuGet URL: ${{ inputs.nuget-url }}"
        fi

        # Add NuGet credentials
        if [ -n "${{ inputs.nuget-username }}" ]; then
          ARGS="$ARGS --baseUrlUsername '${{ inputs.nuget-username }}'"
          echo "::debug::Using NuGet username"
        fi

        # Add NuGet password if provided (mask sensitive data)
        if [ -n "${{ inputs.nuget-password }}" ]; then
          echo "::add-mask::${{ inputs.nuget-password }}"
          ARGS="$ARGS --baseUrlUserPassword '${{ inputs.nuget-password }}'"
          echo "::debug::Using NuGet password"
        fi

        # Add build paths
        if [ -n "${{ inputs.base-intermediate-output-path }}" ]; then
          ARGS="$ARGS --base-intermediate-output-path '${{ inputs.base-intermediate-output-path }}'"
          echo "::debug::Using custom intermediate output path: ${{ inputs.base-intermediate-output-path }}"
        fi

        # Add import metadata path if provided
        if [ -n "${{ inputs.import-metadata-path }}" ]; then
          ARGS="$ARGS --import-metadata-path '${{ inputs.import-metadata-path }}'"
          echo "::debug::Importing metadata from: ${{ inputs.import-metadata-path }}"
        fi

        # Add exclude filter if provided
        if [ -n "${{ inputs.exclude-filter }}" ]; then
          ARGS="$ARGS --exclude-filter '${{ inputs.exclude-filter }}'"
          echo "::debug::Excluding dependencies: ${{ inputs.exclude-filter }}"
        fi

        echo "::debug::Generated arguments: $ARGS"
        echo "::endgroup::"

        # Output the arguments string
        echo "arguments=$ARGS" >> $GITHUB_OUTPUT

    - name: "üîß Generate SBOM with CycloneDX"
      id: generate
      uses: ./dotnet
      with:
        command: "tools"
        arguments: ${{ steps.build-args.outputs.arguments }}

    - name: "üìä Analyze generated SBOM"
      id: analyze
      shell: bash
      run: |
        echo "::group::üìä Analyzing Generated SBOM"
        echo "::debug::Analyzing generated SBOM file and extracting metadata"

        # Determine the actual output file path
        SBOM_FILE="${{ inputs.output }}/${{ inputs.filename }}"

        # Handle auto-detection of filename if not specified
        if [ "${{ inputs.filename }}" = "bom.xml" ] || [ "${{ inputs.filename }}" = "" ]; then
          case "${{ inputs.output-format }}" in
            Json|UnsafeJson)
              SBOM_FILE="${{ inputs.output }}/bom.json"
              ;;
            *)
              SBOM_FILE="${{ inputs.output }}/bom.xml"
              ;;
          esac
        fi

        # Verify file was created
        if [ -f "$SBOM_FILE" ]; then
          echo "::notice::SBOM file created successfully: $SBOM_FILE"
          echo "sbom-path=$SBOM_FILE" >> $GITHUB_OUTPUT
        else
          echo "::error file=$SBOM_FILE::SBOM file not found at expected location: $SBOM_FILE"
          exit 1
        fi

        # Set output format
        echo "output-format=${{ inputs.output-format }}" >> $GITHUB_OUTPUT

        if [ -f "$SBOM_FILE" ]; then
          # Get file size
          if command -v stat >/dev/null 2>&1; then
            if stat -f%z "$SBOM_FILE" >/dev/null 2>&1; then
              # macOS/BSD stat
              SBOM_SIZE=$(stat -f%z "$SBOM_FILE")
            else
              # GNU stat
              SBOM_SIZE=$(stat -c%s "$SBOM_FILE")
            fi
          else
            SBOM_SIZE="unknown"
          fi

          echo "::debug::SBOM file size: $SBOM_SIZE bytes"
          echo "sbom-size=$SBOM_SIZE" >> $GITHUB_OUTPUT

          # Count dependencies (rough estimation)
          DEPS_COUNT="unknown"
          case "${{ inputs.output-format }}" in
            Json|UnsafeJson)
              if command -v jq >/dev/null 2>&1; then
                DEPS_COUNT=$(jq '.components | length' "$SBOM_FILE" 2>/dev/null || echo "unknown")
              elif command -v grep >/dev/null 2>&1; then
                DEPS_COUNT=$(grep -c '"name"' "$SBOM_FILE" 2>/dev/null || echo "unknown")
              fi
              ;;
            *)
              if command -v xmllint >/dev/null 2>&1; then
                DEPS_COUNT=$(xmllint --xpath "count(//component)" "$SBOM_FILE" 2>/dev/null || echo "unknown")
              elif command -v grep >/dev/null 2>&1; then
                DEPS_COUNT=$(grep -c '<component' "$SBOM_FILE" 2>/dev/null || echo "unknown")
              fi
              ;;
          esac

          echo "::notice::Dependencies found: $DEPS_COUNT"
          echo "dependencies-count=$DEPS_COUNT" >> $GITHUB_OUTPUT
          echo "::endgroup::"

        else
          echo "::error::SBOM file not found for analysis"
          echo "::endgroup::"
          exit 1
        fi
          echo "sbom-size=0" >> $GITHUB_OUTPUT
          echo "dependencies-count=0" >> $GITHUB_OUTPUT
        fi

    - name: "üìä Action Summary"
      if: always() && inputs.show-summary == 'true'
      shell: bash
      run: |
        cat >> $GITHUB_STEP_SUMMARY << 'EOF'
        <details><summary>Expand for details - üìä CycloneDX SBOM Generation Summary</summary>

        ## üîß Input Parameters
        | Parameter | Value |
        |-----------|-------|
        | üìç Source Path | `${{ inputs.path }}` |
        | üìÅ Output Directory | `${{ inputs.output }}` |
        | üìÑ Filename | `${{ inputs.filename }}` |
        | üìã Output Format | `${{ inputs.output-format }}` |
        | üéØ Framework | `${{ inputs.framework || 'all' }}` |
        | üñ•Ô∏è Runtime | `${{ inputs.runtime || 'all' }}` |
        | üè∑Ô∏è Component Name | `${{ inputs.set-name || 'auto' }}` |
        | üè∑Ô∏è Component Version | `${{ inputs.set-version || 'auto' }}` |
        | üè∑Ô∏è Component Type | `${{ inputs.set-type }}` |

        ## üì§ Generation Results
        | Metric | Value |
        |--------|-------|
        | üìÑ SBOM File Path | `${{ steps.analyze.outputs.sbom-path }}` |
        | üìè File Size | `${{ steps.analyze.outputs.sbom-size }} bytes` |
        | üì¶ Dependencies Count | `${{ steps.analyze.outputs.dependencies-count }}` |
        | üìã Output Format | `${{ steps.analyze.outputs.output-format }}` |

        ## ‚öôÔ∏è Configuration Options
        | Option | Status |
        |--------|--------|
        | üö´ Exclude Dev Dependencies | `${{ inputs.exclude-dev }}` |
        | üö´ Exclude Test Projects | `${{ inputs.exclude-test-projects }}` |
        | üîÑ Recursive Scan | `${{ inputs.recursive }}` |
        | üîó Include Project References | `${{ inputs.include-project-references }}` |
        | üî¢ No Serial Number | `${{ inputs.no-serial-number }}` |
        | üì¶ Disable Package Restore | `${{ inputs.disable-package-restore }}` |
        | üîê Disable Hash Computation | `${{ inputs.disable-hash-computation }}` |
        | üîç GitHub License Resolution | `${{ inputs.enable-github-licenses }}` |

        ## üîß Process Details
        | Step | Status |
        |------|--------|
        | ‚úÖ Input Validation | `‚úÖ Completed` |
        | üì¶ Tool Installation | `‚úÖ Completed` |
        | üîß SBOM Generation | `${{ steps.generate.outcome == 'success' && '‚úÖ Completed' || '‚ùå Failed' }}` |
        | üìä SBOM Analysis | `${{ steps.analyze.outcome == 'success' && '‚úÖ Completed' || '‚ùå Failed' }}` |

        </details>
        EOF

branding:
  icon: "file-text"
  color: "blue"
