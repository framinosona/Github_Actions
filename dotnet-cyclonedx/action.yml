name: "üìÑ Generate CycloneDX SBOM"
description: "Generates Software Bill of Materials (SBOM) using CycloneDX .NET Global Tool"
author: "Francois Raminosona"

inputs:
  # Arguments passed to dotnet
  path:
    description: "Path to .sln, .slnf, .slnx, .csproj, .fsproj, .vbproj, .xsproj, packages.config file or directory"
    required: false
    default: ""
  working-directory:
    description: "Working directory for the command"
    required: false
    default: "."
  framework:
    description: "Target framework to use (e.g., 'net8.0'). If not defined, all will be aggregated"
    required: false
    default: ""
  runtime:
    description: "Runtime to use (e.g., 'win-x64'). If not defined, all will be aggregated"
    required: false
    default: ""
  output:
    description: "Directory to write the BOM"
    required: false
    default: ""
  global:
    description: "Install the CycloneDX .NET global tool if not already installed"
    required: false
    default: "false"
  show-summary:
    description: "Whether to show the action summary"
    required: false
    default: "false"

  # Arguments unique to CycloneDX
  filename:
    description: "Filename for the BOM (default: bom.xml or bom.json)"
    required: false
    default: ""
  output-format:
    description: "BOM output format (Auto, Json, UnsafeJson, Xml)"
    required: false
    default: "Auto"
  exclude-dev:
    description: "Exclude development dependencies from the BOM"
    required: false
    default: "false"
  exclude-test-projects:
    description: "Exclude test projects from the BOM"
    required: false
    default: "false"
  url:
    description: "Alternative NuGet repository URL"
    required: false
    default: ""
  baseUrlUsername:
    description: "Alternative NuGet repository username"
    required: false
    default: ""
  baseUrlUserPassword:
    description: "Alternative NuGet repository password/apikey"
    required: false
    default: ""
  isBaseUrlPasswordClearText:
    description: "Alternative NuGet repository password is cleartext"
    required: false
    default: "false"
  recursive:
    description: "Recursively scan project references of the supplied project file"
    required: false
    default: "false"
  no-serial-number:
    description: "Omit the serial number from the resulting BOM"
    required: false
    default: "false"
  github-username:
    description: "GitHub username for license resolution"
    required: false
    default: ""
  github-token:
    description: "GitHub personal access token for license resolution"
    required: false
    default: ""
  github-bearer-token:
    description: "GitHub bearer token for license resolution (useful in GitHub actions)"
    required: false
    default: ""
  enable-github-licenses:
    description: "Enable GitHub license resolution"
    required: false
    default: "false"
  disable-package-restore:
    description: "Disable package restore"
    required: false
    default: "false"
  disable-hash-computation:
    description: "Disable hash computation for packages"
    required: false
    default: "false"
  dotnet-command-timeout:
    description: "dotnet command timeout in milliseconds (default: 300000)"
    required: false
    default: "300000"
  base-intermediate-output-path:
    description: "Folder for customized build environment (required if 'obj' folder is relocated)"
    required: false
    default: ""
  import-metadata-path:
    description: "Metadata template path with project specific details"
    required: false
    default: ""
  include-project-references:
    description: "Include project references as components (only for project files)"
    required: false
    default: "false"
  set-name:
    description: "Override the autogenerated BOM metadata component name"
    required: false
    default: ""
  set-version:
    description: "Override the default BOM metadata component version (defaults to 0.0.0)"
    required: false
    default: ""
  set-type:
    description: "Override the default BOM metadata component type"
    required: false
    default: "Application"
  set-nuget-purl:
    description: "Override the default BOM metadata component bom ref and PURL as NuGet package"
    required: false
    default: "false"
  exclude-filter:
    description: "Comma separated list of dependencies to exclude (e.g., 'name1@version1,name2@version2')"
    required: false
    default: ""

outputs:
  exit-code:
    description: "Exit code of the dotnet command"
    value: ${{ steps.run-dotnet.outputs.exit-code }}
  executed-command:
    description: "The actual command that was executed"
    value: ${{ steps.run-dotnet.outputs.executed-command }}
  sbom-generated:
    description: "Whether the SBOM file was successfully generated"
    value: ${{ steps.verify-sbom.outputs.sbom-generated }}
  sbom-file:
    description: "Path to the generated SBOM file"
    value: ${{ steps.verify-sbom.outputs.sbom-file }}
  sbom-size:
    description: "Size of the generated SBOM file in bytes"
    value: ${{ steps.verify-sbom.outputs.sbom-size }}
  sbom-valid:
    description: "Whether the generated SBOM appears to be valid"
    value: ${{ steps.verify-sbom.outputs.sbom-valid }}

runs:
  using: "composite"
  steps:

    # ================== ‚ÑπÔ∏è ==================

    - name: "‚ÑπÔ∏è Gather environment information"
      shell: bash
      run: |
        echo "::debug::Operating System: $(uname -a)"
        echo "::debug::GitHub Runner OS: $RUNNER_OS"
        echo "::debug::GitHub Runner Version: $RUNNER_VERSION"
        echo "::debug::.NET SDK Version: $(dotnet --version || echo 'Not installed')"

    # ================== üîí ==================

    - name: "üîí Mask sensitive data"
      shell: bash
      run: |
        if [ -n "${{ inputs.baseUrlUserPassword }}" ]; then
          echo "::add-mask::${{ inputs.baseUrlUserPassword }}"
        fi
        if [ -n "${{ inputs.baseUrlUsername }}" ]; then
          echo "::add-mask::${{ inputs.baseUrlUsername }}"
        fi
        if [ -n "${{ inputs.github-token }}" ]; then
          echo "::add-mask::${{ inputs.github-token }}"
        fi
        if [ -n "${{ inputs.github-bearer-token }}" ]; then
          echo "::add-mask::${{ inputs.github-bearer-token }}"
        fi

        echo "‚úÖ Masked sensitive inputs"

    # ================== üìÅ ==================

    - name: "üìÅ Normalize path"
      id: normalize-path
      uses: framinosona/github_actions/normalize-path@main
      with:
        path: ${{ inputs.path }}

    - name: "üìÅ Normalize filename"
      id: normalize-filename
      uses: framinosona/github_actions/normalize-path@main
      with:
        path: ${{ inputs.filename }}

    - name: "üìÅ Normalize output-base-intermediate-path"
      id: normalize-base-intermediate-output-path
      uses: framinosona/github_actions/normalize-path@main
      with:
        path: ${{ inputs.base-intermediate-output-path }}

    - name: "üìÅ Normalize import-metadata-path"
      id: normalize-import-metadata-path
      uses: framinosona/github_actions/normalize-path@main
      with:
        path: ${{ inputs.import-metadata-path }}

    # ================== ‚úÖ ==================

    - name: "‚úÖ Validate input : booleans"
      shell: bash
      run: |
        echo "::debug::Validating boolean inputs..."
        for param in exclude-dev exclude-test-projects isBaseUrlPasswordClearText recursive no-serial-number enable-github-licenses disable-package-restore disable-hash-computation include-project-references set-nuget-purl; do
          case $param in
            exclude-dev) value="${{ inputs.exclude-dev }}" ;;
            exclude-test-projects) value="${{ inputs.exclude-test-projects }}" ;;
            isBaseUrlPasswordClearText) value="${{ inputs.isBaseUrlPasswordClearText }}" ;;
            recursive) value="${{ inputs.recursive }}" ;;
            no-serial-number) value="${{ inputs.no-serial-number }}" ;;
            enable-github-licenses) value="${{ inputs.enable-github-licenses }}" ;;
            disable-package-restore) value="${{ inputs.disable-package-restore }}" ;;
            disable-hash-computation) value="${{ inputs.disable-hash-computation }}" ;;
            include-project-references) value="${{ inputs.include-project-references }}" ;;
            set-nuget-purl) value="${{ inputs.set-nuget-purl }}" ;;
          esac
          if [ -n "$value" ] && [ "$value" != "true" ] && [ "$value" != "false" ]; then
            echo "::error::Parameter $param must be 'true' or 'false', got: $value"
            exit 1
          fi
        done

        echo "‚úÖ Boolean inputs validation completed successfully"

    - name: "‚úÖ Validate input : output-format"
      shell: bash
      run: |
        echo "::debug::Validating output-format input: ${{ inputs.output-format }}"

        case "${{ inputs.output-format }}" in
          Auto|Json|UnsafeJson|Xml) ;;
          *) echo "::error::Invalid output format. Must be one of: Auto, Json, UnsafeJson, Xml"; exit 1 ;;
        esac

        echo "‚úÖ Output format validation completed successfully"

    - name: "‚úÖ Validate input : set-type"
      id: formatted-set-type
      shell: bash
      run: |
        echo "::debug::Validating set-type input: ${{ inputs.set-type }}"

        case "${{ inputs.set-type }}" in
          Application|Container|Cryptographic_Asset|Data|Device|Device_Driver|File|Firmware|Framework|Library|Machine_Learning_Model|Null|Operating_System|Platform) ;;
          *) echo "::error::Invalid component type. Must be one of: Application, Container, Cryptographic_Asset, Data, Device, Device_Driver, File, Firmware, Framework, Library, Machine_Learning_Model, Null, Operating_System, Platform"; exit 1 ;;
        esac

        echo "‚úÖ Component type validation completed successfully"

    - name: "‚úÖ Validate input : exclude-filter"
      if: ${{ inputs.exclude-filter != '' }}
      shell: bash
      run: |
        echo "::debug::Validating exclude-filter input: ${{ inputs.exclude-filter }}"

        IFS=',' read -ra FILTERS <<< "${{ inputs.exclude-filter }}"
        for filter in "${FILTERS[@]}"; do
          if ! [[ "$filter" =~ ^[^@]+@[^@]+$ ]]; then
            echo "::error::Invalid exclude-filter format. Each filter must be in the form 'name@version'. Invalid filter: $filter"
            exit 1
          fi
        done

        echo "‚úÖ Exclude filter validation completed successfully"

    - name: "‚úÖ Validate input : url"
      if: ${{ inputs.url != '' }}
      shell: bash
      run: |
        echo "::debug::Validating URL input: ${{ inputs.url }}"

        if ! [[ "${{ inputs.url }}" =~ ^https?:// ]]; then
          echo "::error::Invalid URL format. Must start with http:// or https://: ${{ inputs.url }}"
          exit 1
        fi

        echo "‚úÖ URL validation completed successfully"

    - name: "‚úÖ Validate input : dotnet-command-timeout"
      if: ${{ inputs.dotnet-command-timeout != '' && inputs.dotnet-command-timeout != '300000' }}
      shell: bash
      run: |
        echo "::debug::Validating dotnet-command-timeout input: ${{ inputs.dotnet-command-timeout }}"

        if ! [[ "${{ inputs.dotnet-command-timeout }}" =~ ^[0-9]+$ ]]; then
          echo "::error::Timeout must be a positive number: ${{ inputs.dotnet-command-timeout }}"
          exit 1
        fi

        echo "‚úÖ Timeout validation completed successfully"

    # Skipping checks for now
    # - name: "‚úÖ Validate input : set-version"
    #   if: ${{ inputs.set-version != '' }}
    #   shell: bash
    #   run: |
    #     echo "::debug::Validating set-version input: ${{ inputs.set-version }}"

    #     if ! [[ "${{ inputs.set-version }}" =~ ^[0-9]+(\.[0-9]+)*$ ]]; then
    #       echo "::error::Version must be in the format 'X.Y.Z' where X, Y, and Z are numbers: ${{ inputs.set-version }}"
    #       exit 1
    #     fi

    #     echo "‚úÖ Version validation completed successfully"


    - name: "‚úÖ Validate input : github-authentication"
      shell: bash
      run: |
        echo "::debug::Validating GitHub authentication inputs"

        # Check GitHub username/token combination
        if [ -n "${{ inputs.github-username }}" ] && [ -z "${{ inputs.github-token }}" ]; then
          echo "::error::GitHub token must be provided when GitHub username is specified"
          exit 1
        fi

        if [ -n "${{ inputs.github-token }}" ] && [ -z "${{ inputs.github-username }}" ]; then
          echo "::error::GitHub username must be provided when GitHub token is specified"
          exit 1
        fi

        # Bearer token is standalone
        if [ -n "${{ inputs.github-bearer-token }}" ] && [ -n "${{ inputs.github-username }}" ]; then
          echo "::warning::GitHub bearer token will be used instead of username/token combination"
        fi

        echo "‚úÖ GitHub authentication validation completed successfully"

    - name: "‚úÖ Validate input : import-metadata-path"
      if: ${{ inputs.import-metadata-path != '' }}
      shell: bash
      run: |
        echo "::debug::Validating import-metadata-path input: ${{ steps.normalize-import-metadata-path.outputs.normalized }}"

        if [ ! -f "${{ steps.normalize-import-metadata-path.outputs.normalized }}" ]; then
          echo "::error file=${{ steps.normalize-import-metadata-path.outputs.normalized }}::Import metadata file not found: ${{ steps.normalize-import-metadata-path.outputs.normalized }}"
          exit 1
        fi

        echo "‚úÖ Import metadata path validation completed successfully"

    - name: "‚úÖ Validate input : base-intermediate-output-path"
      if: ${{ inputs.base-intermediate-output-path != '' }}
      shell: bash
      run: |
        echo "::debug::Validating base-intermediate-output-path input: ${{ steps.normalize-base-intermediate-output-path.outputs.normalized }}"

        if [ ! -d "${{ steps.normalize-base-intermediate-output-path.outputs.normalized }}" ]; then
          echo "::error file=${{ steps.normalize-base-intermediate-output-path.outputs.normalized }}::Base intermediate output path not found: ${{ steps.normalize-base-intermediate-output-path.outputs.normalized }}"
          exit 1
        fi

        echo "‚úÖ Base intermediate output path validation completed successfully"

    # ================== üèóÔ∏è  ==================

    - name: "üèóÔ∏è Build argument list"
      id: build-args
      shell: bash
      run: |
        echo "::debug::Building argument list for CycloneDX..."

        ARGUMENTS="run dotnet-cyclonedx"

        # Start with path argument if provided
        if [ -n "${{ steps.normalize-path.outputs.normalized }}" ]; then
          ARGUMENTS="$ARGUMENTS '${{ steps.normalize-path.outputs.normalized }}'"
        fi

        # Key-value options
        for param in filename url baseUrlUsername baseUrlUserPassword dotnet-command-timeout base-intermediate-output-path import-metadata-path set-name set-version exclude-filter; do
          case $param in
            filename) value="${{ steps.normalize-filename.outputs.normalized }}" ;;
            url) value="${{ inputs.url }}" ;;
            baseUrlUsername) value="${{ inputs.baseUrlUsername }}" ;;
            baseUrlUserPassword) value="${{ inputs.baseUrlUserPassword }}" ;;
            dotnet-command-timeout) value="${{ inputs.dotnet-command-timeout }}" ;;
            base-intermediate-output-path) value="${{ steps.normalize-base-intermediate-output-path.outputs.normalized }}" ;;
            import-metadata-path) value="${{ steps.normalize-import-metadata-path.outputs.normalized }}" ;;
            set-name) value="${{ inputs.set-name }}" ;;
            set-version) value="${{ inputs.set-version }}" ;;
            exclude-filter) value="${{ inputs.exclude-filter }}" ;;
          esac
          if [ -n "$value" ] ; then
            ARGUMENTS="$ARGUMENTS --$param '$value'"
          fi
        done

        # Output format (only if not Auto)
        if [ "${{ inputs.output-format }}" != "Auto" ]; then
          ARGUMENTS="$ARGUMENTS --output-format '${{ inputs.output-format }}'"
        fi

        # Component type (only if not Application)
        if [ "${{ inputs.set-type }}" != "Application" ]; then
          ARGUMENTS="$ARGUMENTS --set-type '${{ inputs.set-type }}'"
        fi

        # GitHub authentication
        if [ -n "${{ inputs.github-bearer-token }}" ]; then
          ARGUMENTS="$ARGUMENTS --github-bearer-token '${{ inputs.github-bearer-token }}'"
        elif [ -n "${{ inputs.github-username }}" ] && [ -n "${{ inputs.github-token }}" ]; then
          ARGUMENTS="$ARGUMENTS --github-username '${{ inputs.github-username }}' --github-token '${{ inputs.github-token }}'"
        fi

        # Boolean flags
        for param in exclude-dev exclude-test-projects isBaseUrlPasswordClearText recursive no-serial-number enable-github-licenses disable-package-restore disable-hash-computation include-project-references set-nuget-purl; do
          case $param in
            exclude-dev) value="${{ inputs.exclude-dev }}" ;;
            exclude-test-projects) value="${{ inputs.exclude-test-projects }}" ;;
            isBaseUrlPasswordClearText) value="${{ inputs.isBaseUrlPasswordClearText }}" ;;
            recursive) value="${{ inputs.recursive }}" ;;
            no-serial-number) value="${{ inputs.no-serial-number }}" ;;
            enable-github-licenses) value="${{ inputs.enable-github-licenses }}" ;;
            disable-package-restore) value="${{ inputs.disable-package-restore }}" ;;
            disable-hash-computation) value="${{ inputs.disable-hash-computation }}" ;;
            include-project-references) value="${{ inputs.include-project-references }}" ;;
            set-nuget-purl) value="${{ inputs.set-nuget-purl }}" ;;
          esac
          if [ "$value" = "true" ]; then
            ARGUMENTS="$ARGUMENTS --${param}"
          fi
        done

        # Trim leading space
        ARGUMENTS="${ARGUMENTS# }"

        echo "arguments=$ARGUMENTS" >> $GITHUB_OUTPUT
        echo "‚úÖ Argument list built successfully: $ARGUMENTS"

    # ================== üöÄ ==================

    - name: "üì¶ Install CycloneDX .NET Global Tool"
      id: install-tool
      uses: "framinosona/github_actions/dotnet-tool-install@main"
      with:
        tool-name: "CycloneDX"
        global: ${{ inputs.global }}
        create-manifest-if-needed: "true"
        show-summary: ${{ inputs.show-summary }}

    - name: "üöÄ Execute CycloneDX"
      id: run-dotnet
      uses: "framinosona/github_actions/dotnet@main"
      with:
        command: "tool"
        arguments: ${{ steps.build-args.outputs.arguments }}
        working-directory: ${{ inputs.working-directory }}
        framework: ${{ inputs.framework }}
        runtime: ${{ inputs.runtime }}
        output: ${{ inputs.output }}
        show-summary: ${{ inputs.show-summary }}

    # ================== üîç ==================

    - name: "üîç Verify SBOM generation"
      id: verify-sbom
      shell: bash
      run: |
        echo "::debug::Verifying CycloneDX SBOM generation..."

        # Determine the expected output directory and filename
        OUTPUT_DIR="${{ inputs.output }}"
        if [ -z "$OUTPUT_DIR" ]; then
          OUTPUT_DIR="."
        fi

        FILENAME="${{ steps.normalize-filename.outputs.normalized }}"
        if [ -z "$FILENAME" ]; then
          # Default filename based on output format
          case "${{ inputs.output-format }}" in
            Json|UnsafeJson) FILENAME="bom.json" ;;
            Xml) FILENAME="bom.xml" ;;
            Auto) FILENAME="bom.xml" ;;  # Default for Auto
            *) FILENAME="bom.xml" ;;
          esac
        fi

        SBOM_FILE="$OUTPUT_DIR/$FILENAME"

        # Check if SBOM file was generated
        if [ -f "$SBOM_FILE" ]; then
          FILE_SIZE=$(wc -c < "$SBOM_FILE" 2>/dev/null || echo "0")
          echo "‚úÖ SBOM file generated: $SBOM_FILE ($FILE_SIZE bytes)"
          echo "sbom-generated=true" >> $GITHUB_OUTPUT
          echo "sbom-file=$SBOM_FILE" >> $GITHUB_OUTPUT
          echo "sbom-size=$FILE_SIZE" >> $GITHUB_OUTPUT

          # Validate SBOM content (basic check for XML/JSON structure)
          if [[ "$SBOM_FILE" == *.xml ]]; then
            if grep -q "<bom" "$SBOM_FILE" 2>/dev/null; then
              echo "‚úÖ SBOM appears to be valid XML"
              echo "sbom-valid=true" >> $GITHUB_OUTPUT
            else
              echo "‚ö†Ô∏è SBOM file exists but may not be valid XML"
              echo "sbom-valid=false" >> $GITHUB_OUTPUT
            fi
          elif [[ "$SBOM_FILE" == *.json ]]; then
            if command -v jq >/dev/null 2>&1 && jq empty "$SBOM_FILE" >/dev/null 2>&1; then
              echo "‚úÖ SBOM appears to be valid JSON"
              echo "sbom-valid=true" >> $GITHUB_OUTPUT
            else
              echo "‚ö†Ô∏è SBOM file exists but may not be valid JSON"
              echo "sbom-valid=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "sbom-valid=unknown" >> $GITHUB_OUTPUT
          fi
        else
          echo "‚ùå SBOM file not found: $SBOM_FILE"
          echo "sbom-generated=false" >> $GITHUB_OUTPUT
          echo "sbom-file=" >> $GITHUB_OUTPUT
          echo "sbom-size=0" >> $GITHUB_OUTPUT
          echo "sbom-valid=false" >> $GITHUB_OUTPUT
        fi

        echo "::debug::SBOM generation verification completed"

    # ================== üìä ==================

    - name: "üìä Action Summary"
      if: always() && inputs.show-summary == 'true'
      shell: bash
      run: |
        cat >> $GITHUB_STEP_SUMMARY << 'EOF'
        <details><summary>üîó CycloneDX ${{ inputs.set-name || 'auto-generated' }} ${{ inputs.set-version || '0.0.0' }}`</summary>

        ## üîß CycloneDX Specific Parameters
        | Parameter | Value |
        |-----------|-------|
        | üìÑ Filename | `${{ steps.normalize-filename.outputs.normalized || 'auto-generated' }}` |
        | üìã Output Format | `${{ inputs.output-format }}` |
        | üö´ Exclude Dev Dependencies | `${{ inputs.exclude-dev }}` |
        | üß™ Exclude Test Projects | `${{ inputs.exclude-test-projects }}` |
        | üîÑ Recursive Scan | `${{ inputs.recursive }}` |
        | üî¢ Include Serial Number | `${{ inputs.no-serial-number == 'true' && 'false' || 'true' }}` |
        | üêô GitHub License Resolution | `${{ inputs.enable-github-licenses }}` |
        | üì¶ Package Restore | `${{ inputs.disable-package-restore == 'true' && 'disabled' || 'enabled' }}` |
        | üîó Include Project References | `${{ inputs.include-project-references }}` |
        | üè∑Ô∏è Component Name | `${{ inputs.set-name || 'auto-generated' }}` |
        | üìå Component Version | `${{ inputs.set-version || '0.0.0' }}` |
        | üèóÔ∏è Component Type | `${{ inputs.set-type }}` |

        ## ‚öôÔ∏è Process Details
        | Step | Status |
        |------|--------|
        | ‚úÖ Input Validation | `‚úÖ Completed` |
        | üì¶ Tool Installation | `${{ steps.install-tool.outcome == 'success' && '‚úÖ Completed' || '‚ùå Failed' }}` |
        | üèóÔ∏è Argument Building | `${{ steps.build-args.outcome == 'success' && '‚úÖ Completed' || '‚ùå Failed' }}` |
        | üîß SBOM Generation | `${{ steps.run-dotnet.outcome == 'success' && '‚úÖ Completed' || '‚ùå Failed' }}` |
        | üîç SBOM Verification | `${{ steps.verify-sbom.outcome == 'success' && '‚úÖ Completed' || '‚ùå Failed' }}` |

        ## üì§ Execution Results
        | Metric | Value |
        |--------|-------|
        | ‚úÖ Exit Code | `${{ steps.run-dotnet.outputs.exit-code }}` |
        | üìÑ SBOM Generated | `${{ steps.verify-sbom.outputs.sbom-generated }}` |
        | üìÅ SBOM File | `${{ steps.verify-sbom.outputs.sbom-file || 'not generated' }}` |
        | üìè SBOM Size | `${{ steps.verify-sbom.outputs.sbom-size }} bytes` |
        | ‚úÖ SBOM Valid | `${{ steps.verify-sbom.outputs.sbom-valid }}` |
        | üöÄ Tool Installation | `${{ steps.install-tool.outputs.has-been-installed == 'true' && '‚úÖ Installed' || steps.install-tool.outputs.is-already-installed == 'true' && '‚ö†Ô∏è Already Installed' || '‚ùå Failed' }}` |
        | üîß Generated Command | `dotnet tool ${{ steps.build-args.outputs.arguments }}` |

        </details>
        EOF

branding:
  icon: "file-text"
  color: "blue"


# dotnet cyclonedx --help
# Description:
#   A .NET Core global tool which creates CycloneDX Software Bill-of-Materials (SBOM) from .NET projects.

# Usage:
#   CycloneDX <path> [options]

# Arguments:
#   <path>  The path to a .sln, .slnf, .slnx, .csproj, .fsproj, .vbproj, .xsproj, or packages.config file or the path to a directory which will be
#           recursively analyzed for packages.config files.

# Options:
#   --framework <framework>                                                The target framework to use. If not defined, all will be aggregated.
#   --runtime <runtime>                                                     The runtime to use. If not defined, all will be aggregated.
#   --output <output>                                                        The directory to write the BOM
#   --filename <filename>                                                   Optionally provide a filename for the BOM (default: bom.xml or bom.json)
#   --json                                                                   (Deprecated use `--output-format json` instead) Produce a JSON BOM instead
#                                                                                of XML
#   --exclude-dev                                                           Exclude development dependencies from the BOM (see
#                                                                                https://github.com/NuGet/Home/wiki/DevelopmentDependency-support-for-Package
#                                                                                Reference)
#   --exclude-test-projects                                                  Exclude test projects from the BOM
#   --url <url>                                                              Alternative NuGet repository URL to
#                                                                                https://<yoururl>/nuget/<yourrepository>/v3/index.json
#   --baseUrlUsername <baseUrlUsername>                                     Alternative NuGet repository username
#   --baseUrlUserPassword <baseUrlUserPassword>                            Alternative NuGet repository username password/apikey
#   --isBaseUrlPasswordClearText                                         Alternative NuGet repository password is cleartext
#   --recursive                                                             To be used with a single project file, it will recursively scan project
#                                                                                references of the supplied project file
#   --no-serial-number                                                      Optionally omit the serial number from the resulting BOM
#   --github-username <github-username>                                     Optionally provide a GitHub username for license resolution. If set you
#                                                                                also need to provide a GitHub personal access token
#   --github-token <github-token>                                           Optionally provide a GitHub personal access token for license resolution.
#                                                                                If set you also need to provide a GitHub username
#   --github-bearer-token <github-bearer-token>                            Optionally provide a GitHub bearer token for license resolution. This is
#                                                                                useful in GitHub actions
#   --enable-github-licenses                                               Enables GitHub license resolution
#   --disable-package-restore                                              Optionally disable package restore
#   --disable-hash-computation                                             Optionally disable hash computation for packages
#   --dotnet-command-timeout <dotnet-command-timeout>                      dotnet command timeout in milliseconds (primarily used for long dotnet
#                                                                                restore operations) [default: 300000]
#   --base-intermediate-output-path <base-intermediate-output-path>       Optionally provide a folder for customized build environment. Required if
#                                                                                folder 'obj' is relocated.
#   --import-metadata-path <import-metadata-path>                          Optionally provide a metadata template which has project specific details.
#   --include-project-references                                           Include project references as components (can only be used with project
#                                                                                files).
#   --set-name <set-name>                                                   Override the autogenerated BOM metadata component name.
#   --set-version <set-version>                                             Override the default BOM metadata component version (defaults to 0.0.0).
#   --set-type                                                              Override the default BOM metadata component type (defaults to application).
#   <Application|Container|Cryptographic_Asset|Data|Device|Device_Driver|File|F  [default: Application]
#   irmware|Framework|Library|Machine_Learning_Model|Null|Operating_System|Plat
#   form>
#   --set-nuget-purl                                                             Override the default BOM metadata component bom ref and PURL as NuGet
#                                                                                package.
#   -f <f>                                                                       (Deprecated use -fn instead) Optionally provide a filename for the BOM
#                                                                                (default: bom.xml or bom.json).
#   -d                                                                           (Deprecated use -ed instead) Exclude development dependencies from the BOM.
#   -r                                                                           (Deprecated use -rs instead) To be used with a single project file, it will
#                                                                                recursively scan project references of the supplied project file.
#   --out <out>                                                                  (Deprecated use -output instead) The directory to write the BOM
#   --disable-github-licenses                                              (Deprecated, this is the default setting now
#   --exclude-filter <exclude-filter>                                       A comma separated list of dependencies to exclude in form
#                                                                                'name1@version1,name2@version2'. Transitive dependencies will also be
#                                                                                removed.
#   --output-format <Auto|Json|UnsafeJson|Xml>                               Select the BOM output format: auto (default), xml, json, or unsafeJson
#                                                                                (relaxed escaping). [default: Auto]
#   --version                                                                    Show version information
#   -h, --help                                                               Show help and usage information
