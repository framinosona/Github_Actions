name: 'üìÑ Generate CycloneDX SBOM'
description: 'Generates Software Bill of Materials (SBOM) using CycloneDX .NET Global Tool'
author: 'Francois Raminosona'

inputs:
  path:
    description: 'Path to a .sln, .slnf, .slnx, .csproj, .fsproj, .vbproj, .xsproj, or packages.config file or directory'
    required: true
  framework:
    description: 'Target framework to use. If not defined, all will be aggregated'
    required: false
    default: ''
  runtime:
    description: 'Runtime to use. If not defined, all will be aggregated'
    required: false
    default: ''
  output:
    description: 'Directory to write the BOM'
    required: false
    default: '${{ github.workspace }}/output/sbom'
  filename:
    description: 'Filename for the BOM'
    required: false
    default: 'sbom.xml'
  output-format:
    description: 'BOM output format'
    required: false
    default: 'Auto'
  exclude-dev:
    description: 'Exclude development dependencies from the BOM'
    required: false
    default: 'true'
  exclude-test-projects:
    description: 'Exclude test projects from the BOM'
    required: false
    default: 'true'
  recursive:
    description: 'Recursively scan project references'
    required: false
    default: 'false'
  include-project-references:
    description: 'Include project references as components'
    required: false
    default: 'false'
  no-serial-number:
    description: 'Omit the serial number from the resulting BOM'
    required: false
    default: 'false'
  disable-package-restore:
    description: 'Disable package restore'
    required: false
    default: 'false'
  disable-hash-computation:
    description: 'Disable hash computation for packages'
    required: false
    default: 'false'
  set-name:
    description: 'Override the autogenerated BOM metadata component name'
    required: false
    default: ''
  set-version:
    description: 'Override the default BOM metadata component version'
    required: false
    default: ''
  set-type:
    description: 'Override the default BOM metadata component type'
    required: false
    default: 'Application'
  dotnet-command-timeout:
    description: 'dotnet command timeout in milliseconds'
    required: false
    default: '300000'
  github-username:
    description: 'GitHub username for license resolution'
    required: false
    default: ''
  github-token:
    description: 'GitHub personal access token for license resolution'
    required: false
    default: ''
  github-bearer-token:
    description: 'GitHub bearer token for license resolution'
    required: false
    default: ''
  enable-github-licenses:
    description: 'Enable GitHub license resolution'
    required: false
    default: 'false'
  nuget-url:
    description: 'Alternative NuGet repository URL'
    required: false
    default: ''
  nuget-username:
    description: 'Alternative NuGet repository username'
    required: false
    default: ''
  nuget-password:
    description: 'Alternative NuGet repository password/apikey'
    required: false
    default: ''
  nuget-password-clear-text:
    description: 'NuGet repository password is cleartext'
    required: false
    default: 'false'
  base-intermediate-output-path:
    description: 'Custom build environment folder (if obj folder is relocated)'
    required: false
    default: ''
  import-metadata-path:
    description: 'Metadata template path with project specific details'
    required: false
    default: ''
  exclude-filter:
    description: 'Comma separated list of dependencies to exclude (name1@version1,name2@version2)'
    required: false
    default: ''
  cyclonedx-version:
    description: 'Version of CycloneDX tool to install'
    required: false
    default: ''

outputs:
  sbom-path:
    description: 'Full path to the generated SBOM file'
    value: ${{ steps.generate.outputs.sbom-path }}
  sbom-size:
    description: 'Size of the generated SBOM file in bytes'
    value: ${{ steps.analyze.outputs.sbom-size }}
  dependencies-count:
    description: 'Number of dependencies found in the SBOM'
    value: ${{ steps.analyze.outputs.dependencies-count }}
  output-format:
    description: 'Actual output format used'
    value: ${{ steps.generate.outputs.output-format }}

runs:
  using: "composite"
  steps:
    - name: "‚úÖ Validate inputs"
      shell: bash
      run: |
        echo "üîç Validating CycloneDX inputs..."

        # Validate required path parameter
        if [ -z "${{ inputs.path }}" ]; then
          echo "‚ùå Error: Path parameter is required"
          exit 1
        fi

        # Validate path exists
        if [ ! -e "${{ inputs.path }}" ]; then
          echo "‚ùå Error: Specified path does not exist: ${{ inputs.path }}"
          exit 1
        fi

        # Validate output format if specified
        if [ -n "${{ inputs.output-format }}" ]; then
          case "${{ inputs.output-format }}" in
            Auto|Xml|Json|UnsafeJson) ;;
            *) echo "‚ùå Error: Invalid output format. Must be one of: Auto, Xml, Json, UnsafeJson"; exit 1 ;;
          esac
        fi

        # Validate set-type if specified
        if [ -n "${{ inputs.set-type }}" ]; then
          case "${{ inputs.set-type }}" in
            Application|Container|Cryptographic_Asset|Data|Device|Device_Driver|File|Firmware|Framework|Library|Machine_Learning_Model|Null|Operating_System|Platform) ;;
            *) echo "‚ùå Error: Invalid component type. Must be one of: Application, Container, Cryptographic_Asset, Data, Device, Device_Driver, File, Firmware, Framework, Library, Machine_Learning_Model, Null, Operating_System, Platform"; exit 1 ;;
          esac
        fi

        # Validate timeout is numeric
        if [ -n "${{ inputs.dotnet-command-timeout }}" ]; then
          if ! [[ "${{ inputs.dotnet-command-timeout }}" =~ ^[0-9]+$ ]]; then
            echo "‚ùå Error: dotnet-command-timeout must be a number"
            exit 1
          fi
        fi

        # Validate GitHub credentials are paired
        if [ -n "${{ inputs.github-username }}" ] && [ -z "${{ inputs.github-token }}" ] && [ -z "${{ inputs.github-bearer-token }}" ]; then
          echo "‚ùå Error: GitHub username provided but no token specified"
          exit 1
        fi

        # Validate NuGet credentials
        if [ -n "${{ inputs.nuget-username }}" ] && [ -z "${{ inputs.nuget-password }}" ]; then
          echo "‚ùå Error: NuGet username provided but no password specified"
          exit 1
        fi

        # Validate boolean inputs
        for param in exclude-dev exclude-test-projects recursive include-project-references no-serial-number disable-package-restore disable-hash-computation enable-github-licenses nuget-password-clear-text; do
          case $param in
            exclude-dev) value="${{ inputs.exclude-dev }}" ;;
            exclude-test-projects) value="${{ inputs.exclude-test-projects }}" ;;
            recursive) value="${{ inputs.recursive }}" ;;
            include-project-references) value="${{ inputs.include-project-references }}" ;;
            no-serial-number) value="${{ inputs.no-serial-number }}" ;;
            disable-package-restore) value="${{ inputs.disable-package-restore }}" ;;
            disable-hash-computation) value="${{ inputs.disable-hash-computation }}" ;;
            enable-github-licenses) value="${{ inputs.enable-github-licenses }}" ;;
            nuget-password-clear-text) value="${{ inputs.nuget-password-clear-text }}" ;;
          esac
          if [ -n "$value" ] && [ "$value" != "true" ] && [ "$value" != "false" ]; then
            echo "‚ùå Error: Parameter $param must be 'true' or 'false', got: $value"
            exit 1
          fi
        done

        echo "‚úÖ Input validation passed"

    - name: "üì¶ Install CycloneDX tool"
      uses: "./dotnet-tool-install"
      with:
        tool-name: 'CycloneDX'

    - name: "üîß Generate SBOM with CycloneDX"
      id: generate
      shell: bash
      run: |
        echo "üöÄ Generating SBOM with CycloneDX..."

        # Create output directory
        mkdir -p "${{ inputs.output }}"

        # Build command arguments array
        COMMAND_ARGS=("${{ inputs.path }}")

        # Add framework if specified
        if [ -n "${{ inputs.framework }}" ]; then
          COMMAND_ARGS+=("--framework" "${{ inputs.framework }}")
          echo "üéØ Using framework: ${{ inputs.framework }}"
        fi

        # Add runtime if specified
        if [ -n "${{ inputs.runtime }}" ]; then
          COMMAND_ARGS+=("--runtime" "${{ inputs.runtime }}")
          echo "üñ•Ô∏è Using runtime: ${{ inputs.runtime }}"
        fi

        # Add output directory
        COMMAND_ARGS+=("--output" "${{ inputs.output }}")

        # Add filename if specified
        if [ -n "${{ inputs.filename }}" ]; then
          COMMAND_ARGS+=("--filename" "${{ inputs.filename }}")
          echo "üìÑ Using filename: ${{ inputs.filename }}"
        fi

        # Add output format
        if [ -n "${{ inputs.output-format }}" ]; then
          COMMAND_ARGS+=("--output-format" "${{ inputs.output-format }}")
          echo "üìã Using output format: ${{ inputs.output-format }}"
        fi

        # Add boolean flags
        [ "${{ inputs.exclude-dev }}" = "true" ] && COMMAND_ARGS+=("--exclude-dev") && echo "üö´ Excluding development dependencies"
        [ "${{ inputs.exclude-test-projects }}" = "true" ] && COMMAND_ARGS+=("--exclude-test-projects") && echo "üö´ Excluding test projects"
        [ "${{ inputs.recursive }}" = "true" ] && COMMAND_ARGS+=("--recursive") && echo "üîÑ Using recursive scan"
        [ "${{ inputs.include-project-references }}" = "true" ] && COMMAND_ARGS+=("--include-project-references") && echo "üîó Including project references"
        [ "${{ inputs.no-serial-number }}" = "true" ] && COMMAND_ARGS+=("--no-serial-number") && echo "üî¢ Omitting serial number"
        [ "${{ inputs.disable-package-restore }}" = "true" ] && COMMAND_ARGS+=("--disable-package-restore") && echo "üì¶ Package restore disabled"
        [ "${{ inputs.disable-hash-computation }}" = "true" ] && COMMAND_ARGS+=("--disable-hash-computation") && echo "üîê Hash computation disabled"
        [ "${{ inputs.enable-github-licenses }}" = "true" ] && COMMAND_ARGS+=("--enable-github-licenses") && echo "üîç GitHub license resolution enabled"
        [ "${{ inputs.nuget-password-clear-text }}" = "true" ] && COMMAND_ARGS+=("--isBaseUrlPasswordClearText") && echo "üîì NuGet password in clear text"

        # Add metadata overrides
        if [ -n "${{ inputs.set-name }}" ]; then
          COMMAND_ARGS+=("--set-name" "${{ inputs.set-name }}")
          echo "üè∑Ô∏è Setting component name: ${{ inputs.set-name }}"
        fi

        if [ -n "${{ inputs.set-version }}" ]; then
          COMMAND_ARGS+=("--set-version" "${{ inputs.set-version }}")
          echo "üè∑Ô∏è Setting component version: ${{ inputs.set-version }}"
        fi

        if [ -n "${{ inputs.set-type }}" ]; then
          COMMAND_ARGS+=("--set-type" "${{ inputs.set-type }}")
          echo "üè∑Ô∏è Setting component type: ${{ inputs.set-type }}"
        fi

        # Add timeout
        if [ -n "${{ inputs.dotnet-command-timeout }}" ]; then
          COMMAND_ARGS+=("--dotnet-command-timeout" "${{ inputs.dotnet-command-timeout }}")
          echo "‚è∞ Using timeout: ${{ inputs.dotnet-command-timeout }}ms"
        fi

        # Add GitHub credentials
        if [ -n "${{ inputs.github-username }}" ]; then
          COMMAND_ARGS+=("--github-username" "${{ inputs.github-username }}")
          echo "üë§ Using GitHub username for license resolution"
        fi

        if [ -n "${{ inputs.github-token }}" ]; then
          COMMAND_ARGS+=("--github-token" "${{ inputs.github-token }}")
          echo "üîë Using GitHub token for license resolution"
        fi

        if [ -n "${{ inputs.github-bearer-token }}" ]; then
          COMMAND_ARGS+=("--github-bearer-token" "${{ inputs.github-bearer-token }}")
          echo "üîë Using GitHub bearer token for license resolution"
        fi

        # Add NuGet repository settings
        if [ -n "${{ inputs.nuget-url }}" ]; then
          COMMAND_ARGS+=("--url" "${{ inputs.nuget-url }}")
          echo "üåê Using custom NuGet URL: ${{ inputs.nuget-url }}"
        fi

        if [ -n "${{ inputs.nuget-username }}" ]; then
          COMMAND_ARGS+=("--baseUrlUsername" "${{ inputs.nuget-username }}")
          echo "üë§ Using NuGet username"
        fi

        if [ -n "${{ inputs.nuget-password }}" ]; then
          COMMAND_ARGS+=("--baseUrlUserPassword" "${{ inputs.nuget-password }}")
          echo "üîë Using NuGet password"
        fi

        # Add build paths
        if [ -n "${{ inputs.base-intermediate-output-path }}" ]; then
          COMMAND_ARGS+=("--base-intermediate-output-path" "${{ inputs.base-intermediate-output-path }}")
          echo "üìÅ Using custom intermediate output path: ${{ inputs.base-intermediate-output-path }}"
        fi

        if [ -n "${{ inputs.import-metadata-path }}" ]; then
          COMMAND_ARGS+=("--import-metadata-path" "${{ inputs.import-metadata-path }}")
          echo "üìã Importing metadata from: ${{ inputs.import-metadata-path }}"
        fi

        # Add exclude filter
        if [ -n "${{ inputs.exclude-filter }}" ]; then
          COMMAND_ARGS+=("--exclude-filter" "${{ inputs.exclude-filter }}")
          echo "üö´ Excluding dependencies: ${{ inputs.exclude-filter }}"
        fi

        # Create full command for logging
        FULL_COMMAND="dotnet cyclonedx ${COMMAND_ARGS[*]}"
        echo "üìã Executing: $FULL_COMMAND"

        # Execute CycloneDX
        if dotnet cyclonedx "${COMMAND_ARGS[@]}"; then
          echo "‚úÖ SBOM generation completed successfully"

          # Determine the actual output file path
          SBOM_FILE="${{ inputs.output }}/${{ inputs.filename }}"

          # Handle auto-detection of filename if not specified
          if [ "${{ inputs.filename }}" = "bom.xml" ] || [ "${{ inputs.filename }}" = "" ]; then
            case "${{ inputs.output-format }}" in
              Json|UnsafeJson)
                SBOM_FILE="${{ inputs.output }}/bom.json"
                ;;
              *)
                SBOM_FILE="${{ inputs.output }}/bom.xml"
                ;;
            esac
          fi

          # Verify file was created
          if [ -f "$SBOM_FILE" ]; then
            echo "üìÑ SBOM file created: $SBOM_FILE"
            echo "sbom-path=$SBOM_FILE" >> $GITHUB_OUTPUT
          else
            echo "‚ùå SBOM file not found at expected location: $SBOM_FILE"
            exit 1
          fi

          # Set output format
          echo "output-format=${{ inputs.output-format }}" >> $GITHUB_OUTPUT

        else
          echo "‚ùå SBOM generation failed"
          exit 1
        fi

    - name: "üìä Analyze generated SBOM"
      id: analyze
      shell: bash
      run: |
        echo "üìä Analyzing generated SBOM..."

        SBOM_FILE="${{ steps.generate.outputs.sbom-path }}"

        if [ -f "$SBOM_FILE" ]; then
          # Get file size
          if command -v stat >/dev/null 2>&1; then
            if stat -f%z "$SBOM_FILE" >/dev/null 2>&1; then
              # macOS/BSD stat
              SBOM_SIZE=$(stat -f%z "$SBOM_FILE")
            else
              # GNU stat
              SBOM_SIZE=$(stat -c%s "$SBOM_FILE")
            fi
          else
            SBOM_SIZE="unknown"
          fi

          echo "üìè SBOM file size: $SBOM_SIZE bytes"
          echo "sbom-size=$SBOM_SIZE" >> $GITHUB_OUTPUT

          # Count dependencies (rough estimation)
          DEPS_COUNT="unknown"
          case "${{ inputs.output-format }}" in
            Json|UnsafeJson)
              if command -v jq >/dev/null 2>&1; then
                DEPS_COUNT=$(jq '.components | length' "$SBOM_FILE" 2>/dev/null || echo "unknown")
              elif command -v grep >/dev/null 2>&1; then
                DEPS_COUNT=$(grep -c '"name"' "$SBOM_FILE" 2>/dev/null || echo "unknown")
              fi
              ;;
            *)
              if command -v xmllint >/dev/null 2>&1; then
                DEPS_COUNT=$(xmllint --xpath "count(//component)" "$SBOM_FILE" 2>/dev/null || echo "unknown")
              elif command -v grep >/dev/null 2>&1; then
                DEPS_COUNT=$(grep -c '<component' "$SBOM_FILE" 2>/dev/null || echo "unknown")
              fi
              ;;
          esac

          echo "üì¶ Dependencies found: $DEPS_COUNT"
          echo "dependencies-count=$DEPS_COUNT" >> $GITHUB_OUTPUT

        else
          echo "‚ùå SBOM file not found for analysis"
          echo "sbom-size=0" >> $GITHUB_OUTPUT
          echo "dependencies-count=0" >> $GITHUB_OUTPUT
        fi

    - name: "üìä Action Summary"
      if: always()
      shell: bash
      run: |
        cat >> $GITHUB_STEP_SUMMARY << 'EOF'
        <details><summary>Expand for details - üìä CycloneDX SBOM Generation Summary</summary>

        ## üîß Input Parameters
        | Parameter | Value |
        |-----------|-------|
        | üìç Source Path | `${{ inputs.path }}` |
        | üìÅ Output Directory | `${{ inputs.output }}` |
        | üìÑ Filename | `${{ inputs.filename }}` |
        | üìã Output Format | `${{ inputs.output-format }}` |
        | üéØ Framework | `${{ inputs.framework || 'all' }}` |
        | üñ•Ô∏è Runtime | `${{ inputs.runtime || 'all' }}` |
        | üè∑Ô∏è Component Name | `${{ inputs.set-name || 'auto' }}` |
        | üè∑Ô∏è Component Version | `${{ inputs.set-version || 'auto' }}` |
        | üè∑Ô∏è Component Type | `${{ inputs.set-type }}` |

        ## üì§ Generation Results
        | Metric | Value |
        |--------|-------|
        | üìÑ SBOM File Path | `${{ steps.generate.outputs.sbom-path }}` |
        | üìè File Size | `${{ steps.analyze.outputs.sbom-size }} bytes` |
        | üì¶ Dependencies Count | `${{ steps.analyze.outputs.dependencies-count }}` |
        | üìã Output Format | `${{ steps.generate.outputs.output-format }}` |

        ## ‚öôÔ∏è Configuration Options
        | Option | Status |
        |--------|--------|
        | üö´ Exclude Dev Dependencies | `${{ inputs.exclude-dev }}` |
        | üö´ Exclude Test Projects | `${{ inputs.exclude-test-projects }}` |
        | üîÑ Recursive Scan | `${{ inputs.recursive }}` |
        | üîó Include Project References | `${{ inputs.include-project-references }}` |
        | üî¢ No Serial Number | `${{ inputs.no-serial-number }}` |
        | üì¶ Disable Package Restore | `${{ inputs.disable-package-restore }}` |
        | üîê Disable Hash Computation | `${{ inputs.disable-hash-computation }}` |
        | üîç GitHub License Resolution | `${{ inputs.enable-github-licenses }}` |

        ## üîß Process Details
        | Step | Status |
        |------|--------|
        | ‚úÖ Input Validation | `‚úÖ Completed` |
        | üì¶ Tool Installation | `‚úÖ Completed` |
        | üîß SBOM Generation | `${{ steps.generate.outcome == 'success' && '‚úÖ Completed' || '‚ùå Failed' }}` |
        | üìä SBOM Analysis | `${{ steps.analyze.outcome == 'success' && '‚úÖ Completed' || '‚ùå Failed' }}` |

        </details>
        EOF

branding:
  icon: 'file-text'
  color: 'blue'
